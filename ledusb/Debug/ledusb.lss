
ledusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000cc  20000000  000035a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000060c  200000cc  0000366c  000200cc  2**2
                  ALLOC
  3 .stack        00000400  200006d8  00003c78  000200cc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029da5  00000000  00000000  0002014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e02  00000000  00000000  00049ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e287  00000000  00000000  0004dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000cf0  00000000  00000000  0005bf7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002430  00000000  00000000  0005cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017cbc  00000000  00000000  0005f09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011314  00000000  00000000  00076d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00078928  00000000  00000000  0008806b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026ac  00000000  00000000  00100994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 0a 00 20 05 01 00 00 01 01 00 00 01 01 00 00     ... ............
	...
      2c:	01 01 00 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
      3c:	01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00     ................
      4c:	01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00     ................
      5c:	1d 1d 00 00 01 01 00 00 01 01 00 00 01 01 00 00     ................
      6c:	01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00     ................
      7c:	01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	200000cc 	.word	0x200000cc
      ac:	00000000 	.word	0x00000000
      b0:	000035a0 	.word	0x000035a0

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	200000d0 	.word	0x200000d0
      e0:	000035a0 	.word	0x000035a0
      e4:	000035a0 	.word	0x000035a0
      e8:	00000000 	.word	0x00000000

000000ec <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      ec:	b510      	push	{r4, lr}
	system_init();
      ee:	4b02      	ldr	r3, [pc, #8]	; (f8 <atmel_start_init+0xc>)
      f0:	4798      	blx	r3
	usb_init();
      f2:	4b02      	ldr	r3, [pc, #8]	; (fc <atmel_start_init+0x10>)
      f4:	4798      	blx	r3
}
      f6:	bd10      	pop	{r4, pc}
      f8:	00000365 	.word	0x00000365
      fc:	00002971 	.word	0x00002971

00000100 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     100:	e7fe      	b.n	100 <Dummy_Handler>
	...

00000104 <Reset_Handler>:
        if (pSrc != pDest) {
     104:	4821      	ldr	r0, [pc, #132]	; (18c <Reset_Handler+0x88>)
     106:	4922      	ldr	r1, [pc, #136]	; (190 <Reset_Handler+0x8c>)
{
     108:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     10a:	4288      	cmp	r0, r1
     10c:	d004      	beq.n	118 <Reset_Handler+0x14>
     10e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     110:	4c20      	ldr	r4, [pc, #128]	; (194 <Reset_Handler+0x90>)
     112:	18ca      	adds	r2, r1, r3
     114:	42a2      	cmp	r2, r4
     116:	d332      	bcc.n	17e <Reset_Handler+0x7a>
                *pDest++ = 0;
     118:	2100      	movs	r1, #0
     11a:	4b1f      	ldr	r3, [pc, #124]	; (198 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     11c:	4a1f      	ldr	r2, [pc, #124]	; (19c <Reset_Handler+0x98>)
     11e:	4293      	cmp	r3, r2
     120:	d331      	bcc.n	186 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     122:	21ff      	movs	r1, #255	; 0xff
     124:	4b1e      	ldr	r3, [pc, #120]	; (1a0 <Reset_Handler+0x9c>)
     126:	4a1f      	ldr	r2, [pc, #124]	; (1a4 <Reset_Handler+0xa0>)
     128:	438b      	bics	r3, r1
     12a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     12c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     12e:	250c      	movs	r5, #12
     130:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     132:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     134:	4b1c      	ldr	r3, [pc, #112]	; (1a8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     136:	481d      	ldr	r0, [pc, #116]	; (1ac <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     138:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     13a:	78c3      	ldrb	r3, [r0, #3]
     13c:	39fc      	subs	r1, #252	; 0xfc
     13e:	438b      	bics	r3, r1
     140:	4313      	orrs	r3, r2
     142:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     144:	78c3      	ldrb	r3, [r0, #3]
     146:	43ab      	bics	r3, r5
     148:	4323      	orrs	r3, r4
     14a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     14c:	4b18      	ldr	r3, [pc, #96]	; (1b0 <Reset_Handler+0xac>)
     14e:	7b98      	ldrb	r0, [r3, #14]
     150:	43b0      	bics	r0, r6
     152:	0006      	movs	r6, r0
     154:	2020      	movs	r0, #32
     156:	4330      	orrs	r0, r6
     158:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     15a:	7b98      	ldrb	r0, [r3, #14]
     15c:	43a8      	bics	r0, r5
     15e:	4304      	orrs	r4, r0
     160:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	4388      	bics	r0, r1
     166:	4302      	orrs	r2, r0
     168:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     16a:	2380      	movs	r3, #128	; 0x80
     16c:	4a11      	ldr	r2, [pc, #68]	; (1b4 <Reset_Handler+0xb0>)
     16e:	6851      	ldr	r1, [r2, #4]
     170:	430b      	orrs	r3, r1
     172:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     174:	4b10      	ldr	r3, [pc, #64]	; (1b8 <Reset_Handler+0xb4>)
     176:	4798      	blx	r3
        main();
     178:	4b10      	ldr	r3, [pc, #64]	; (1bc <Reset_Handler+0xb8>)
     17a:	4798      	blx	r3
     17c:	e7fe      	b.n	17c <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     17e:	58c5      	ldr	r5, [r0, r3]
     180:	3304      	adds	r3, #4
     182:	6015      	str	r5, [r2, #0]
     184:	e7c5      	b.n	112 <Reset_Handler+0xe>
                *pDest++ = 0;
     186:	c302      	stmia	r3!, {r1}
     188:	e7c9      	b.n	11e <Reset_Handler+0x1a>
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	000035a0 	.word	0x000035a0
     190:	20000000 	.word	0x20000000
     194:	200000cc 	.word	0x200000cc
     198:	200000cc 	.word	0x200000cc
     19c:	200006d8 	.word	0x200006d8
     1a0:	00000000 	.word	0x00000000
     1a4:	e000ed00 	.word	0xe000ed00
     1a8:	410070fc 	.word	0x410070fc
     1ac:	41005000 	.word	0x41005000
     1b0:	41004800 	.word	0x41004800
     1b4:	41004000 	.word	0x41004000
     1b8:	00002b59 	.word	0x00002b59
     1bc:	00002801 	.word	0x00002801

000001c0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     1c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);
     1c2:	241f      	movs	r4, #31
	uint8_t port = GPIO_PORT(gpio);
     1c4:	0942      	lsrs	r2, r0, #5
	uint8_t pin  = GPIO_PIN(gpio);
     1c6:	b2c0      	uxtb	r0, r0
     1c8:	4004      	ands	r4, r0
     1ca:	23ff      	movs	r3, #255	; 0xff

	if (function == GPIO_PIN_FUNCTION_OFF) {
     1cc:	1c4d      	adds	r5, r1, #1
     1ce:	d109      	bne.n	1e4 <_gpio_set_pin_function+0x24>
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1d0:	401a      	ands	r2, r3
     1d2:	01d2      	lsls	r2, r2, #7
     1d4:	4b14      	ldr	r3, [pc, #80]	; (228 <_gpio_set_pin_function+0x68>)
     1d6:	18a2      	adds	r2, r4, r2
     1d8:	18d2      	adds	r2, r2, r3
     1da:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1dc:	3102      	adds	r1, #2
     1de:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e0:	7013      	strb	r3, [r2, #0]
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
	tmp &= ~PORT_PINCFG_PMUXEN;
     1e4:	2501      	movs	r5, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1e6:	4013      	ands	r3, r2
     1e8:	4a10      	ldr	r2, [pc, #64]	; (22c <_gpio_set_pin_function+0x6c>)
     1ea:	01db      	lsls	r3, r3, #7
     1ec:	189b      	adds	r3, r3, r2
     1ee:	191e      	adds	r6, r3, r4
     1f0:	3640      	adds	r6, #64	; 0x40
     1f2:	7832      	ldrb	r2, [r6, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1f6:	432a      	orrs	r2, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1f8:	7032      	strb	r2, [r6, #0]
     1fa:	0862      	lsrs	r2, r4, #1
		if (pin & 1) {
     1fc:	4228      	tst	r0, r5
     1fe:	d009      	beq.n	214 <_gpio_set_pin_function+0x54>
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     200:	200f      	movs	r0, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     202:	189a      	adds	r2, r3, r2
     204:	3230      	adds	r2, #48	; 0x30
     206:	7813      	ldrb	r3, [r2, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     208:	0109      	lsls	r1, r1, #4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     20a:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
     20c:	4319      	orrs	r1, r3
     20e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     210:	7011      	strb	r1, [r2, #0]
     212:	e7e6      	b.n	1e2 <_gpio_set_pin_function+0x22>
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     214:	200f      	movs	r0, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     216:	189b      	adds	r3, r3, r2
     218:	3330      	adds	r3, #48	; 0x30
     21a:	781a      	ldrb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     21c:	4001      	ands	r1, r0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     21e:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
     220:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     222:	7019      	strb	r1, [r3, #0]
}
     224:	e7dd      	b.n	1e2 <_gpio_set_pin_function+0x22>
     226:	46c0      	nop			; (mov r8, r8)
     228:	41004440 	.word	0x41004440
     22c:	41004400 	.word	0x41004400

00000230 <_gpio_set_pin_pull_mode.constprop.3>:
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     230:	2204      	movs	r2, #4
     232:	4b03      	ldr	r3, [pc, #12]	; (240 <_gpio_set_pin_pull_mode.constprop.3+0x10>)
     234:	18c0      	adds	r0, r0, r3
     236:	7803      	ldrb	r3, [r0, #0]
     238:	4393      	bics	r3, r2
     23a:	7003      	strb	r3, [r0, #0]
}
     23c:	4770      	bx	lr
     23e:	46c0      	nop			; (mov r8, r8)
     240:	41004440 	.word	0x41004440

00000244 <I2C_0_PORT_init>:
#include <hpl_pm_base.h>

struct i2c_m_sync_desc I2C_0;

void I2C_0_PORT_init(void)
{
     244:	b570      	push	{r4, r5, r6, lr}
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     246:	200e      	movs	r0, #14
     248:	4d05      	ldr	r5, [pc, #20]	; (260 <I2C_0_PORT_init+0x1c>)
     24a:	47a8      	blx	r5
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
	_gpio_set_pin_function(pin, function);
     24c:	4905      	ldr	r1, [pc, #20]	; (264 <I2C_0_PORT_init+0x20>)
     24e:	4c06      	ldr	r4, [pc, #24]	; (268 <I2C_0_PORT_init+0x24>)
     250:	200e      	movs	r0, #14
     252:	47a0      	blx	r4
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     254:	200f      	movs	r0, #15
     256:	47a8      	blx	r5
	_gpio_set_pin_function(pin, function);
     258:	4904      	ldr	r1, [pc, #16]	; (26c <I2C_0_PORT_init+0x28>)
     25a:	200f      	movs	r0, #15
     25c:	47a0      	blx	r4
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA15, PINMUX_PA15C_SERCOM0_PAD1);
}
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	00000231 	.word	0x00000231
     264:	000e0002 	.word	0x000e0002
     268:	000001c1 	.word	0x000001c1
     26c:	000f0002 	.word	0x000f0002

00000270 <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     270:	2304      	movs	r3, #4
     272:	4a05      	ldr	r2, [pc, #20]	; (288 <I2C_0_CLOCK_init+0x18>)
     274:	6a11      	ldr	r1, [r2, #32]
     276:	430b      	orrs	r3, r1
     278:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     27a:	4b04      	ldr	r3, [pc, #16]	; (28c <I2C_0_CLOCK_init+0x1c>)
     27c:	4a04      	ldr	r2, [pc, #16]	; (290 <I2C_0_CLOCK_init+0x20>)
     27e:	805a      	strh	r2, [r3, #2]
     280:	4a04      	ldr	r2, [pc, #16]	; (294 <I2C_0_CLOCK_init+0x24>)
     282:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	_gclk_enable_channel(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
}
     284:	4770      	bx	lr
     286:	46c0      	nop			; (mov r8, r8)
     288:	40000400 	.word	0x40000400
     28c:	40000c00 	.word	0x40000c00
     290:	0000400e 	.word	0x0000400e
     294:	0000430d 	.word	0x0000430d

00000298 <I2C_0_init>:

void I2C_0_init(void)
{
     298:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     29a:	4b04      	ldr	r3, [pc, #16]	; (2ac <I2C_0_init+0x14>)
     29c:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM0);
     29e:	4904      	ldr	r1, [pc, #16]	; (2b0 <I2C_0_init+0x18>)
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <I2C_0_init+0x1c>)
     2a2:	4805      	ldr	r0, [pc, #20]	; (2b8 <I2C_0_init+0x20>)
     2a4:	4798      	blx	r3
	I2C_0_PORT_init();
     2a6:	4b05      	ldr	r3, [pc, #20]	; (2bc <I2C_0_init+0x24>)
     2a8:	4798      	blx	r3
}
     2aa:	bd10      	pop	{r4, pc}
     2ac:	00000271 	.word	0x00000271
     2b0:	42000800 	.word	0x42000800
     2b4:	00000415 	.word	0x00000415
     2b8:	200006b4 	.word	0x200006b4
     2bc:	00000245 	.word	0x00000245

000002c0 <TARGET_USB_PORT_init>:

void TARGET_USB_PORT_init(void)
{
     2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2c2:	24c0      	movs	r4, #192	; 0xc0
     2c4:	2380      	movs	r3, #128	; 0x80

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2c6:	2780      	movs	r7, #128	; 0x80
     2c8:	4d0e      	ldr	r5, [pc, #56]	; (304 <TARGET_USB_PORT_init+0x44>)
     2ca:	4a0f      	ldr	r2, [pc, #60]	; (308 <TARGET_USB_PORT_init+0x48>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2cc:	05e4      	lsls	r4, r4, #23
     2ce:	045b      	lsls	r3, r3, #17
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d0:	05ff      	lsls	r7, r7, #23
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2d2:	60a3      	str	r3, [r4, #8]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     2d4:	4e0d      	ldr	r6, [pc, #52]	; (30c <TARGET_USB_PORT_init+0x4c>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d6:	62af      	str	r7, [r5, #40]	; 0x28
     2d8:	2018      	movs	r0, #24
     2da:	62aa      	str	r2, [r5, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2dc:	6163      	str	r3, [r4, #20]
     2de:	47b0      	blx	r6
	_gpio_set_pin_function(pin, function);
     2e0:	490b      	ldr	r1, [pc, #44]	; (310 <TARGET_USB_PORT_init+0x50>)
     2e2:	2018      	movs	r0, #24
     2e4:	4b0b      	ldr	r3, [pc, #44]	; (314 <TARGET_USB_PORT_init+0x54>)
     2e6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2e8:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ea:	4a0b      	ldr	r2, [pc, #44]	; (318 <TARGET_USB_PORT_init+0x58>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2ec:	049b      	lsls	r3, r3, #18
     2ee:	60a3      	str	r3, [r4, #8]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     2f0:	2019      	movs	r0, #25
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2f2:	62af      	str	r7, [r5, #40]	; 0x28
     2f4:	62aa      	str	r2, [r5, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2f6:	6163      	str	r3, [r4, #20]
     2f8:	47b0      	blx	r6
	_gpio_set_pin_function(pin, function);
     2fa:	4908      	ldr	r1, [pc, #32]	; (31c <TARGET_USB_PORT_init+0x5c>)
     2fc:	2019      	movs	r0, #25
     2fe:	4b05      	ldr	r3, [pc, #20]	; (314 <TARGET_USB_PORT_init+0x54>)
     300:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     304:	41004400 	.word	0x41004400
     308:	c0000100 	.word	0xc0000100
     30c:	00000231 	.word	0x00000231
     310:	00180006 	.word	0x00180006
     314:	000001c1 	.word	0x000001c1
     318:	c0000200 	.word	0xc0000200
     31c:	00190006 	.word	0x00190006

00000320 <TARGET_USB_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     320:	2220      	movs	r2, #32
     322:	4b06      	ldr	r3, [pc, #24]	; (33c <TARGET_USB_CLOCK_init+0x1c>)
     324:	69d9      	ldr	r1, [r3, #28]
     326:	430a      	orrs	r2, r1
     328:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     32a:	2240      	movs	r2, #64	; 0x40
     32c:	6959      	ldr	r1, [r3, #20]
     32e:	430a      	orrs	r2, r1
     330:	615a      	str	r2, [r3, #20]
     332:	4a03      	ldr	r2, [pc, #12]	; (340 <TARGET_USB_CLOCK_init+0x20>)
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <TARGET_USB_CLOCK_init+0x24>)
     336:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     338:	4770      	bx	lr
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	40000400 	.word	0x40000400
     340:	00004106 	.word	0x00004106
     344:	40000c00 	.word	0x40000c00

00000348 <TARGET_USB_init>:

void TARGET_USB_init(void)
{
     348:	b510      	push	{r4, lr}
	TARGET_USB_CLOCK_init();
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <TARGET_USB_init+0x10>)
     34c:	4798      	blx	r3
	usb_d_init();
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <TARGET_USB_init+0x14>)
     350:	4798      	blx	r3
	TARGET_USB_PORT_init();
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <TARGET_USB_init+0x18>)
     354:	4798      	blx	r3
}
     356:	bd10      	pop	{r4, pc}
     358:	00000321 	.word	0x00000321
     35c:	000006d5 	.word	0x000006d5
     360:	000002c1 	.word	0x000002c1

00000364 <system_init>:

void system_init(void)
{
     364:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     366:	4b03      	ldr	r3, [pc, #12]	; (374 <system_init+0x10>)
     368:	4798      	blx	r3
	init_mcu();

	I2C_0_init();
     36a:	4b03      	ldr	r3, [pc, #12]	; (378 <system_init+0x14>)
     36c:	4798      	blx	r3

	TARGET_USB_init();
     36e:	4b03      	ldr	r3, [pc, #12]	; (37c <system_init+0x18>)
     370:	4798      	blx	r3
}
     372:	bd10      	pop	{r4, pc}
     374:	00000a81 	.word	0x00000a81
     378:	00000299 	.word	0x00000299
     37c:	00000349 	.word	0x00000349

00000380 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     380:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     384:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     386:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     388:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     38c:	4770      	bx	lr

0000038e <atomic_leave_critical>:
     38e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     392:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     394:	f383 8810 	msr	PRIMASK, r3
}
     398:	4770      	bx	lr
	...

0000039c <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     39c:	4b04      	ldr	r3, [pc, #16]	; (3b0 <delay_ms+0x14>)
{
     39e:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     3a0:	681c      	ldr	r4, [r3, #0]
     3a2:	4b04      	ldr	r3, [pc, #16]	; (3b4 <delay_ms+0x18>)
     3a4:	4798      	blx	r3
     3a6:	4b04      	ldr	r3, [pc, #16]	; (3b8 <delay_ms+0x1c>)
     3a8:	0001      	movs	r1, r0
     3aa:	0020      	movs	r0, r4
     3ac:	4798      	blx	r3
}
     3ae:	bd10      	pop	{r4, pc}
     3b0:	200000e8 	.word	0x200000e8
     3b4:	00000a5d 	.word	0x00000a5d
     3b8:	00000a79 	.word	0x00000a79

000003bc <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     3be:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     3c0:	3814      	subs	r0, #20
     3c2:	8b82      	ldrh	r2, [r0, #28]
     3c4:	ab01      	add	r3, sp, #4
     3c6:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
	msg.flags  = I2C_M_STOP;
     3c8:	4a05      	ldr	r2, [pc, #20]	; (3e0 <i2c_m_sync_write+0x24>)
	msg.buffer = (uint8_t *)buf;
     3ca:	9103      	str	r1, [sp, #12]
	msg.flags  = I2C_M_STOP;
     3cc:	805a      	strh	r2, [r3, #2]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3ce:	0019      	movs	r1, r3
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <i2c_m_sync_write+0x28>)
	msg.len    = n;
     3d2:	9402      	str	r4, [sp, #8]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3d4:	4798      	blx	r3

	if (ret) {
     3d6:	2800      	cmp	r0, #0
     3d8:	d100      	bne.n	3dc <i2c_m_sync_write+0x20>
		return ret;
	}

	return n;
     3da:	0020      	movs	r0, r4
}
     3dc:	b004      	add	sp, #16
     3de:	bd10      	pop	{r4, pc}
     3e0:	ffff8000 	.word	0xffff8000
     3e4:	00000e79 	.word	0x00000e79

000003e8 <i2c_m_sync_read>:
{
     3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     3ea:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     3ec:	3814      	subs	r0, #20
     3ee:	8b82      	ldrh	r2, [r0, #28]
     3f0:	ab01      	add	r3, sp, #4
     3f2:	801a      	strh	r2, [r3, #0]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     3f4:	4a05      	ldr	r2, [pc, #20]	; (40c <STACK_SIZE+0xc>)
	msg.buffer = buf;
     3f6:	9103      	str	r1, [sp, #12]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     3f8:	805a      	strh	r2, [r3, #2]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3fa:	0019      	movs	r1, r3
     3fc:	4b04      	ldr	r3, [pc, #16]	; (410 <STACK_SIZE+0x10>)
	msg.len    = n;
     3fe:	9402      	str	r4, [sp, #8]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     400:	4798      	blx	r3
	if (ret) {
     402:	2800      	cmp	r0, #0
     404:	d100      	bne.n	408 <STACK_SIZE+0x8>
	return n;
     406:	0020      	movs	r0, r4
}
     408:	b004      	add	sp, #16
     40a:	bd10      	pop	{r4, pc}
     40c:	ffff8001 	.word	0xffff8001
     410:	00000e79 	.word	0x00000e79

00000414 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     414:	b570      	push	{r4, r5, r6, lr}
     416:	0004      	movs	r4, r0
	int32_t init_status;
	ASSERT(i2c);
     418:	1e43      	subs	r3, r0, #1
     41a:	4198      	sbcs	r0, r3
{
     41c:	000d      	movs	r5, r1
	ASSERT(i2c);
     41e:	b2c0      	uxtb	r0, r0
     420:	4907      	ldr	r1, [pc, #28]	; (440 <i2c_m_sync_init+0x2c>)
     422:	4b08      	ldr	r3, [pc, #32]	; (444 <i2c_m_sync_init+0x30>)
     424:	225e      	movs	r2, #94	; 0x5e
     426:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     428:	0029      	movs	r1, r5
     42a:	0020      	movs	r0, r4
     42c:	4b06      	ldr	r3, [pc, #24]	; (448 <i2c_m_sync_init+0x34>)
     42e:	4798      	blx	r3
	if (init_status) {
     430:	2800      	cmp	r0, #0
     432:	d103      	bne.n	43c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     434:	4b05      	ldr	r3, [pc, #20]	; (44c <i2c_m_sync_init+0x38>)
     436:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     438:	4b05      	ldr	r3, [pc, #20]	; (450 <i2c_m_sync_init+0x3c>)
     43a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     43c:	bd70      	pop	{r4, r5, r6, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	00003404 	.word	0x00003404
     444:	000009e5 	.word	0x000009e5
     448:	00000e1d 	.word	0x00000e1d
     44c:	000003e9 	.word	0x000003e9
     450:	000003bd 	.word	0x000003bd

00000454 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     454:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     456:	4b01      	ldr	r3, [pc, #4]	; (45c <i2c_m_sync_enable+0x8>)
     458:	4798      	blx	r3
}
     45a:	bd10      	pop	{r4, pc}
     45c:	00000e4d 	.word	0x00000e4d

00000460 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     460:	2380      	movs	r3, #128	; 0x80
     462:	0589      	lsls	r1, r1, #22
     464:	00db      	lsls	r3, r3, #3
     466:	0d89      	lsrs	r1, r1, #22
     468:	401a      	ands	r2, r3
     46a:	430a      	orrs	r2, r1
     46c:	8382      	strh	r2, [r0, #28]
}
     46e:	0010      	movs	r0, r2
     470:	4770      	bx	lr
	...

00000474 <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     474:	b5f0      	push	{r4, r5, r6, r7, lr}
     476:	b087      	sub	sp, #28
     478:	9300      	str	r3, [sp, #0]
     47a:	466b      	mov	r3, sp
     47c:	71d9      	strb	r1, [r3, #7]
     47e:	0017      	movs	r7, r2
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     480:	8b82      	ldrh	r2, [r0, #28]
     482:	ac03      	add	r4, sp, #12
     484:	8022      	strh	r2, [r4, #0]
	msg.len    = 1;
     486:	2201      	movs	r2, #1
     488:	9204      	str	r2, [sp, #16]
	msg.flags  = 0;
     48a:	2200      	movs	r2, #0
{
     48c:	3307      	adds	r3, #7
	msg.buffer = &reg;

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     48e:	0021      	movs	r1, r4
     490:	4e08      	ldr	r6, [pc, #32]	; (4b4 <i2c_m_sync_cmd_read+0x40>)
{
     492:	0005      	movs	r5, r0
	msg.flags  = 0;
     494:	8062      	strh	r2, [r4, #2]
	msg.buffer = &reg;
     496:	9305      	str	r3, [sp, #20]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     498:	47b0      	blx	r6

	if (ret != 0) {
     49a:	2800      	cmp	r0, #0
     49c:	d107      	bne.n	4ae <i2c_m_sync_cmd_read+0x3a>
		/* error occurred */
		return ret;
	}

	msg.flags  = I2C_M_STOP | I2C_M_RD;
     49e:	4b06      	ldr	r3, [pc, #24]	; (4b8 <i2c_m_sync_cmd_read+0x44>)
	msg.buffer = buffer;
	msg.len    = length;

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     4a0:	0021      	movs	r1, r4
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     4a2:	8063      	strh	r3, [r4, #2]
	msg.len    = length;
     4a4:	9b00      	ldr	r3, [sp, #0]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     4a6:	0028      	movs	r0, r5
	msg.buffer = buffer;
     4a8:	60a7      	str	r7, [r4, #8]
	msg.len    = length;
     4aa:	6063      	str	r3, [r4, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     4ac:	47b0      	blx	r6
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     4ae:	b007      	add	sp, #28
     4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	00000e79 	.word	0x00000e79
     4b8:	ffff8001 	.word	0xffff8001

000004bc <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     4bc:	3014      	adds	r0, #20
     4be:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     4c0:	2000      	movs	r0, #0
     4c2:	4770      	bx	lr

000004c4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c4:	b570      	push	{r4, r5, r6, lr}
     4c6:	0004      	movs	r4, r0
     4c8:	000d      	movs	r5, r1
     4ca:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4cc:	2800      	cmp	r0, #0
     4ce:	d003      	beq.n	4d8 <io_write+0x14>
     4d0:	0008      	movs	r0, r1
     4d2:	1e43      	subs	r3, r0, #1
     4d4:	4198      	sbcs	r0, r3
     4d6:	b2c0      	uxtb	r0, r0
     4d8:	2234      	movs	r2, #52	; 0x34
     4da:	4904      	ldr	r1, [pc, #16]	; (4ec <io_write+0x28>)
     4dc:	4b04      	ldr	r3, [pc, #16]	; (4f0 <io_write+0x2c>)
     4de:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4e0:	0032      	movs	r2, r6
     4e2:	0029      	movs	r1, r5
     4e4:	6823      	ldr	r3, [r4, #0]
     4e6:	0020      	movs	r0, r4
     4e8:	4798      	blx	r3
}
     4ea:	bd70      	pop	{r4, r5, r6, pc}
     4ec:	00003420 	.word	0x00003420
     4f0:	000009e5 	.word	0x000009e5

000004f4 <_usb_d_find_ep>:
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     4f4:	220f      	movs	r2, #15
{
     4f6:	2300      	movs	r3, #0
     4f8:	b570      	push	{r4, r5, r6, lr}
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     4fa:	4c0a      	ldr	r4, [pc, #40]	; (524 <_usb_d_find_ep+0x30>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     4fc:	4002      	ands	r2, r0
     4fe:	015e      	lsls	r6, r3, #5
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     500:	19a5      	adds	r5, r4, r6
     502:	786d      	ldrb	r5, [r5, #1]
     504:	b259      	sxtb	r1, r3
     506:	4285      	cmp	r5, r0
     508:	d009      	beq.n	51e <_usb_d_find_ep+0x2a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     50a:	5d36      	ldrb	r6, [r6, r4]
     50c:	2e00      	cmp	r6, #0
     50e:	d101      	bne.n	514 <_usb_d_find_ep+0x20>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     510:	42aa      	cmp	r2, r5
     512:	d004      	beq.n	51e <_usb_d_find_ep+0x2a>
     514:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     516:	2b0d      	cmp	r3, #13
     518:	d1f1      	bne.n	4fe <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
     51a:	2101      	movs	r1, #1
     51c:	4249      	negs	r1, r1
}
     51e:	0008      	movs	r0, r1
     520:	bd70      	pop	{r4, r5, r6, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	200000ec 	.word	0x200000ec

00000528 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     528:	2000      	movs	r0, #0
     52a:	4770      	bx	lr

0000052c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     52c:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     52e:	4b08      	ldr	r3, [pc, #32]	; (550 <usb_d_cb_trans_more+0x24>)
{
     530:	0004      	movs	r4, r0
     532:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     534:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <usb_d_cb_trans_more+0x28>)
     538:	0140      	lsls	r0, r0, #5
     53a:	181b      	adds	r3, r3, r0
     53c:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     53e:	2000      	movs	r0, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     540:	2a03      	cmp	r2, #3
     542:	d103      	bne.n	54c <usb_d_cb_trans_more+0x20>
		return ept->callbacks.more(ep, transfered);
     544:	699b      	ldr	r3, [r3, #24]
     546:	0029      	movs	r1, r5
     548:	0020      	movs	r0, r4
     54a:	4798      	blx	r3
}
     54c:	bd70      	pop	{r4, r5, r6, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	000004f5 	.word	0x000004f5
     554:	200000ec 	.word	0x200000ec

00000558 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     55a:	4b39      	ldr	r3, [pc, #228]	; (640 <_usb_d_cb_trans_done+0xe8>)
{
     55c:	b087      	sub	sp, #28
     55e:	9000      	str	r0, [sp, #0]
     560:	000f      	movs	r7, r1
     562:	9201      	str	r2, [sp, #4]
	int8_t           ep_index = _usb_d_find_ep(ep);
     564:	4798      	blx	r3
     566:	4d37      	ldr	r5, [pc, #220]	; (644 <_usb_d_cb_trans_done+0xec>)
     568:	0144      	lsls	r4, r0, #5
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     56a:	2f00      	cmp	r7, #0
     56c:	d142      	bne.n	5f4 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_DONE;
     56e:	192e      	adds	r6, r5, r4
     570:	70f7      	strb	r7, [r6, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     572:	5d29      	ldrb	r1, [r5, r4]
     574:	2900      	cmp	r1, #0
     576:	d134      	bne.n	5e2 <_usb_d_cb_trans_done+0x8a>
     578:	0022      	movs	r2, r4
	if (state == USB_EP_S_X_DATA) {
     57a:	78b7      	ldrb	r7, [r6, #2]
     57c:	320c      	adds	r2, #12
     57e:	7870      	ldrb	r0, [r6, #1]
     580:	69f3      	ldr	r3, [r6, #28]
     582:	2f03      	cmp	r7, #3
     584:	d128      	bne.n	5d8 <_usb_d_cb_trans_done+0x80>
     586:	270c      	movs	r7, #12
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     588:	18aa      	adds	r2, r5, r2
     58a:	3101      	adds	r1, #1
     58c:	57f7      	ldrsb	r7, [r6, r7]
     58e:	4798      	blx	r3
     590:	7873      	ldrb	r3, [r6, #1]
		if (err) {
     592:	2800      	cmp	r0, #0
     594:	d00d      	beq.n	5b2 <_usb_d_cb_trans_done+0x5a>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     596:	2205      	movs	r2, #5
     598:	70b2      	strb	r2, [r6, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     59a:	3a03      	subs	r2, #3
     59c:	70f2      	strb	r2, [r6, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     59e:	0018      	movs	r0, r3
     5a0:	2f00      	cmp	r7, #0
     5a2:	db01      	blt.n	5a8 <_usb_d_cb_trans_done+0x50>
     5a4:	2080      	movs	r0, #128	; 0x80
     5a6:	4318      	orrs	r0, r3
     5a8:	2101      	movs	r1, #1
     5aa:	4b27      	ldr	r3, [pc, #156]	; (648 <_usb_d_cb_trans_done+0xf0>)
     5ac:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
     5ae:	b007      	add	sp, #28
     5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     5b2:	2204      	movs	r2, #4
     5b4:	70b2      	strb	r2, [r6, #2]
	struct usb_d_transfer trans
     5b6:	aa03      	add	r2, sp, #12
     5b8:	9003      	str	r0, [sp, #12]
     5ba:	6050      	str	r0, [r2, #4]
     5bc:	2f00      	cmp	r7, #0
     5be:	db08      	blt.n	5d2 <_usb_d_cb_trans_done+0x7a>
     5c0:	2080      	movs	r0, #128	; 0x80
     5c2:	4303      	orrs	r3, r0
     5c4:	7213      	strb	r3, [r2, #8]
     5c6:	2301      	movs	r3, #1
	return _usb_d_dev_ep_trans(&trans);
     5c8:	0010      	movs	r0, r2
	struct usb_d_transfer trans
     5ca:	7253      	strb	r3, [r2, #9]
	return _usb_d_dev_ep_trans(&trans);
     5cc:	4b1f      	ldr	r3, [pc, #124]	; (64c <_usb_d_cb_trans_done+0xf4>)
     5ce:	4798      	blx	r3
     5d0:	e7ed      	b.n	5ae <_usb_d_cb_trans_done+0x56>
	struct usb_d_transfer trans
     5d2:	200f      	movs	r0, #15
     5d4:	4003      	ands	r3, r0
     5d6:	e7f5      	b.n	5c4 <_usb_d_cb_trans_done+0x6c>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     5d8:	18aa      	adds	r2, r5, r2
     5da:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     5dc:	2302      	movs	r3, #2
     5de:	70b3      	strb	r3, [r6, #2]
     5e0:	e7e5      	b.n	5ae <_usb_d_cb_trans_done+0x56>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     5e2:	2301      	movs	r3, #1
     5e4:	70b3      	strb	r3, [r6, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     5e6:	192c      	adds	r4, r5, r4
     5e8:	78e1      	ldrb	r1, [r4, #3]
     5ea:	69e3      	ldr	r3, [r4, #28]
     5ec:	9a01      	ldr	r2, [sp, #4]
     5ee:	9800      	ldr	r0, [sp, #0]
     5f0:	4798      	blx	r3
     5f2:	e7dc      	b.n	5ae <_usb_d_cb_trans_done+0x56>
		ept->xfer.hdr.status = USB_XFER_HALT;
     5f4:	192b      	adds	r3, r5, r4
	} else if (code == USB_TRANS_STALL) {
     5f6:	2f01      	cmp	r7, #1
     5f8:	d10c      	bne.n	614 <_usb_d_cb_trans_done+0xbc>
		ept->xfer.hdr.status = USB_XFER_HALT;
     5fa:	2202      	movs	r2, #2
     5fc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     5fe:	5d29      	ldrb	r1, [r5, r4]
     600:	2900      	cmp	r1, #0
     602:	d104      	bne.n	60e <_usb_d_cb_trans_done+0xb6>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     604:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     606:	9800      	ldr	r0, [sp, #0]
     608:	4b0f      	ldr	r3, [pc, #60]	; (648 <_usb_d_cb_trans_done+0xf0>)
     60a:	4798      	blx	r3
     60c:	e7eb      	b.n	5e6 <_usb_d_cb_trans_done+0x8e>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     60e:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     610:	709a      	strb	r2, [r3, #2]
     612:	e7e8      	b.n	5e6 <_usb_d_cb_trans_done+0x8e>
	} else if (code == USB_TRANS_ABORT) {
     614:	2f02      	cmp	r7, #2
     616:	d108      	bne.n	62a <_usb_d_cb_trans_done+0xd2>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     618:	2204      	movs	r2, #4
     61a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     61c:	5d2a      	ldrb	r2, [r5, r4]
     61e:	2a00      	cmp	r2, #0
     620:	d101      	bne.n	626 <_usb_d_cb_trans_done+0xce>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     622:	709f      	strb	r7, [r3, #2]
			return;
     624:	e7c3      	b.n	5ae <_usb_d_cb_trans_done+0x56>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     626:	2201      	movs	r2, #1
     628:	e7f2      	b.n	610 <_usb_d_cb_trans_done+0xb8>
	} else if (code == USB_TRANS_RESET) {
     62a:	2f03      	cmp	r7, #3
     62c:	d104      	bne.n	638 <_usb_d_cb_trans_done+0xe0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     62e:	2200      	movs	r2, #0
     630:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     632:	3205      	adds	r2, #5
		ept->xfer.hdr.status = USB_XFER_ERROR;
     634:	70da      	strb	r2, [r3, #3]
     636:	e7d6      	b.n	5e6 <_usb_d_cb_trans_done+0x8e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     638:	2206      	movs	r2, #6
     63a:	709a      	strb	r2, [r3, #2]
     63c:	e7fa      	b.n	634 <_usb_d_cb_trans_done+0xdc>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	000004f5 	.word	0x000004f5
     644:	200000ec 	.word	0x200000ec
     648:	00001a8d 	.word	0x00001a8d
     64c:	00001bb5 	.word	0x00001bb5

00000650 <usb_d_cb_trans_setup>:
{
     650:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     652:	4b1c      	ldr	r3, [pc, #112]	; (6c4 <usb_d_cb_trans_setup+0x74>)
{
     654:	b085      	sub	sp, #20
     656:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     658:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
     65a:	4f1b      	ldr	r7, [pc, #108]	; (6c8 <usb_d_cb_trans_setup+0x78>)
     65c:	0143      	lsls	r3, r0, #5
     65e:	9303      	str	r3, [sp, #12]
     660:	330c      	adds	r3, #12
     662:	18fb      	adds	r3, r7, r3
     664:	9301      	str	r3, [sp, #4]
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     666:	0019      	movs	r1, r3
     668:	0020      	movs	r0, r4
     66a:	4b18      	ldr	r3, [pc, #96]	; (6cc <usb_d_cb_trans_setup+0x7c>)
     66c:	4798      	blx	r3
     66e:	2680      	movs	r6, #128	; 0x80
	if (n != 8) {
     670:	b2c0      	uxtb	r0, r0
     672:	4d17      	ldr	r5, [pc, #92]	; (6d0 <usb_d_cb_trans_setup+0x80>)
     674:	4276      	negs	r6, r6
     676:	2808      	cmp	r0, #8
     678:	d008      	beq.n	68c <usb_d_cb_trans_setup+0x3c>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     67a:	2101      	movs	r1, #1
     67c:	0020      	movs	r0, r4
     67e:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     680:	2101      	movs	r1, #1
     682:	4334      	orrs	r4, r6
     684:	b2e0      	uxtb	r0, r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     686:	47a8      	blx	r5
}
     688:	b005      	add	sp, #20
     68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     68c:	2100      	movs	r1, #0
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     68e:	4326      	orrs	r6, r4
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     690:	0020      	movs	r0, r4
     692:	47a8      	blx	r5
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     694:	b2f3      	uxtb	r3, r6
     696:	2100      	movs	r1, #0
     698:	0018      	movs	r0, r3
     69a:	9302      	str	r3, [sp, #8]
     69c:	47a8      	blx	r5
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     69e:	9b03      	ldr	r3, [sp, #12]
	if (!ept->callbacks.req(ep, req)) {
     6a0:	9901      	ldr	r1, [sp, #4]
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     6a2:	18fe      	adds	r6, r7, r3
     6a4:	2701      	movs	r7, #1
	if (!ept->callbacks.req(ep, req)) {
     6a6:	0020      	movs	r0, r4
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     6a8:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
     6aa:	6973      	ldr	r3, [r6, #20]
     6ac:	4798      	blx	r3
     6ae:	2800      	cmp	r0, #0
     6b0:	d1ea      	bne.n	688 <usb_d_cb_trans_setup+0x38>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     6b2:	2305      	movs	r3, #5
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     6b4:	0039      	movs	r1, r7
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     6b6:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     6b8:	0020      	movs	r0, r4
     6ba:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     6bc:	0039      	movs	r1, r7
     6be:	9802      	ldr	r0, [sp, #8]
     6c0:	e7e1      	b.n	686 <usb_d_cb_trans_setup+0x36>
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	000004f5 	.word	0x000004f5
     6c8:	200000ec 	.word	0x200000ec
     6cc:	00001b5d 	.word	0x00001b5d
     6d0:	00001a8d 	.word	0x00001a8d

000006d4 <usb_d_init>:

int32_t usb_d_init(void)
{
     6d4:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     6d6:	4b12      	ldr	r3, [pc, #72]	; (720 <usb_d_init+0x4c>)
     6d8:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     6da:	2800      	cmp	r0, #0
     6dc:	db1f      	blt.n	71e <usb_d_init+0x4a>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     6de:	22d0      	movs	r2, #208	; 0xd0
     6e0:	4c10      	ldr	r4, [pc, #64]	; (724 <usb_d_init+0x50>)
     6e2:	0052      	lsls	r2, r2, #1
     6e4:	0020      	movs	r0, r4
     6e6:	4b10      	ldr	r3, [pc, #64]	; (728 <usb_d_init+0x54>)
     6e8:	2100      	movs	r1, #0
     6ea:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     6ec:	20ff      	movs	r0, #255	; 0xff
     6ee:	1c63      	adds	r3, r4, #1
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     6f0:	4a0e      	ldr	r2, [pc, #56]	; (72c <usb_d_init+0x58>)
     6f2:	34a2      	adds	r4, #162	; 0xa2
     6f4:	34ff      	adds	r4, #255	; 0xff
     6f6:	0019      	movs	r1, r3
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     6f8:	7018      	strb	r0, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     6fa:	3113      	adds	r1, #19
     6fc:	3320      	adds	r3, #32
     6fe:	600a      	str	r2, [r1, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     700:	604a      	str	r2, [r1, #4]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     702:	608a      	str	r2, [r1, #8]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     704:	42a3      	cmp	r3, r4
     706:	d1f6      	bne.n	6f6 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     708:	4c09      	ldr	r4, [pc, #36]	; (730 <usb_d_init+0x5c>)
     70a:	490a      	ldr	r1, [pc, #40]	; (734 <usb_d_init+0x60>)
     70c:	2000      	movs	r0, #0
     70e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     710:	4909      	ldr	r1, [pc, #36]	; (738 <usb_d_init+0x64>)
     712:	2001      	movs	r0, #1
     714:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     716:	2002      	movs	r0, #2
     718:	4908      	ldr	r1, [pc, #32]	; (73c <usb_d_init+0x68>)
     71a:	47a0      	blx	r4
	return ERR_NONE;
     71c:	2000      	movs	r0, #0
}
     71e:	bd10      	pop	{r4, pc}
     720:	000016e1 	.word	0x000016e1
     724:	200000ec 	.word	0x200000ec
     728:	00002bb3 	.word	0x00002bb3
     72c:	00000529 	.word	0x00000529
     730:	00001cf1 	.word	0x00001cf1
     734:	00000651 	.word	0x00000651
     738:	0000052d 	.word	0x0000052d
     73c:	00000559 	.word	0x00000559

00000740 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     740:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <usb_d_register_callback+0x8>)
     744:	4798      	blx	r3
}
     746:	bd10      	pop	{r4, pc}
     748:	00001ccd 	.word	0x00001ccd

0000074c <usb_d_enable>:

int32_t usb_d_enable(void)
{
     74c:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     74e:	4b01      	ldr	r3, [pc, #4]	; (754 <usb_d_enable+0x8>)
     750:	4798      	blx	r3
}
     752:	bd10      	pop	{r4, pc}
     754:	000017a5 	.word	0x000017a5

00000758 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     758:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     75a:	4b01      	ldr	r3, [pc, #4]	; (760 <usb_d_attach+0x8>)
     75c:	4798      	blx	r3
}
     75e:	bd10      	pop	{r4, pc}
     760:	000017ed 	.word	0x000017ed

00000764 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     764:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     766:	4b01      	ldr	r3, [pc, #4]	; (76c <usb_d_set_address+0x8>)
     768:	4798      	blx	r3
}
     76a:	bd10      	pop	{r4, pc}
     76c:	000017fd 	.word	0x000017fd

00000770 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     772:	4c10      	ldr	r4, [pc, #64]	; (7b4 <usb_d_ep_init+0x44>)
{
     774:	0006      	movs	r6, r0
     776:	000d      	movs	r5, r1
     778:	0017      	movs	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     77a:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     77c:	2800      	cmp	r0, #0
     77e:	da13      	bge.n	7a8 <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     780:	20ff      	movs	r0, #255	; 0xff
     782:	47a0      	blx	r4
     784:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     786:	db12      	blt.n	7ae <usb_d_ep_init+0x3e>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     788:	003a      	movs	r2, r7
     78a:	0029      	movs	r1, r5
     78c:	0030      	movs	r0, r6
     78e:	4b0a      	ldr	r3, [pc, #40]	; (7b8 <usb_d_ep_init+0x48>)
     790:	4798      	blx	r3
	if (rc < 0) {
     792:	2800      	cmp	r0, #0
     794:	db07      	blt.n	7a6 <usb_d_ep_init+0x36>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     796:	4b09      	ldr	r3, [pc, #36]	; (7bc <usb_d_ep_init+0x4c>)
     798:	0164      	lsls	r4, r4, #5
     79a:	191a      	adds	r2, r3, r4
     79c:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     79e:	2203      	movs	r2, #3
	return ERR_NONE;
     7a0:	2000      	movs	r0, #0
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     7a2:	4015      	ands	r5, r2
     7a4:	54e5      	strb	r5, [r4, r3]
}
     7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     7a8:	2014      	movs	r0, #20
			return -USB_ERR_ALLOC_FAIL;
     7aa:	4240      	negs	r0, r0
     7ac:	e7fb      	b.n	7a6 <usb_d_ep_init+0x36>
     7ae:	2015      	movs	r0, #21
     7b0:	e7fb      	b.n	7aa <usb_d_ep_init+0x3a>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	000004f5 	.word	0x000004f5
     7b8:	0000180d 	.word	0x0000180d
     7bc:	200000ec 	.word	0x200000ec

000007c0 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     7c0:	2100      	movs	r1, #0
{
     7c2:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     7c4:	b282      	uxth	r2, r0
     7c6:	4b02      	ldr	r3, [pc, #8]	; (7d0 <usb_d_ep0_init+0x10>)
     7c8:	0008      	movs	r0, r1
     7ca:	4798      	blx	r3
}
     7cc:	bd10      	pop	{r4, pc}
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	00000771 	.word	0x00000771

000007d4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     7d6:	4b07      	ldr	r3, [pc, #28]	; (7f4 <usb_d_ep_deinit+0x20>)
{
     7d8:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     7da:	4798      	blx	r3
     7dc:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     7de:	db07      	blt.n	7f0 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     7e0:	4b05      	ldr	r3, [pc, #20]	; (7f8 <usb_d_ep_deinit+0x24>)
     7e2:	0028      	movs	r0, r5
     7e4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     7e6:	4b05      	ldr	r3, [pc, #20]	; (7fc <usb_d_ep_deinit+0x28>)
     7e8:	0164      	lsls	r4, r4, #5
     7ea:	191c      	adds	r4, r3, r4
     7ec:	23ff      	movs	r3, #255	; 0xff
     7ee:	7063      	strb	r3, [r4, #1]
}
     7f0:	bd70      	pop	{r4, r5, r6, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	000004f5 	.word	0x000004f5
     7f8:	000018d5 	.word	0x000018d5
     7fc:	200000ec 	.word	0x200000ec

00000800 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     800:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     802:	4b0c      	ldr	r3, [pc, #48]	; (834 <usb_d_ep_enable+0x34>)
{
     804:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     806:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     808:	2800      	cmp	r0, #0
     80a:	db0f      	blt.n	82c <usb_d_ep_enable+0x2c>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     80c:	4c0a      	ldr	r4, [pc, #40]	; (838 <usb_d_ep_enable+0x38>)
     80e:	0140      	lsls	r0, r0, #5
     810:	5d03      	ldrb	r3, [r0, r4]
     812:	1824      	adds	r4, r4, r0
     814:	425a      	negs	r2, r3
     816:	4153      	adcs	r3, r2
     818:	3301      	adds	r3, #1
     81a:	70a3      	strb	r3, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     81c:	0028      	movs	r0, r5
     81e:	4b07      	ldr	r3, [pc, #28]	; (83c <usb_d_ep_enable+0x3c>)
     820:	4798      	blx	r3
	if (rc < 0) {
     822:	2800      	cmp	r0, #0
     824:	da01      	bge.n	82a <usb_d_ep_enable+0x2a>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     826:	2300      	movs	r3, #0
     828:	70a3      	strb	r3, [r4, #2]
	}
	return rc;
}
     82a:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_PARAM;
     82c:	2012      	movs	r0, #18
     82e:	4240      	negs	r0, r0
     830:	e7fb      	b.n	82a <usb_d_ep_enable+0x2a>
     832:	46c0      	nop			; (mov r8, r8)
     834:	000004f5 	.word	0x000004f5
     838:	200000ec 	.word	0x200000ec
     83c:	00001951 	.word	0x00001951

00000840 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     842:	7a03      	ldrb	r3, [r0, #8]
{
     844:	b08b      	sub	sp, #44	; 0x2c
     846:	0005      	movs	r5, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     848:	9301      	str	r3, [sp, #4]
     84a:	0018      	movs	r0, r3
     84c:	4b35      	ldr	r3, [pc, #212]	; (924 <usb_d_ep_transfer+0xe4>)
     84e:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     850:	7a6b      	ldrb	r3, [r5, #9]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     852:	1e06      	subs	r6, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     854:	9303      	str	r3, [sp, #12]
	uint32_t              len = xfer->size;
     856:	686c      	ldr	r4, [r5, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     858:	db62      	blt.n	920 <usb_d_ep_transfer+0xe0>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     85a:	4b33      	ldr	r3, [pc, #204]	; (928 <usb_d_ep_transfer+0xe8>)
     85c:	a806      	add	r0, sp, #24
     85e:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     860:	0173      	lsls	r3, r6, #5
     862:	9300      	str	r3, [sp, #0]
     864:	9a00      	ldr	r2, [sp, #0]
     866:	4b31      	ldr	r3, [pc, #196]	; (92c <usb_d_ep_transfer+0xec>)
     868:	189e      	adds	r6, r3, r2
     86a:	78b3      	ldrb	r3, [r6, #2]
     86c:	aa04      	add	r2, sp, #16
     86e:	1dd7      	adds	r7, r2, #7
     870:	703b      	strb	r3, [r7, #0]
	if (state == USB_EP_S_IDLE) {
     872:	783b      	ldrb	r3, [r7, #0]
     874:	b2db      	uxtb	r3, r3
     876:	9302      	str	r3, [sp, #8]
     878:	9a02      	ldr	r2, [sp, #8]
     87a:	4b2d      	ldr	r3, [pc, #180]	; (930 <usb_d_ep_transfer+0xf0>)
     87c:	2a01      	cmp	r2, #1
     87e:	d11d      	bne.n	8bc <usb_d_ep_transfer+0x7c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     880:	3202      	adds	r2, #2
     882:	70b2      	strb	r2, [r6, #2]
		atomic_leave_critical(&flags);
     884:	a806      	add	r0, sp, #24
     886:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     888:	4b28      	ldr	r3, [pc, #160]	; (92c <usb_d_ep_transfer+0xec>)
     88a:	9a00      	ldr	r2, [sp, #0]
     88c:	5cd3      	ldrb	r3, [r2, r3]
     88e:	2b00      	cmp	r3, #0
     890:	d025      	beq.n	8de <usb_d_ep_transfer+0x9e>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     892:	9b01      	ldr	r3, [sp, #4]
     894:	09da      	lsrs	r2, r3, #7
     896:	9b03      	ldr	r3, [sp, #12]
     898:	1e59      	subs	r1, r3, #1
     89a:	418b      	sbcs	r3, r1
     89c:	b2db      	uxtb	r3, r3
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     89e:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
     8a0:	682d      	ldr	r5, [r5, #0]
     8a2:	a807      	add	r0, sp, #28
     8a4:	9507      	str	r5, [sp, #28]
     8a6:	6044      	str	r4, [r0, #4]
     8a8:	2a00      	cmp	r2, #0
     8aa:	d036      	beq.n	91a <usb_d_ep_transfer+0xda>
     8ac:	2280      	movs	r2, #128	; 0x80
     8ae:	430a      	orrs	r2, r1
     8b0:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     8b2:	4b20      	ldr	r3, [pc, #128]	; (934 <usb_d_ep_transfer+0xf4>)
	struct usb_d_transfer trans
     8b4:	7202      	strb	r2, [r0, #8]
	return _usb_d_dev_ep_trans(&trans);
     8b6:	4798      	blx	r3
	return rc;
}
     8b8:	b00b      	add	sp, #44	; 0x2c
     8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_leave_critical(&flags);
     8bc:	a806      	add	r0, sp, #24
     8be:	4798      	blx	r3
		switch (state) {
     8c0:	783b      	ldrb	r3, [r7, #0]
			return USB_HALTED;
     8c2:	2002      	movs	r0, #2
		switch (state) {
     8c4:	b2db      	uxtb	r3, r3
     8c6:	2b05      	cmp	r3, #5
     8c8:	d0f6      	beq.n	8b8 <usb_d_ep_transfer+0x78>
     8ca:	2b06      	cmp	r3, #6
     8cc:	d004      	beq.n	8d8 <usb_d_ep_transfer+0x98>
			return USB_BUSY;
     8ce:	2001      	movs	r0, #1
		switch (state) {
     8d0:	2b00      	cmp	r3, #0
     8d2:	d1f1      	bne.n	8b8 <usb_d_ep_transfer+0x78>
			return -USB_ERR_FUNC;
     8d4:	2013      	movs	r0, #19
     8d6:	e000      	b.n	8da <usb_d_ep_transfer+0x9a>
			return -USB_ERROR;
     8d8:	2010      	movs	r0, #16
		return -USB_ERR_PARAM;
     8da:	4240      	negs	r0, r0
     8dc:	e7ec      	b.n	8b8 <usb_d_ep_transfer+0x78>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     8de:	7cf2      	ldrb	r2, [r6, #19]
     8e0:	7cb3      	ldrb	r3, [r6, #18]
     8e2:	0212      	lsls	r2, r2, #8
     8e4:	189b      	adds	r3, r3, r2
     8e6:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     8e8:	2b00      	cmp	r3, #0
     8ea:	d105      	bne.n	8f8 <usb_d_ep_transfer+0xb8>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     8ec:	2204      	movs	r2, #4
			len                 = 0;
     8ee:	001c      	movs	r4, r3
			zlp                 = true;
     8f0:	9b02      	ldr	r3, [sp, #8]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     8f2:	70b2      	strb	r2, [r6, #2]
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     8f4:	001a      	movs	r2, r3
     8f6:	e7d2      	b.n	89e <usb_d_ep_transfer+0x5e>
     8f8:	429c      	cmp	r4, r3
     8fa:	d900      	bls.n	8fe <usb_d_ep_transfer+0xbe>
     8fc:	001c      	movs	r4, r3
     8fe:	490b      	ldr	r1, [pc, #44]	; (92c <usb_d_ep_transfer+0xec>)
     900:	9a00      	ldr	r2, [sp, #0]
     902:	468c      	mov	ip, r1
     904:	4462      	add	r2, ip
			if (dir) {
     906:	7b12      	ldrb	r2, [r2, #12]
     908:	2a7f      	cmp	r2, #127	; 0x7f
     90a:	d904      	bls.n	916 <usb_d_ep_transfer+0xd6>
				zlp = (req_len > len);
     90c:	429c      	cmp	r4, r3
     90e:	419b      	sbcs	r3, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     910:	2201      	movs	r2, #1
				zlp = (req_len > len);
     912:	425b      	negs	r3, r3
     914:	e7c3      	b.n	89e <usb_d_ep_transfer+0x5e>
				zlp = false;
     916:	2300      	movs	r3, #0
     918:	e7ec      	b.n	8f4 <usb_d_ep_transfer+0xb4>
	struct usb_d_transfer trans
     91a:	220f      	movs	r2, #15
     91c:	400a      	ands	r2, r1
     91e:	e7c7      	b.n	8b0 <usb_d_ep_transfer+0x70>
		return -USB_ERR_PARAM;
     920:	2012      	movs	r0, #18
     922:	e7da      	b.n	8da <usb_d_ep_transfer+0x9a>
     924:	000004f5 	.word	0x000004f5
     928:	00000381 	.word	0x00000381
     92c:	200000ec 	.word	0x200000ec
     930:	0000038f 	.word	0x0000038f
     934:	00001bb5 	.word	0x00001bb5

00000938 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93a:	0004      	movs	r4, r0
     93c:	1e0d      	subs	r5, r1, #0
	if (ctrl == USB_EP_HALT_CLR) {
     93e:	d11b      	bne.n	978 <usb_d_ep_halt+0x40>
	int8_t           ep_index = _usb_d_find_ep(ep);
     940:	4b12      	ldr	r3, [pc, #72]	; (98c <usb_d_ep_halt+0x54>)
     942:	4798      	blx	r3
     944:	1e06      	subs	r6, r0, #0
	if (ep_index < 0) {
     946:	db1e      	blt.n	986 <usb_d_ep_halt+0x4e>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     948:	2102      	movs	r1, #2
     94a:	0020      	movs	r0, r4
     94c:	4f10      	ldr	r7, [pc, #64]	; (990 <usb_d_ep_halt+0x58>)
     94e:	47b8      	blx	r7
     950:	2800      	cmp	r0, #0
     952:	d010      	beq.n	976 <usb_d_ep_halt+0x3e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     954:	0029      	movs	r1, r5
     956:	0020      	movs	r0, r4
     958:	47b8      	blx	r7
		if (rc < 0) {
     95a:	2800      	cmp	r0, #0
     95c:	db0b      	blt.n	976 <usb_d_ep_halt+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     95e:	4b0d      	ldr	r3, [pc, #52]	; (994 <usb_d_ep_halt+0x5c>)
     960:	0176      	lsls	r6, r6, #5
     962:	199e      	adds	r6, r3, r6
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     964:	2103      	movs	r1, #3
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     966:	2301      	movs	r3, #1
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     968:	70f1      	strb	r1, [r6, #3]
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     96a:	70b3      	strb	r3, [r6, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     96c:	002a      	movs	r2, r5
     96e:	69f3      	ldr	r3, [r6, #28]
     970:	0020      	movs	r0, r4
     972:	4798      	blx	r3
	return ERR_NONE;
     974:	0028      	movs	r0, r5
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
     976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     978:	4b05      	ldr	r3, [pc, #20]	; (990 <usb_d_ep_halt+0x58>)
	} else if (ctrl == USB_EP_HALT_SET) {
     97a:	2901      	cmp	r1, #1
     97c:	d000      	beq.n	980 <usb_d_ep_halt+0x48>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     97e:	2102      	movs	r1, #2
     980:	0020      	movs	r0, r4
     982:	4798      	blx	r3
     984:	e7f7      	b.n	976 <usb_d_ep_halt+0x3e>
		return -USB_ERR_PARAM;
     986:	2012      	movs	r0, #18
     988:	4240      	negs	r0, r0
     98a:	e7f4      	b.n	976 <usb_d_ep_halt+0x3e>
     98c:	000004f5 	.word	0x000004f5
     990:	00001a8d 	.word	0x00001a8d
     994:	200000ec 	.word	0x200000ec

00000998 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     998:	b570      	push	{r4, r5, r6, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
     99a:	4b0f      	ldr	r3, [pc, #60]	; (9d8 <usb_d_ep_register_callback+0x40>)
{
     99c:	0015      	movs	r5, r2
     99e:	000c      	movs	r4, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     9a0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     9a2:	2d00      	cmp	r5, #0
     9a4:	d100      	bne.n	9a8 <usb_d_ep_register_callback+0x10>
     9a6:	4d0d      	ldr	r5, [pc, #52]	; (9dc <usb_d_ep_register_callback+0x44>)
	if (ep_index < 0) {
     9a8:	2800      	cmp	r0, #0
     9aa:	db05      	blt.n	9b8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     9ac:	2c01      	cmp	r4, #1
     9ae:	d009      	beq.n	9c4 <usb_d_ep_register_callback+0x2c>
     9b0:	2c00      	cmp	r4, #0
     9b2:	d002      	beq.n	9ba <usb_d_ep_register_callback+0x22>
     9b4:	2c02      	cmp	r4, #2
     9b6:	d00a      	beq.n	9ce <usb_d_ep_register_callback+0x36>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     9b8:	bd70      	pop	{r4, r5, r6, pc}
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     9ba:	4b09      	ldr	r3, [pc, #36]	; (9e0 <usb_d_ep_register_callback+0x48>)
     9bc:	0140      	lsls	r0, r0, #5
     9be:	1818      	adds	r0, r3, r0
     9c0:	6145      	str	r5, [r0, #20]
		break;
     9c2:	e7f9      	b.n	9b8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <usb_d_ep_register_callback+0x48>)
     9c6:	0140      	lsls	r0, r0, #5
     9c8:	1818      	adds	r0, r3, r0
     9ca:	6185      	str	r5, [r0, #24]
		break;
     9cc:	e7f4      	b.n	9b8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     9ce:	4b04      	ldr	r3, [pc, #16]	; (9e0 <usb_d_ep_register_callback+0x48>)
     9d0:	0140      	lsls	r0, r0, #5
     9d2:	1818      	adds	r0, r3, r0
     9d4:	61c5      	str	r5, [r0, #28]
		break;
     9d6:	e7ef      	b.n	9b8 <usb_d_ep_register_callback+0x20>
     9d8:	000004f5 	.word	0x000004f5
     9dc:	00000529 	.word	0x00000529
     9e0:	200000ec 	.word	0x200000ec

000009e4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     9e4:	2800      	cmp	r0, #0
     9e6:	d100      	bne.n	9ea <assert+0x6>
		__asm("BKPT #0");
     9e8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     9ea:	4770      	bx	lr

000009ec <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     9ec:	6800      	ldr	r0, [r0, #0]
     9ee:	2800      	cmp	r0, #0
     9f0:	d100      	bne.n	9f4 <is_list_element+0x8>
			return true;
		}
	}

	return false;
}
     9f2:	4770      	bx	lr
		if (it == element) {
     9f4:	4288      	cmp	r0, r1
     9f6:	d1f9      	bne.n	9ec <is_list_element>
			return true;
     9f8:	2001      	movs	r0, #1
     9fa:	e7fa      	b.n	9f2 <is_list_element+0x6>

000009fc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     9fc:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
     9fe:	4b0c      	ldr	r3, [pc, #48]	; (a30 <list_insert_at_end+0x34>)
{
     a00:	0005      	movs	r5, r0
     a02:	000c      	movs	r4, r1
	struct list_element *it = list->head;
     a04:	6806      	ldr	r6, [r0, #0]
	ASSERT(!is_list_element(list, element));
     a06:	4798      	blx	r3
     a08:	0003      	movs	r3, r0
     a0a:	2001      	movs	r0, #1
     a0c:	4058      	eors	r0, r3
     a0e:	b2c0      	uxtb	r0, r0
     a10:	4b08      	ldr	r3, [pc, #32]	; (a34 <list_insert_at_end+0x38>)
     a12:	224f      	movs	r2, #79	; 0x4f
     a14:	4908      	ldr	r1, [pc, #32]	; (a38 <list_insert_at_end+0x3c>)
     a16:	4798      	blx	r3

	if (!list->head) {
     a18:	682b      	ldr	r3, [r5, #0]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d103      	bne.n	a26 <list_insert_at_end+0x2a>
		list->head                             = (struct list_element *)element;
     a1e:	602c      	str	r4, [r5, #0]

	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
     a20:	6023      	str	r3, [r4, #0]
}
     a22:	bd70      	pop	{r4, r5, r6, pc}
     a24:	001e      	movs	r6, r3
	while (it->next) {
     a26:	6833      	ldr	r3, [r6, #0]
     a28:	2b00      	cmp	r3, #0
     a2a:	d1fb      	bne.n	a24 <list_insert_at_end+0x28>
	it->next                               = (struct list_element *)element;
     a2c:	6034      	str	r4, [r6, #0]
     a2e:	e7f7      	b.n	a20 <list_insert_at_end+0x24>
     a30:	000009ed 	.word	0x000009ed
     a34:	000009e5 	.word	0x000009e5
     a38:	00003434 	.word	0x00003434

00000a3c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <_sbrk+0x18>)
{
     a3e:	0002      	movs	r2, r0
	if (heap == NULL) {
     a40:	6819      	ldr	r1, [r3, #0]
     a42:	2900      	cmp	r1, #0
     a44:	d101      	bne.n	a4a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
     a46:	4904      	ldr	r1, [pc, #16]	; (a58 <_sbrk+0x1c>)
     a48:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
     a4a:	6818      	ldr	r0, [r3, #0]

	heap += incr;
     a4c:	1882      	adds	r2, r0, r2
     a4e:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
     a50:	4770      	bx	lr
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	2000028c 	.word	0x2000028c
     a58:	20000ad8 	.word	0x20000ad8

00000a5c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     a5c:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
     a5e:	20c8      	movs	r0, #200	; 0xc8
     a60:	0080      	lsls	r0, r0, #2
     a62:	4358      	muls	r0, r3
{
     a64:	b510      	push	{r4, lr}
		return (ms * (freq / 10000) + 2) / 3 * 10;
     a66:	4b03      	ldr	r3, [pc, #12]	; (a74 <_get_cycles_for_ms+0x18>)
     a68:	3002      	adds	r0, #2
     a6a:	2103      	movs	r1, #3
     a6c:	4798      	blx	r3
     a6e:	230a      	movs	r3, #10
     a70:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     a72:	bd10      	pop	{r4, pc}
     a74:	00002a41 	.word	0x00002a41

00000a78 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     a78:	3901      	subs	r1, #1
     a7a:	d8fd      	bhi.n	a78 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     a7c:	4770      	bx	lr
	...

00000a80 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a80:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <_init_chip+0x1c>)
     a84:	685a      	ldr	r2, [r3, #4]
     a86:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     a88:	4b05      	ldr	r3, [pc, #20]	; (aa0 <_init_chip+0x20>)
     a8a:	4798      	blx	r3
	_sysctrl_init_sources();
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <_init_chip+0x24>)
     a8e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     a90:	4b05      	ldr	r3, [pc, #20]	; (aa8 <_init_chip+0x28>)
     a92:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a94:	203f      	movs	r0, #63	; 0x3f
     a96:	4b05      	ldr	r3, [pc, #20]	; (aac <_init_chip+0x2c>)
     a98:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     a9a:	bd10      	pop	{r4, pc}
     a9c:	41004000 	.word	0x41004000
     aa0:	00000aed 	.word	0x00000aed
     aa4:	0000101d 	.word	0x0000101d
     aa8:	0000105d 	.word	0x0000105d
     aac:	00000ab1 	.word	0x00000ab1

00000ab0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ab0:	07c3      	lsls	r3, r0, #31
     ab2:	d40b      	bmi.n	acc <_gclk_init_generators_by_fref+0x1c>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     ab4:	0783      	lsls	r3, r0, #30
     ab6:	d508      	bpl.n	aca <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     ab8:	2202      	movs	r2, #2
     aba:	4b0a      	ldr	r3, [pc, #40]	; (ae4 <_gclk_init_generators_by_fref+0x34>)
     abc:	32ff      	adds	r2, #255	; 0xff
     abe:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ac0:	4a09      	ldr	r2, [pc, #36]	; (ae8 <_gclk_init_generators_by_fref+0x38>)
     ac2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ac4:	785a      	ldrb	r2, [r3, #1]
     ac6:	09d2      	lsrs	r2, r2, #7
     ac8:	d1fc      	bne.n	ac4 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GEN_5_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_5_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_5_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_5_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_5_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_5_SRC | GCLK_GENCTRL_ID(5));
	}
#endif
}
     aca:	4770      	bx	lr
	((Gclk *)hw)->GENDIV.reg = data;
     acc:	2280      	movs	r2, #128	; 0x80
     ace:	4b05      	ldr	r3, [pc, #20]	; (ae4 <_gclk_init_generators_by_fref+0x34>)
     ad0:	0052      	lsls	r2, r2, #1
     ad2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ad4:	2283      	movs	r2, #131	; 0x83
     ad6:	0252      	lsls	r2, r2, #9
     ad8:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ada:	785a      	ldrb	r2, [r3, #1]
     adc:	09d2      	lsrs	r2, r2, #7
     ade:	d1fc      	bne.n	ada <_gclk_init_generators_by_fref+0x2a>
     ae0:	e7e8      	b.n	ab4 <_gclk_init_generators_by_fref+0x4>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	40000c00 	.word	0x40000c00
     ae8:	00210701 	.word	0x00210701

00000aec <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <_pm_init+0x1c>)
     aee:	7a1a      	ldrb	r2, [r3, #8]
     af0:	b2d2      	uxtb	r2, r2
     af2:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     af4:	7a5a      	ldrb	r2, [r3, #9]
     af6:	b2d2      	uxtb	r2, r2
     af8:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     afa:	7a9a      	ldrb	r2, [r3, #10]
     afc:	b2d2      	uxtb	r2, r2
     afe:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     b00:	7ada      	ldrb	r2, [r3, #11]
     b02:	b2d2      	uxtb	r2, r2
     b04:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     b06:	4770      	bx	lr
     b08:	40000400 	.word	0x40000400

00000b0c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b0c:	69c3      	ldr	r3, [r0, #28]
     b0e:	4219      	tst	r1, r3
     b10:	d1fc      	bne.n	b0c <hri_sercomi2cm_wait_for_sync>
	};
}
     b12:	4770      	bx	lr

00000b14 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     b14:	2202      	movs	r2, #2
{
     b16:	b510      	push	{r4, lr}
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     b18:	6803      	ldr	r3, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     b1a:	2103      	movs	r1, #3
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     b1c:	4393      	bics	r3, r2
     b1e:	6003      	str	r3, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     b20:	4b01      	ldr	r3, [pc, #4]	; (b28 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x14>)
     b22:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
     b24:	bd10      	pop	{r4, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	00000b0d 	.word	0x00000b0d

00000b2c <_get_i2cm_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     b2c:	4b07      	ldr	r3, [pc, #28]	; (b4c <_get_i2cm_index+0x20>)
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     b2e:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     b30:	18c3      	adds	r3, r0, r3
     b32:	0a9b      	lsrs	r3, r3, #10
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
     b34:	b2db      	uxtb	r3, r3
			return i;
     b36:	1e18      	subs	r0, r3, #0
		if (_i2cms[i].number == sercom_offset) {
     b38:	d007      	beq.n	b4a <_get_i2cm_index+0x1e>
		}
	}

	ASSERT(false);
     b3a:	22e6      	movs	r2, #230	; 0xe6
     b3c:	2000      	movs	r0, #0
     b3e:	0092      	lsls	r2, r2, #2
     b40:	4903      	ldr	r1, [pc, #12]	; (b50 <_get_i2cm_index+0x24>)
     b42:	4b04      	ldr	r3, [pc, #16]	; (b54 <_get_i2cm_index+0x28>)
     b44:	4798      	blx	r3
	return -1;
     b46:	2001      	movs	r0, #1
     b48:	4240      	negs	r0, r0
}
     b4a:	bd10      	pop	{r4, pc}
     b4c:	bdfff800 	.word	0xbdfff800
     b50:	0000347d 	.word	0x0000347d
     b54:	000009e5 	.word	0x000009e5

00000b58 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
     b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b5a:	0004      	movs	r4, r0
	int timeout         = 65535;
	int timeout_attempt = 4;

	ASSERT(hw);
     b5c:	1e43      	subs	r3, r0, #1
     b5e:	4198      	sbcs	r0, r3
     b60:	4a14      	ldr	r2, [pc, #80]	; (bb4 <_i2c_m_enable_implementation+0x5c>)
     b62:	b2c0      	uxtb	r0, r0
     b64:	4914      	ldr	r1, [pc, #80]	; (bb8 <_i2c_m_enable_implementation+0x60>)
     b66:	4b15      	ldr	r3, [pc, #84]	; (bbc <_i2c_m_enable_implementation+0x64>)
     b68:	4798      	blx	r3
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     b6a:	2302      	movs	r3, #2
     b6c:	6822      	ldr	r2, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     b6e:	2103      	movs	r1, #3
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     b70:	4313      	orrs	r3, r2
     b72:	6023      	str	r3, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     b74:	0020      	movs	r0, r4
     b76:	4d12      	ldr	r5, [pc, #72]	; (bc0 <_i2c_m_enable_implementation+0x68>)
     b78:	47a8      	blx	r5
     b7a:	2704      	movs	r7, #4
     b7c:	4e11      	ldr	r6, [pc, #68]	; (bc4 <_i2c_m_enable_implementation+0x6c>)
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     b7e:	2104      	movs	r1, #4
     b80:	0020      	movs	r0, r4
     b82:	47a8      	blx	r5

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     b84:	2203      	movs	r2, #3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     b86:	8b63      	ldrh	r3, [r4, #26]
     b88:	091b      	lsrs	r3, r3, #4
     b8a:	4013      	ands	r3, r2
     b8c:	2b01      	cmp	r3, #1
     b8e:	d101      	bne.n	b94 <_i2c_m_enable_implementation+0x3c>
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
		}
	}
	return ERR_NONE;
     b90:	2000      	movs	r0, #0
}
     b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b94:	3e01      	subs	r6, #1
		if (timeout <= 0) {
     b96:	2e00      	cmp	r6, #0
     b98:	d1f1      	bne.n	b7e <_i2c_m_enable_implementation+0x26>
     b9a:	3f01      	subs	r7, #1
			if (--timeout_attempt)
     b9c:	2f00      	cmp	r7, #0
     b9e:	d005      	beq.n	bac <_i2c_m_enable_implementation+0x54>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     ba0:	2310      	movs	r3, #16
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     ba2:	2104      	movs	r1, #4
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     ba4:	8363      	strh	r3, [r4, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     ba6:	0020      	movs	r0, r4
     ba8:	47a8      	blx	r5
     baa:	e7e7      	b.n	b7c <_i2c_m_enable_implementation+0x24>
				return I2C_ERR_BUSY;
     bac:	2006      	movs	r0, #6
     bae:	4240      	negs	r0, r0
     bb0:	e7ef      	b.n	b92 <_i2c_m_enable_implementation+0x3a>
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	000005f4 	.word	0x000005f4
     bb8:	0000347d 	.word	0x0000347d
     bbc:	000009e5 	.word	0x000009e5
     bc0:	00000b0d 	.word	0x00000b0d
     bc4:	0000ffff 	.word	0x0000ffff

00000bc8 <_sercom_i2c_send_stop>:
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     bc8:	23c0      	movs	r3, #192	; 0xc0
{
     bca:	b510      	push	{r4, lr}
     bcc:	6842      	ldr	r2, [r0, #4]
     bce:	029b      	lsls	r3, r3, #10
     bd0:	4313      	orrs	r3, r2
     bd2:	6043      	str	r3, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     bd4:	2104      	movs	r1, #4
     bd6:	4b01      	ldr	r3, [pc, #4]	; (bdc <_sercom_i2c_send_stop+0x14>)
     bd8:	4798      	blx	r3
}
     bda:	bd10      	pop	{r4, pc}
     bdc:	00000b0d 	.word	0x00000b0d

00000be0 <_sercom_i2c_sync_analyse_flags>:
{
     be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     be2:	0005      	movs	r5, r0
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     be4:	6803      	ldr	r3, [r0, #0]
     be6:	9100      	str	r1, [sp, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     be8:	4f5b      	ldr	r7, [pc, #364]	; (d58 <_sercom_i2c_sync_analyse_flags+0x178>)
     bea:	2104      	movs	r1, #4
     bec:	0014      	movs	r4, r2
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     bee:	9301      	str	r3, [sp, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     bf0:	47b8      	blx	r7
	if (flags & MB_FLAG) {
     bf2:	2101      	movs	r1, #1
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     bf4:	8b6b      	ldrh	r3, [r5, #26]
     bf6:	9e00      	ldr	r6, [sp, #0]
     bf8:	b29b      	uxth	r3, r3
     bfa:	400e      	ands	r6, r1
     bfc:	2202      	movs	r2, #2
     bfe:	2e00      	cmp	r6, #0
     c00:	d100      	bne.n	c04 <_sercom_i2c_sync_analyse_flags+0x24>
     c02:	e066      	b.n	cd2 <_sercom_i2c_sync_analyse_flags+0xf2>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     c04:	4213      	tst	r3, r2
     c06:	d00f      	beq.n	c28 <_sercom_i2c_sync_analyse_flags+0x48>
			msg->flags |= I2C_M_FAIL;
     c08:	2280      	movs	r2, #128	; 0x80
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     c0a:	400b      	ands	r3, r1
			return I2C_ERR_BAD_ADDRESS;
     c0c:	425e      	negs	r6, r3
     c0e:	415e      	adcs	r6, r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     c10:	7629      	strb	r1, [r5, #24]
			msg->flags |= I2C_M_FAIL;
     c12:	8860      	ldrh	r0, [r4, #2]
     c14:	0152      	lsls	r2, r2, #5
     c16:	4302      	orrs	r2, r0
     c18:	8062      	strh	r2, [r4, #2]
			msg->flags &= ~I2C_M_BUSY;
     c1a:	8862      	ldrh	r2, [r4, #2]
     c1c:	484f      	ldr	r0, [pc, #316]	; (d5c <_sercom_i2c_sync_analyse_flags+0x17c>)
			return I2C_ERR_BAD_ADDRESS;
     c1e:	3e05      	subs	r6, #5
			msg->flags &= ~I2C_M_BUSY;
     c20:	4002      	ands	r2, r0
     c22:	8062      	strh	r2, [r4, #2]
}
     c24:	0030      	movs	r0, r6
     c26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     c28:	2604      	movs	r6, #4
     c2a:	401e      	ands	r6, r3
     c2c:	d015      	beq.n	c5a <_sercom_i2c_sync_analyse_flags+0x7a>
				if (msg->len > 0) {
     c2e:	6863      	ldr	r3, [r4, #4]
     c30:	2b00      	cmp	r3, #0
     c32:	dd04      	ble.n	c3e <_sercom_i2c_sync_analyse_flags+0x5e>
					msg->flags |= I2C_M_FAIL;
     c34:	2380      	movs	r3, #128	; 0x80
     c36:	8862      	ldrh	r2, [r4, #2]
     c38:	015b      	lsls	r3, r3, #5
     c3a:	4313      	orrs	r3, r2
     c3c:	8063      	strh	r3, [r4, #2]
				if (msg->flags & I2C_M_STOP) {
     c3e:	8863      	ldrh	r3, [r4, #2]
     c40:	b21b      	sxth	r3, r3
     c42:	2b00      	cmp	r3, #0
     c44:	da02      	bge.n	c4c <_sercom_i2c_sync_analyse_flags+0x6c>
					_sercom_i2c_send_stop(hw);
     c46:	0028      	movs	r0, r5
     c48:	4b45      	ldr	r3, [pc, #276]	; (d60 <_sercom_i2c_sync_analyse_flags+0x180>)
     c4a:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
     c4c:	8863      	ldrh	r3, [r4, #2]
     c4e:	4a43      	ldr	r2, [pc, #268]	; (d5c <_sercom_i2c_sync_analyse_flags+0x17c>)
     c50:	4013      	ands	r3, r2
     c52:	8063      	strh	r3, [r4, #2]
			return I2C_NACK;
     c54:	2602      	movs	r6, #2
     c56:	4276      	negs	r6, r6
     c58:	e7e4      	b.n	c24 <_sercom_i2c_sync_analyse_flags+0x44>
			if (msg->flags & I2C_M_TEN) {
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	8862      	ldrh	r2, [r4, #2]
     c5e:	00db      	lsls	r3, r3, #3
     c60:	401a      	ands	r2, r3
     c62:	9200      	str	r2, [sp, #0]
     c64:	d018      	beq.n	c98 <_sercom_i2c_sync_analyse_flags+0xb8>
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c66:	2206      	movs	r2, #6
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     c68:	8823      	ldrh	r3, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     c6a:	2104      	movs	r1, #4
     c6c:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c6e:	4013      	ands	r3, r2
     c70:	0028      	movs	r0, r5
     c72:	9300      	str	r3, [sp, #0]
     c74:	47b8      	blx	r7
     c76:	2280      	movs	r2, #128	; 0x80
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c7a:	01d2      	lsls	r2, r2, #7
     c7c:	401a      	ands	r2, r3
				hri_sercomi2cm_write_ADDR_reg(hw,
     c7e:	23f1      	movs	r3, #241	; 0xf1
     c80:	4313      	orrs	r3, r2
     c82:	9a00      	ldr	r2, [sp, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     c84:	2104      	movs	r1, #4
     c86:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c88:	626b      	str	r3, [r5, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     c8a:	0028      	movs	r0, r5
     c8c:	47b8      	blx	r7
				msg->flags &= ~I2C_M_TEN;
     c8e:	8863      	ldrh	r3, [r4, #2]
     c90:	4a34      	ldr	r2, [pc, #208]	; (d64 <_sercom_i2c_sync_analyse_flags+0x184>)
				msg->flags &= ~I2C_M_BUSY;
     c92:	4013      	ands	r3, r2
     c94:	8063      	strh	r3, [r4, #2]
     c96:	e7c5      	b.n	c24 <_sercom_i2c_sync_analyse_flags+0x44>
			if (msg->len == 0) {
     c98:	6866      	ldr	r6, [r4, #4]
     c9a:	2e00      	cmp	r6, #0
     c9c:	d109      	bne.n	cb2 <_sercom_i2c_sync_analyse_flags+0xd2>
				if (msg->flags & I2C_M_STOP) {
     c9e:	8863      	ldrh	r3, [r4, #2]
     ca0:	b21b      	sxth	r3, r3
     ca2:	2b00      	cmp	r3, #0
     ca4:	da02      	bge.n	cac <_sercom_i2c_sync_analyse_flags+0xcc>
					_sercom_i2c_send_stop(hw);
     ca6:	0028      	movs	r0, r5
     ca8:	4b2d      	ldr	r3, [pc, #180]	; (d60 <_sercom_i2c_sync_analyse_flags+0x180>)
     caa:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
     cac:	8863      	ldrh	r3, [r4, #2]
     cae:	4a2b      	ldr	r2, [pc, #172]	; (d5c <_sercom_i2c_sync_analyse_flags+0x17c>)
     cb0:	e7ef      	b.n	c92 <_sercom_i2c_sync_analyse_flags+0xb2>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     cb2:	68a3      	ldr	r3, [r4, #8]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     cb4:	2104      	movs	r1, #4
     cb6:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     cb8:	002b      	movs	r3, r5
     cba:	3328      	adds	r3, #40	; 0x28
     cbc:	701a      	strb	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     cbe:	0028      	movs	r0, r5
     cc0:	47b8      	blx	r7
				msg->buffer++;
     cc2:	68a3      	ldr	r3, [r4, #8]
     cc4:	3301      	adds	r3, #1
     cc6:	60a3      	str	r3, [r4, #8]
				msg->len--;
     cc8:	6863      	ldr	r3, [r4, #4]
     cca:	3b01      	subs	r3, #1
     ccc:	6063      	str	r3, [r4, #4]
	return I2C_OK;
     cce:	2600      	movs	r6, #0
     cd0:	e7a8      	b.n	c24 <_sercom_i2c_sync_analyse_flags+0x44>
	} else if (flags & SB_FLAG) {
     cd2:	9800      	ldr	r0, [sp, #0]
     cd4:	4210      	tst	r0, r2
     cd6:	d0a5      	beq.n	c24 <_sercom_i2c_sync_analyse_flags+0x44>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     cd8:	6862      	ldr	r2, [r4, #4]
     cda:	2a00      	cmp	r2, #0
     cdc:	d038      	beq.n	d50 <_sercom_i2c_sync_analyse_flags+0x170>
     cde:	075b      	lsls	r3, r3, #29
     ce0:	d436      	bmi.n	d50 <_sercom_i2c_sync_analyse_flags+0x170>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     ce2:	9b01      	ldr	r3, [sp, #4]
			msg->len--;
     ce4:	3a01      	subs	r2, #1
     ce6:	0ede      	lsrs	r6, r3, #27
     ce8:	400e      	ands	r6, r1
     cea:	6062      	str	r2, [r4, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     cec:	2a00      	cmp	r2, #0
     cee:	d10a      	bne.n	d06 <_sercom_i2c_sync_analyse_flags+0x126>
     cf0:	2e00      	cmp	r6, #0
     cf2:	d10c      	bne.n	d0e <_sercom_i2c_sync_analyse_flags+0x12e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cf4:	2380      	movs	r3, #128	; 0x80
     cf6:	686a      	ldr	r2, [r5, #4]
     cf8:	02db      	lsls	r3, r3, #11
     cfa:	4313      	orrs	r3, r2
     cfc:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     cfe:	2104      	movs	r1, #4
     d00:	0028      	movs	r0, r5
     d02:	47b8      	blx	r7
     d04:	e003      	b.n	d0e <_sercom_i2c_sync_analyse_flags+0x12e>
     d06:	2a01      	cmp	r2, #1
     d08:	d101      	bne.n	d0e <_sercom_i2c_sync_analyse_flags+0x12e>
     d0a:	2e00      	cmp	r6, #0
     d0c:	d1f2      	bne.n	cf4 <_sercom_i2c_sync_analyse_flags+0x114>
			if (msg->len == 0) {
     d0e:	6863      	ldr	r3, [r4, #4]
     d10:	2b00      	cmp	r3, #0
     d12:	d110      	bne.n	d36 <_sercom_i2c_sync_analyse_flags+0x156>
				if (msg->flags & I2C_M_STOP) {
     d14:	8863      	ldrh	r3, [r4, #2]
     d16:	4e11      	ldr	r6, [pc, #68]	; (d5c <_sercom_i2c_sync_analyse_flags+0x17c>)
     d18:	b21b      	sxth	r3, r3
     d1a:	2b00      	cmp	r3, #0
     d1c:	da08      	bge.n	d30 <_sercom_i2c_sync_analyse_flags+0x150>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     d1e:	686b      	ldr	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     d20:	0028      	movs	r0, r5
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     d22:	4033      	ands	r3, r6
     d24:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     d26:	2104      	movs	r1, #4
     d28:	47b8      	blx	r7
					_sercom_i2c_send_stop(hw);
     d2a:	0028      	movs	r0, r5
     d2c:	4b0c      	ldr	r3, [pc, #48]	; (d60 <_sercom_i2c_sync_analyse_flags+0x180>)
     d2e:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
     d30:	8863      	ldrh	r3, [r4, #2]
     d32:	4033      	ands	r3, r6
     d34:	8063      	strh	r3, [r4, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     d36:	68a6      	ldr	r6, [r4, #8]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     d38:	2104      	movs	r1, #4
     d3a:	1c73      	adds	r3, r6, #1
     d3c:	60a3      	str	r3, [r4, #8]
     d3e:	0028      	movs	r0, r5
     d40:	47b8      	blx	r7
	return ((Sercom *)hw)->I2CM.DATA.reg;
     d42:	002b      	movs	r3, r5
     d44:	3328      	adds	r3, #40	; 0x28
     d46:	781b      	ldrb	r3, [r3, #0]
     d48:	7033      	strb	r3, [r6, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     d4a:	2302      	movs	r3, #2
     d4c:	762b      	strb	r3, [r5, #24]
     d4e:	e7be      	b.n	cce <_sercom_i2c_sync_analyse_flags+0xee>
     d50:	2302      	movs	r3, #2
     d52:	762b      	strb	r3, [r5, #24]
     d54:	e77e      	b.n	c54 <_sercom_i2c_sync_analyse_flags+0x74>
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	00000b0d 	.word	0x00000b0d
     d5c:	fffffeff 	.word	0xfffffeff
     d60:	00000bc9 	.word	0x00000bc9
     d64:	fffffbff 	.word	0xfffffbff

00000d68 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     d6a:	000c      	movs	r4, r1
     d6c:	9000      	str	r0, [sp, #0]
	uint8_t i = _get_i2cm_index(hw);
     d6e:	4b26      	ldr	r3, [pc, #152]	; (e08 <_i2c_m_sync_init_impl+0xa0>)
     d70:	0008      	movs	r0, r1
     d72:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     d74:	69e3      	ldr	r3, [r4, #28]
     d76:	b2c7      	uxtb	r7, r0
     d78:	4e24      	ldr	r6, [pc, #144]	; (e0c <_i2c_m_sync_init_impl+0xa4>)

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     d7a:	07db      	lsls	r3, r3, #31
     d7c:	d41b      	bmi.n	db6 <_i2c_m_sync_init_impl+0x4e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     d7e:	2318      	movs	r3, #24
     d80:	437b      	muls	r3, r7
     d82:	4a23      	ldr	r2, [pc, #140]	; (e10 <_i2c_m_sync_init_impl+0xa8>)
	tmp &= mask;
     d84:	2502      	movs	r5, #2
     d86:	18d3      	adds	r3, r2, r3
     d88:	685a      	ldr	r2, [r3, #4]
     d8a:	231c      	movs	r3, #28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     d8c:	2103      	movs	r1, #3
     d8e:	401a      	ands	r2, r3
     d90:	0020      	movs	r0, r4
     d92:	9201      	str	r2, [sp, #4]
     d94:	47b0      	blx	r6
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     d96:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     d98:	422b      	tst	r3, r5
     d9a:	d005      	beq.n	da8 <_i2c_m_sync_init_impl+0x40>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
     d9c:	0020      	movs	r0, r4
     d9e:	4b1d      	ldr	r3, [pc, #116]	; (e14 <_i2c_m_sync_init_impl+0xac>)
     da0:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
     da2:	0029      	movs	r1, r5
     da4:	0020      	movs	r0, r4
     da6:	47b0      	blx	r6
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     da8:	2301      	movs	r3, #1
     daa:	9a01      	ldr	r2, [sp, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     dac:	2103      	movs	r1, #3
     dae:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     db0:	6023      	str	r3, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     db2:	0020      	movs	r0, r4
     db4:	47b0      	blx	r6
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     db6:	2518      	movs	r5, #24
     db8:	437d      	muls	r5, r7
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
     dba:	0020      	movs	r0, r4
     dbc:	2101      	movs	r1, #1
     dbe:	47b0      	blx	r6
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     dc0:	4b13      	ldr	r3, [pc, #76]	; (e10 <_i2c_m_sync_init_impl+0xa8>)
     dc2:	0020      	movs	r0, r4
     dc4:	195d      	adds	r5, r3, r5
     dc6:	686f      	ldr	r7, [r5, #4]
     dc8:	2103      	movs	r1, #3
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     dca:	6027      	str	r7, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
     dcc:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     dce:	68ab      	ldr	r3, [r5, #8]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     dd0:	0020      	movs	r0, r4
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     dd2:	6063      	str	r3, [r4, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     dd4:	2104      	movs	r1, #4
     dd6:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     dd8:	68eb      	ldr	r3, [r5, #12]
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     dda:	01bf      	lsls	r7, r7, #6
     ddc:	60e3      	str	r3, [r4, #12]
     dde:	9b00      	ldr	r3, [sp, #0]
     de0:	0fb9      	lsrs	r1, r7, #30
     de2:	8199      	strh	r1, [r3, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     de4:	6a67      	ldr	r7, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     de6:	4a0c      	ldr	r2, [pc, #48]	; (e18 <_i2c_m_sync_init_impl+0xb0>)
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     de8:	0020      	movs	r0, r4
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     dea:	403a      	ands	r2, r7
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     dec:	2701      	movs	r7, #1
     dee:	428f      	cmp	r7, r1
     df0:	41bf      	sbcs	r7, r7
     df2:	427f      	negs	r7, r7
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     df4:	03bf      	lsls	r7, r7, #14
     df6:	4317      	orrs	r7, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     df8:	6267      	str	r7, [r4, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     dfa:	2104      	movs	r1, #4
     dfc:	47b0      	blx	r6

	service->trise = _i2cms[i].trise;
     dfe:	8a6b      	ldrh	r3, [r5, #18]
     e00:	9a00      	ldr	r2, [sp, #0]

	return ERR_NONE;
}
     e02:	2000      	movs	r0, #0
	service->trise = _i2cms[i].trise;
     e04:	81d3      	strh	r3, [r2, #14]
}
     e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     e08:	00000b2d 	.word	0x00000b2d
     e0c:	00000b0d 	.word	0x00000b0d
     e10:	00003454 	.word	0x00003454
     e14:	00000b15 	.word	0x00000b15
     e18:	ffffbfff 	.word	0xffffbfff

00000e1c <_i2c_m_sync_init>:
{
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     e20:	1e43      	subs	r3, r0, #1
     e22:	4198      	sbcs	r0, r3
{
     e24:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     e26:	4a05      	ldr	r2, [pc, #20]	; (e3c <_i2c_m_sync_init+0x20>)
     e28:	b2c0      	uxtb	r0, r0
     e2a:	4905      	ldr	r1, [pc, #20]	; (e40 <_i2c_m_sync_init+0x24>)
     e2c:	4b05      	ldr	r3, [pc, #20]	; (e44 <_i2c_m_sync_init+0x28>)
     e2e:	4798      	blx	r3
	i2c_dev->hw = hw;
     e30:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     e32:	0029      	movs	r1, r5
     e34:	0020      	movs	r0, r4
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <_i2c_m_sync_init+0x2c>)
     e38:	4798      	blx	r3
}
     e3a:	bd70      	pop	{r4, r5, r6, pc}
     e3c:	00000507 	.word	0x00000507
     e40:	0000347d 	.word	0x0000347d
     e44:	000009e5 	.word	0x000009e5
     e48:	00000d69 	.word	0x00000d69

00000e4c <_i2c_m_sync_enable>:
{
     e4c:	b510      	push	{r4, lr}
     e4e:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     e50:	1e43      	subs	r3, r0, #1
     e52:	4198      	sbcs	r0, r3
     e54:	4a04      	ldr	r2, [pc, #16]	; (e68 <_i2c_m_sync_enable+0x1c>)
     e56:	4905      	ldr	r1, [pc, #20]	; (e6c <_i2c_m_sync_enable+0x20>)
     e58:	b2c0      	uxtb	r0, r0
     e5a:	4b05      	ldr	r3, [pc, #20]	; (e70 <_i2c_m_sync_enable+0x24>)
     e5c:	4798      	blx	r3
	return _i2c_m_enable_implementation(i2c_dev->hw);
     e5e:	6920      	ldr	r0, [r4, #16]
     e60:	4b04      	ldr	r3, [pc, #16]	; (e74 <_i2c_m_sync_enable+0x28>)
     e62:	4798      	blx	r3
}
     e64:	bd10      	pop	{r4, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	00000524 	.word	0x00000524
     e6c:	0000347d 	.word	0x0000347d
     e70:	000009e5 	.word	0x000009e5
     e74:	00000b59 	.word	0x00000b59

00000e78 <_i2c_m_sync_transfer>:
{
     e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     e7a:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     e7c:	4f5c      	ldr	r7, [pc, #368]	; (ff0 <_i2c_m_sync_transfer+0x178>)
     e7e:	4b5d      	ldr	r3, [pc, #372]	; (ff4 <_i2c_m_sync_transfer+0x17c>)
{
     e80:	9100      	str	r1, [sp, #0]
	void *   hw = i2c_dev->hw;
     e82:	6906      	ldr	r6, [r0, #16]
	ASSERT(i2c_dev);
     e84:	4a5c      	ldr	r2, [pc, #368]	; (ff8 <_i2c_m_sync_transfer+0x180>)
     e86:	0039      	movs	r1, r7
     e88:	2001      	movs	r0, #1
     e8a:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
     e8c:	6920      	ldr	r0, [r4, #16]
     e8e:	22b8      	movs	r2, #184	; 0xb8
     e90:	1e43      	subs	r3, r0, #1
     e92:	4198      	sbcs	r0, r3
     e94:	00d2      	lsls	r2, r2, #3
     e96:	4b57      	ldr	r3, [pc, #348]	; (ff4 <_i2c_m_sync_transfer+0x17c>)
     e98:	b2c0      	uxtb	r0, r0
     e9a:	0039      	movs	r1, r7
     e9c:	4798      	blx	r3
	ASSERT(msg);
     e9e:	9800      	ldr	r0, [sp, #0]
     ea0:	4a56      	ldr	r2, [pc, #344]	; (ffc <_i2c_m_sync_transfer+0x184>)
     ea2:	1e43      	subs	r3, r0, #1
     ea4:	4198      	sbcs	r0, r3
     ea6:	0039      	movs	r1, r7
     ea8:	4b52      	ldr	r3, [pc, #328]	; (ff4 <_i2c_m_sync_transfer+0x17c>)
     eaa:	b2c0      	uxtb	r0, r0
     eac:	4798      	blx	r3
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     eae:	2380      	movs	r3, #128	; 0x80
     eb0:	8862      	ldrh	r2, [r4, #2]
     eb2:	005b      	lsls	r3, r3, #1
     eb4:	469c      	mov	ip, r3
     eb6:	421a      	tst	r2, r3
     eb8:	d000      	beq.n	ebc <_i2c_m_sync_transfer+0x44>
     eba:	e087      	b.n	fcc <_i2c_m_sync_transfer+0x154>
	msg->flags |= I2C_M_BUSY;
     ebc:	9a00      	ldr	r2, [sp, #0]
     ebe:	9900      	ldr	r1, [sp, #0]
     ec0:	8852      	ldrh	r2, [r2, #2]
     ec2:	431a      	orrs	r2, r3
     ec4:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
     ec6:	0022      	movs	r2, r4
     ec8:	c929      	ldmia	r1!, {r0, r3, r5}
     eca:	c229      	stmia	r2!, {r0, r3, r5}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     ecc:	4663      	mov	r3, ip
     ece:	6872      	ldr	r2, [r6, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     ed0:	2104      	movs	r1, #4
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     ed2:	4313      	orrs	r3, r2
     ed4:	6073      	str	r3, [r6, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     ed6:	0030      	movs	r0, r6
     ed8:	4b49      	ldr	r3, [pc, #292]	; (1000 <_i2c_m_sync_transfer+0x188>)
     eda:	4798      	blx	r3
	void *             hw    = i2c_dev->hw;
     edc:	6925      	ldr	r5, [r4, #16]
	ASSERT(i2c_dev);
     ede:	4a49      	ldr	r2, [pc, #292]	; (1004 <_i2c_m_sync_transfer+0x18c>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     ee0:	682b      	ldr	r3, [r5, #0]
     ee2:	0039      	movs	r1, r7
     ee4:	9301      	str	r3, [sp, #4]
     ee6:	2001      	movs	r0, #1
     ee8:	4b42      	ldr	r3, [pc, #264]	; (ff4 <_i2c_m_sync_transfer+0x17c>)
     eea:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     eec:	6862      	ldr	r2, [r4, #4]
     eee:	2a01      	cmp	r2, #1
     ef0:	d140      	bne.n	f74 <_i2c_m_sync_transfer+0xfc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	0edb      	lsrs	r3, r3, #27
     ef6:	4213      	tst	r3, r2
     ef8:	d03c      	beq.n	f74 <_i2c_m_sync_transfer+0xfc>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     efa:	2380      	movs	r3, #128	; 0x80
     efc:	686a      	ldr	r2, [r5, #4]
     efe:	02db      	lsls	r3, r3, #11
     f00:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     f02:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     f04:	2104      	movs	r1, #4
     f06:	4b3e      	ldr	r3, [pc, #248]	; (1000 <_i2c_m_sync_transfer+0x188>)
     f08:	0028      	movs	r0, r5
     f0a:	4798      	blx	r3
	if (msg->addr & I2C_M_TEN) {
     f0c:	2380      	movs	r3, #128	; 0x80
     f0e:	8822      	ldrh	r2, [r4, #0]
     f10:	00db      	lsls	r3, r3, #3
     f12:	0057      	lsls	r7, r2, #1
     f14:	421a      	tst	r2, r3
     f16:	d031      	beq.n	f7c <_i2c_m_sync_transfer+0x104>
		if (msg->flags & I2C_M_RD) {
     f18:	8862      	ldrh	r2, [r4, #2]
     f1a:	07d2      	lsls	r2, r2, #31
     f1c:	d502      	bpl.n	f24 <_i2c_m_sync_transfer+0xac>
			msg->flags |= I2C_M_TEN;
     f1e:	8862      	ldrh	r2, [r4, #2]
     f20:	4313      	orrs	r3, r2
     f22:	8063      	strh	r3, [r4, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     f24:	4b36      	ldr	r3, [pc, #216]	; (1000 <_i2c_m_sync_transfer+0x188>)
     f26:	2104      	movs	r1, #4
     f28:	0028      	movs	r0, r5
     f2a:	4798      	blx	r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     f2c:	4a36      	ldr	r2, [pc, #216]	; (1008 <_i2c_m_sync_transfer+0x190>)
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f30:	4017      	ands	r7, r2
     f32:	2280      	movs	r2, #128	; 0x80
     f34:	01d2      	lsls	r2, r2, #7
     f36:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	021b      	lsls	r3, r3, #8
     f3c:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     f3e:	431f      	orrs	r7, r3
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     f40:	0028      	movs	r0, r5
     f42:	4b2f      	ldr	r3, [pc, #188]	; (1000 <_i2c_m_sync_transfer+0x188>)
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     f44:	626f      	str	r7, [r5, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     f46:	2104      	movs	r1, #4
     f48:	4798      	blx	r3
	void *   hw      = i2c_dev->hw;
     f4a:	2380      	movs	r3, #128	; 0x80
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     f4c:	2203      	movs	r2, #3
	void *   hw      = i2c_dev->hw;
     f4e:	6920      	ldr	r0, [r4, #16]
     f50:	025b      	lsls	r3, r3, #9
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     f52:	7e01      	ldrb	r1, [r0, #24]
     f54:	3b01      	subs	r3, #1
     f56:	b2c9      	uxtb	r1, r1
		if (timeout-- == 0) {
     f58:	2b00      	cmp	r3, #0
     f5a:	d121      	bne.n	fa0 <_i2c_m_sync_transfer+0x128>
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
     f5c:	0028      	movs	r0, r5
     f5e:	0022      	movs	r2, r4
     f60:	4d2a      	ldr	r5, [pc, #168]	; (100c <_i2c_m_sync_transfer+0x194>)
     f62:	47a8      	blx	r5
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     f64:	2703      	movs	r7, #3
	if (ret) {
     f66:	2800      	cmp	r0, #0
     f68:	d01d      	beq.n	fa6 <_i2c_m_sync_transfer+0x12e>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     f6a:	8863      	ldrh	r3, [r4, #2]
     f6c:	4a28      	ldr	r2, [pc, #160]	; (1010 <_i2c_m_sync_transfer+0x198>)
     f6e:	4013      	ands	r3, r2
     f70:	8063      	strh	r3, [r4, #2]
}
     f72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     f74:	686b      	ldr	r3, [r5, #4]
     f76:	4a27      	ldr	r2, [pc, #156]	; (1014 <_i2c_m_sync_transfer+0x19c>)
     f78:	4013      	ands	r3, r2
     f7a:	e7c2      	b.n	f02 <_i2c_m_sync_transfer+0x8a>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     f7c:	8863      	ldrh	r3, [r4, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
     f7e:	2104      	movs	r1, #4
     f80:	b29b      	uxth	r3, r3
     f82:	9301      	str	r3, [sp, #4]
     f84:	0028      	movs	r0, r5
     f86:	4b1e      	ldr	r3, [pc, #120]	; (1000 <_i2c_m_sync_transfer+0x188>)
     f88:	4798      	blx	r3
     f8a:	22ff      	movs	r2, #255	; 0xff
     f8c:	9901      	ldr	r1, [sp, #4]
     f8e:	4017      	ands	r7, r2
     f90:	3afe      	subs	r2, #254	; 0xfe
     f92:	400a      	ands	r2, r1
     f94:	4317      	orrs	r7, r2
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     f96:	2280      	movs	r2, #128	; 0x80
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     f98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f9a:	01d2      	lsls	r2, r2, #7
     f9c:	4013      	ands	r3, r2
     f9e:	e7ce      	b.n	f3e <_i2c_m_sync_transfer+0xc6>
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     fa0:	4211      	tst	r1, r2
     fa2:	d0d6      	beq.n	f52 <_i2c_m_sync_transfer+0xda>
     fa4:	e7da      	b.n	f5c <_i2c_m_sync_transfer+0xe4>
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     fa6:	2280      	movs	r2, #128	; 0x80
     fa8:	8863      	ldrh	r3, [r4, #2]
     faa:	0052      	lsls	r2, r2, #1
     fac:	4213      	tst	r3, r2
     fae:	d0e0      	beq.n	f72 <_i2c_m_sync_transfer+0xfa>
	void *   hw      = i2c_dev->hw;
     fb0:	2380      	movs	r3, #128	; 0x80
     fb2:	6922      	ldr	r2, [r4, #16]
     fb4:	025b      	lsls	r3, r3, #9
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     fb6:	7e11      	ldrb	r1, [r2, #24]
     fb8:	3b01      	subs	r3, #1
     fba:	b2c9      	uxtb	r1, r1
		if (timeout-- == 0) {
     fbc:	2b00      	cmp	r3, #0
     fbe:	d007      	beq.n	fd0 <_i2c_m_sync_transfer+0x158>
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     fc0:	4239      	tst	r1, r7
     fc2:	d0f8      	beq.n	fb6 <_i2c_m_sync_transfer+0x13e>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
     fc4:	0022      	movs	r2, r4
     fc6:	0030      	movs	r0, r6
     fc8:	47a8      	blx	r5
     fca:	e7ec      	b.n	fa6 <_i2c_m_sync_transfer+0x12e>
		return I2C_ERR_BUSY;
     fcc:	2006      	movs	r0, #6
     fce:	e00c      	b.n	fea <_i2c_m_sync_transfer+0x172>
			if (msg->flags & I2C_M_STOP) {
     fd0:	9b00      	ldr	r3, [sp, #0]
     fd2:	885b      	ldrh	r3, [r3, #2]
     fd4:	b21b      	sxth	r3, r3
     fd6:	2b00      	cmp	r3, #0
     fd8:	da02      	bge.n	fe0 <_i2c_m_sync_transfer+0x168>
				_sercom_i2c_send_stop(hw);
     fda:	0030      	movs	r0, r6
     fdc:	4b0e      	ldr	r3, [pc, #56]	; (1018 <_i2c_m_sync_transfer+0x1a0>)
     fde:	4798      	blx	r3
			return I2C_ERR_BUS;
     fe0:	2005      	movs	r0, #5
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     fe2:	8863      	ldrh	r3, [r4, #2]
     fe4:	4a0a      	ldr	r2, [pc, #40]	; (1010 <_i2c_m_sync_transfer+0x198>)
     fe6:	4013      	ands	r3, r2
     fe8:	8063      	strh	r3, [r4, #2]
		return I2C_ERR_BUSY;
     fea:	4240      	negs	r0, r0
     fec:	e7c1      	b.n	f72 <_i2c_m_sync_transfer+0xfa>
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	0000347d 	.word	0x0000347d
     ff4:	000009e5 	.word	0x000009e5
     ff8:	000005bf 	.word	0x000005bf
     ffc:	000005c1 	.word	0x000005c1
    1000:	00000b0d 	.word	0x00000b0d
    1004:	00000594 	.word	0x00000594
    1008:	000007fe 	.word	0x000007fe
    100c:	00000be1 	.word	0x00000be1
    1010:	fffffeff 	.word	0xfffffeff
    1014:	fffbffff 	.word	0xfffbffff
    1018:	00000bc9 	.word	0x00000bc9

0000101c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    101c:	4b0d      	ldr	r3, [pc, #52]	; (1054 <_sysctrl_init_sources+0x38>)
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    101e:	480e      	ldr	r0, [pc, #56]	; (1058 <_sysctrl_init_sources+0x3c>)
    1020:	6a19      	ldr	r1, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1022:	6a1a      	ldr	r2, [r3, #32]
    1024:	4001      	ands	r1, r0
	hri_sysctrl_write_OSC8M_reg(hw,
    1026:	2002      	movs	r0, #2
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1028:	0f92      	lsrs	r2, r2, #30
    102a:	0792      	lsls	r2, r2, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    102c:	4302      	orrs	r2, r0
    102e:	430a      	orrs	r2, r1
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1030:	211f      	movs	r1, #31
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1032:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1034:	699a      	ldr	r2, [r3, #24]
    1036:	4310      	orrs	r0, r2
    1038:	6198      	str	r0, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    103a:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    103c:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    103e:	771a      	strb	r2, [r3, #28]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1040:	2208      	movs	r2, #8
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1042:	68d9      	ldr	r1, [r3, #12]
    1044:	4211      	tst	r1, r2
    1046:	d0fc      	beq.n	1042 <_sysctrl_init_sources+0x26>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1048:	2280      	movs	r2, #128	; 0x80
    104a:	6a19      	ldr	r1, [r3, #32]
    104c:	430a      	orrs	r2, r1
    104e:	621a      	str	r2, [r3, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1050:	4770      	bx	lr
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	40000800 	.word	0x40000800
    1058:	0fff0000 	.word	0x0fff0000

0000105c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    105c:	2202      	movs	r2, #2
    105e:	4b18      	ldr	r3, [pc, #96]	; (10c0 <_sysctrl_init_referenced_generators+0x64>)
    1060:	849a      	strh	r2, [r3, #36]	; 0x24
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1062:	320e      	adds	r2, #14
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1064:	68d9      	ldr	r1, [r3, #12]
    1066:	4211      	tst	r1, r2
    1068:	d0fc      	beq.n	1064 <_sysctrl_init_referenced_generators+0x8>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    106a:	4a16      	ldr	r2, [pc, #88]	; (10c4 <_sysctrl_init_referenced_generators+0x68>)
    106c:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    106e:	4a16      	ldr	r2, [pc, #88]	; (10c8 <_sysctrl_init_referenced_generators+0x6c>)
    1070:	6812      	ldr	r2, [r2, #0]
    1072:	0e92      	lsrs	r2, r2, #26
    1074:	2a3f      	cmp	r2, #63	; 0x3f
    1076:	d00f      	beq.n	1098 <_sysctrl_init_referenced_generators+0x3c>
    1078:	2180      	movs	r1, #128	; 0x80
    107a:	0292      	lsls	r2, r2, #10
    107c:	0089      	lsls	r1, r1, #2
    107e:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1080:	629a      	str	r2, [r3, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1082:	2293      	movs	r2, #147	; 0x93
    1084:	0052      	lsls	r2, r2, #1
    1086:	849a      	strh	r2, [r3, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1088:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    108a:	0752      	lsls	r2, r2, #29
    108c:	d407      	bmi.n	109e <_sysctrl_init_referenced_generators+0x42>
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    108e:	2210      	movs	r2, #16
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1090:	68d9      	ldr	r1, [r3, #12]
    1092:	4211      	tst	r1, r2
    1094:	d0fc      	beq.n	1090 <_sysctrl_init_referenced_generators+0x34>
    1096:	e006      	b.n	10a6 <_sysctrl_init_referenced_generators+0x4a>
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1098:	22fc      	movs	r2, #252	; 0xfc
    109a:	01d2      	lsls	r2, r2, #7
    109c:	e7f0      	b.n	1080 <_sysctrl_init_referenced_generators+0x24>
	tmp &= mask;
    109e:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    10a0:	68d9      	ldr	r1, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    10a2:	4211      	tst	r1, r2
    10a4:	d0fc      	beq.n	10a0 <_sysctrl_init_referenced_generators+0x44>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    10a6:	2280      	movs	r2, #128	; 0x80
    10a8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    10aa:	430a      	orrs	r2, r1
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    10ac:	4907      	ldr	r1, [pc, #28]	; (10cc <_sysctrl_init_referenced_generators+0x70>)
    10ae:	849a      	strh	r2, [r3, #36]	; 0x24
    10b0:	784a      	ldrb	r2, [r1, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    10b2:	09d2      	lsrs	r2, r2, #7
    10b4:	d1fc      	bne.n	10b0 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    10b6:	2102      	movs	r1, #2
    10b8:	699a      	ldr	r2, [r3, #24]
    10ba:	438a      	bics	r2, r1
    10bc:	619a      	str	r2, [r3, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    10be:	4770      	bx	lr
    10c0:	40000800 	.word	0x40000800
    10c4:	0401bb80 	.word	0x0401bb80
    10c8:	00806024 	.word	0x00806024
    10cc:	40000c00 	.word	0x40000c00

000010d0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    10d0:	2000      	movs	r0, #0
    10d2:	4770      	bx	lr

000010d4 <_usb_d_dev_wait_dfll_rdy>:
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)
	/* In USB recovery mode the status is not checked */
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    10d4:	4b07      	ldr	r3, [pc, #28]	; (10f4 <_usb_d_dev_wait_dfll_rdy+0x20>)
    10d6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    10d8:	0692      	lsls	r2, r2, #26
    10da:	d405      	bmi.n	10e8 <_usb_d_dev_wait_dfll_rdy+0x14>
	tmp &= mask;
    10dc:	21d0      	movs	r1, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    10de:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    10e0:	400a      	ands	r2, r1
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    10e2:	2ad0      	cmp	r2, #208	; 0xd0
    10e4:	d1fb      	bne.n	10de <_usb_d_dev_wait_dfll_rdy+0xa>
			;
	} else {
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
			;
	}
}
    10e6:	4770      	bx	lr
    10e8:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    10ea:	68d9      	ldr	r1, [r3, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    10ec:	4211      	tst	r1, r2
    10ee:	d0fc      	beq.n	10ea <_usb_d_dev_wait_dfll_rdy+0x16>
    10f0:	e7f9      	b.n	10e6 <_usb_d_dev_wait_dfll_rdy+0x12>
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	40000800 	.word	0x40000800

000010f8 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    10f8:	2800      	cmp	r0, #0
    10fa:	d003      	beq.n	1104 <_usb_d_dev_ept+0xc>
    10fc:	2900      	cmp	r1, #0
    10fe:	d001      	beq.n	1104 <_usb_d_dev_ept+0xc>
    1100:	3002      	adds	r0, #2
    1102:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    1104:	2314      	movs	r3, #20
    1106:	3001      	adds	r0, #1
    1108:	4343      	muls	r3, r0
    110a:	4801      	ldr	r0, [pc, #4]	; (1110 <_usb_d_dev_ept+0x18>)
    110c:	18c0      	adds	r0, r0, r3
}
    110e:	4770      	bx	lr
    1110:	20000290 	.word	0x20000290

00001114 <_usb_d_dev_handle_setup>:
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1114:	230f      	movs	r3, #15
{
    1116:	b570      	push	{r4, r5, r6, lr}
    1118:	0001      	movs	r1, r0
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    111a:	7c80      	ldrb	r0, [r0, #18]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);

	if (!is_ctrl) {
    111c:	2507      	movs	r5, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    111e:	4003      	ands	r3, r0
    1120:	001a      	movs	r2, r3
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1122:	7ccc      	ldrb	r4, [r1, #19]
    1124:	3208      	adds	r2, #8
	if (!is_ctrl) {
    1126:	4025      	ands	r5, r4
    1128:	015b      	lsls	r3, r3, #5
    112a:	2d01      	cmp	r5, #1
    112c:	d008      	beq.n	1140 <_usb_d_dev_handle_setup+0x2c>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    112e:	4914      	ldr	r1, [pc, #80]	; (1180 <_usb_d_dev_handle_setup+0x6c>)
    1130:	0152      	lsls	r2, r2, #5
    1132:	1852      	adds	r2, r2, r1
    1134:	2110      	movs	r1, #16
    1136:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    1138:	4a12      	ldr	r2, [pc, #72]	; (1184 <_usb_d_dev_handle_setup+0x70>)
    113a:	189b      	adds	r3, r3, r2
    113c:	7259      	strb	r1, [r3, #9]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    113e:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    1140:	2540      	movs	r5, #64	; 0x40
    1142:	422c      	tst	r4, r5
    1144:	d006      	beq.n	1154 <_usb_d_dev_handle_setup+0x40>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1146:	2680      	movs	r6, #128	; 0x80
		ept->flags.bits.is_busy = 0;
    1148:	43ac      	bics	r4, r5
    114a:	74cc      	strb	r4, [r1, #19]
    114c:	4c0d      	ldr	r4, [pc, #52]	; (1184 <_usb_d_dev_handle_setup+0x70>)
    114e:	191c      	adds	r4, r3, r4
    1150:	7166      	strb	r6, [r4, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1152:	71a5      	strb	r5, [r4, #6]
	ept->flags.bits.is_stalled = 0;
    1154:	2508      	movs	r5, #8
    1156:	7ccc      	ldrb	r4, [r1, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1158:	0152      	lsls	r2, r2, #5
    115a:	43ac      	bics	r4, r5
    115c:	74cc      	strb	r4, [r1, #19]
	bank->STATUS_BK.reg     = 0;
    115e:	2400      	movs	r4, #0
    1160:	4909      	ldr	r1, [pc, #36]	; (1188 <_usb_d_dev_handle_setup+0x74>)
    1162:	3130      	adds	r1, #48	; 0x30
    1164:	18c9      	adds	r1, r1, r3
    1166:	728c      	strb	r4, [r1, #10]
    1168:	768c      	strb	r4, [r1, #26]
    116a:	4905      	ldr	r1, [pc, #20]	; (1180 <_usb_d_dev_handle_setup+0x6c>)
    116c:	1852      	adds	r2, r2, r1
    116e:	216f      	movs	r1, #111	; 0x6f
    1170:	71d1      	strb	r1, [r2, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1172:	4a04      	ldr	r2, [pc, #16]	; (1184 <_usb_d_dev_handle_setup+0x70>)
    1174:	189b      	adds	r3, r3, r2
    1176:	7259      	strb	r1, [r3, #9]
	dev_inst.ep_callbacks.setup(ept->ep);
    1178:	4b04      	ldr	r3, [pc, #16]	; (118c <_usb_d_dev_handle_setup+0x78>)
    117a:	689b      	ldr	r3, [r3, #8]
    117c:	4798      	blx	r3
    117e:	e7de      	b.n	113e <_usb_d_dev_handle_setup+0x2a>
    1180:	41005000 	.word	0x41005000
    1184:	410050ff 	.word	0x410050ff
    1188:	20000490 	.word	0x20000490
    118c:	20000290 	.word	0x20000290

00001190 <_usb_d_dev_handle_stall>:
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    1190:	2220      	movs	r2, #32
    1192:	230f      	movs	r3, #15
    1194:	408a      	lsls	r2, r1
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    1196:	b510      	push	{r4, lr}
    1198:	0004      	movs	r4, r0
	uint8_t epn = USB_EP_GET_N(ept->ep);
    119a:	7c80      	ldrb	r0, [r0, #18]
    119c:	4905      	ldr	r1, [pc, #20]	; (11b4 <_usb_d_dev_handle_stall+0x24>)
    119e:	4003      	ands	r3, r0
    11a0:	015b      	lsls	r3, r3, #5
    11a2:	185b      	adds	r3, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    11a4:	b2d2      	uxtb	r2, r2
    11a6:	725a      	strb	r2, [r3, #9]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <_usb_d_dev_handle_stall+0x28>)
    11aa:	68a2      	ldr	r2, [r4, #8]
    11ac:	691b      	ldr	r3, [r3, #16]
    11ae:	2101      	movs	r1, #1
    11b0:	4798      	blx	r3
}
    11b2:	bd10      	pop	{r4, pc}
    11b4:	410050ff 	.word	0x410050ff
    11b8:	20000290 	.word	0x20000290

000011bc <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    11bc:	b510      	push	{r4, lr}
    11be:	0003      	movs	r3, r0
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    11c0:	7c80      	ldrb	r0, [r0, #18]
    11c2:	28ff      	cmp	r0, #255	; 0xff
    11c4:	d009      	beq.n	11da <_usb_d_dev_trans_done+0x1e>
    11c6:	2440      	movs	r4, #64	; 0x40
    11c8:	7cda      	ldrb	r2, [r3, #19]
    11ca:	4222      	tst	r2, r4
    11cc:	d005      	beq.n	11da <_usb_d_dev_trans_done+0x1e>
		return;
	}
	ept->flags.bits.is_busy = 0;
    11ce:	43a2      	bics	r2, r4
    11d0:	74da      	strb	r2, [r3, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    11d2:	4a02      	ldr	r2, [pc, #8]	; (11dc <_usb_d_dev_trans_done+0x20>)
    11d4:	6914      	ldr	r4, [r2, #16]
    11d6:	689a      	ldr	r2, [r3, #8]
    11d8:	47a0      	blx	r4
}
    11da:	bd10      	pop	{r4, pc}
    11dc:	20000290 	.word	0x20000290

000011e0 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    11e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t epn = USB_EP_GET_N(ept->ep);
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    11e2:	2425      	movs	r4, #37	; 0x25
    11e4:	ad01      	add	r5, sp, #4
	uint8_t epn = USB_EP_GET_N(ept->ep);
    11e6:	7c83      	ldrb	r3, [r0, #18]
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    11e8:	702c      	strb	r4, [r5, #0]
    11ea:	1924      	adds	r4, r4, r4
{
    11ec:	4694      	mov	ip, r2
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    11ee:	706c      	strb	r4, [r5, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    11f0:	2bff      	cmp	r3, #255	; 0xff
    11f2:	d01a      	beq.n	122a <_usb_d_dev_trans_stop+0x4a>
    11f4:	2740      	movs	r7, #64	; 0x40
    11f6:	7cc4      	ldrb	r4, [r0, #19]
    11f8:	423c      	tst	r4, r7
    11fa:	d016      	beq.n	122a <_usb_d_dev_trans_stop+0x4a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    11fc:	240f      	movs	r4, #15
    11fe:	4023      	ands	r3, r4
    1200:	001c      	movs	r4, r3
    1202:	3408      	adds	r4, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1204:	0166      	lsls	r6, r4, #5
		return;
	}
	/* Stop transfer */
	if (dir) {
    1206:	2900      	cmp	r1, #0
    1208:	d010      	beq.n	122c <_usb_d_dev_trans_stop+0x4c>
    120a:	4f0a      	ldr	r7, [pc, #40]	; (1234 <_usb_d_dev_trans_stop+0x54>)
    120c:	19f6      	adds	r6, r6, r7
    120e:	2780      	movs	r7, #128	; 0x80
    1210:	7137      	strb	r7, [r6, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1212:	4a08      	ldr	r2, [pc, #32]	; (1234 <_usb_d_dev_trans_stop+0x54>)
    1214:	0164      	lsls	r4, r4, #5
    1216:	18a4      	adds	r4, r4, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1218:	4a07      	ldr	r2, [pc, #28]	; (1238 <_usb_d_dev_trans_stop+0x58>)
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    121a:	5c69      	ldrb	r1, [r5, r1]
    121c:	015b      	lsls	r3, r3, #5
    121e:	189b      	adds	r3, r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1220:	71e1      	strb	r1, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1222:	7259      	strb	r1, [r3, #9]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    1224:	4661      	mov	r1, ip
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <_usb_d_dev_trans_stop+0x5c>)
    1228:	4798      	blx	r3
}
    122a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    122c:	4a01      	ldr	r2, [pc, #4]	; (1234 <_usb_d_dev_trans_stop+0x54>)
    122e:	18b6      	adds	r6, r6, r2
    1230:	7177      	strb	r7, [r6, #5]
    1232:	e7ee      	b.n	1212 <_usb_d_dev_trans_stop+0x32>
    1234:	41005000 	.word	0x41005000
    1238:	410050ff 	.word	0x410050ff
    123c:	000011bd 	.word	0x000011bd

00001240 <_usb_d_dev_handle_trfail>:
{
    1240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1242:	220f      	movs	r2, #15
    1244:	7c84      	ldrb	r4, [r0, #18]
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    1246:	af01      	add	r7, sp, #4
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    1248:	4014      	ands	r4, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    124a:	3a0b      	subs	r2, #11
    124c:	703a      	strb	r2, [r7, #0]
    124e:	3204      	adds	r2, #4
    1250:	707a      	strb	r2, [r7, #1]
    1252:	0022      	movs	r2, r4
    1254:	3208      	adds	r2, #8
{
    1256:	000b      	movs	r3, r1
    1258:	4d2d      	ldr	r5, [pc, #180]	; (1310 <_usb_d_dev_handle_trfail+0xd0>)
    125a:	0161      	lsls	r1, r4, #5

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    125c:	0156      	lsls	r6, r2, #5
	uint8_t            eptype
    125e:	2b00      	cmp	r3, #0
    1260:	d024      	beq.n	12ac <_usb_d_dev_handle_trfail+0x6c>
    1262:	5dad      	ldrb	r5, [r5, r6]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1264:	066d      	lsls	r5, r5, #25
    1266:	0f6d      	lsrs	r5, r5, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1268:	4e2a      	ldr	r6, [pc, #168]	; (1314 <_usb_d_dev_handle_trfail+0xd4>)
    126a:	3630      	adds	r6, #48	; 0x30
    126c:	46b4      	mov	ip, r6
    126e:	011e      	lsls	r6, r3, #4
    1270:	1876      	adds	r6, r6, r1
    1272:	44b4      	add	ip, r6
    1274:	4666      	mov	r6, ip
    1276:	7ab6      	ldrb	r6, [r6, #10]
    1278:	b2f6      	uxtb	r6, r6
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    127a:	2d02      	cmp	r5, #2
    127c:	d11a      	bne.n	12b4 <_usb_d_dev_handle_trfail+0x74>
    127e:	3d01      	subs	r5, #1
    1280:	422e      	tst	r6, r5
    1282:	d017      	beq.n	12b4 <_usb_d_dev_handle_trfail+0x74>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1284:	4664      	mov	r4, ip
    1286:	7aa4      	ldrb	r4, [r4, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1288:	0152      	lsls	r2, r2, #5
    128a:	43ac      	bics	r4, r5
    128c:	4665      	mov	r5, ip
    128e:	72ac      	strb	r4, [r5, #10]
    1290:	4d1f      	ldr	r5, [pc, #124]	; (1310 <_usb_d_dev_handle_trfail+0xd0>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1292:	5cfc      	ldrb	r4, [r7, r3]
    1294:	1952      	adds	r2, r2, r5
    1296:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1298:	4a1f      	ldr	r2, [pc, #124]	; (1318 <_usb_d_dev_handle_trfail+0xd8>)
    129a:	1889      	adds	r1, r1, r2
    129c:	724c      	strb	r4, [r1, #9]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    129e:	1e59      	subs	r1, r3, #1
    12a0:	418b      	sbcs	r3, r1
    12a2:	2204      	movs	r2, #4
    12a4:	b2d9      	uxtb	r1, r3
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    12a6:	4b1d      	ldr	r3, [pc, #116]	; (131c <_usb_d_dev_handle_trfail+0xdc>)
    12a8:	4798      	blx	r3
}
    12aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    12ac:	5dae      	ldrb	r6, [r5, r6]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    12ae:	2507      	movs	r5, #7
    12b0:	4035      	ands	r5, r6
    12b2:	e7d9      	b.n	1268 <_usb_d_dev_handle_trfail+0x28>
	} else if (st.bit.ERRORFLOW) {
    12b4:	2502      	movs	r5, #2
    12b6:	402e      	ands	r6, r5
    12b8:	d019      	beq.n	12ee <_usb_d_dev_handle_trfail+0xae>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    12ba:	4666      	mov	r6, ip
    12bc:	7ab6      	ldrb	r6, [r6, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    12be:	7cc4      	ldrb	r4, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    12c0:	43ae      	bics	r6, r5
    12c2:	4665      	mov	r5, ip
    12c4:	72ae      	strb	r6, [r5, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12c6:	4e12      	ldr	r6, [pc, #72]	; (1310 <_usb_d_dev_handle_trfail+0xd0>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    12c8:	5cfd      	ldrb	r5, [r7, r3]
    12ca:	0152      	lsls	r2, r2, #5
    12cc:	1992      	adds	r2, r2, r6
    12ce:	71d5      	strb	r5, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12d0:	4a11      	ldr	r2, [pc, #68]	; (1318 <_usb_d_dev_handle_trfail+0xd8>)
    12d2:	1889      	adds	r1, r1, r2
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    12d4:	2207      	movs	r2, #7
    12d6:	724d      	strb	r5, [r1, #9]
    12d8:	4022      	ands	r2, r4
    12da:	2a01      	cmp	r2, #1
    12dc:	d1e5      	bne.n	12aa <_usb_d_dev_handle_trfail+0x6a>
    12de:	0662      	lsls	r2, r4, #25
    12e0:	d5e3      	bpl.n	12aa <_usb_d_dev_handle_trfail+0x6a>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    12e2:	7cc1      	ldrb	r1, [r0, #19]
    12e4:	09c9      	lsrs	r1, r1, #7
    12e6:	428b      	cmp	r3, r1
    12e8:	d0df      	beq.n	12aa <_usb_d_dev_handle_trfail+0x6a>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    12ea:	2200      	movs	r2, #0
    12ec:	e7db      	b.n	12a6 <_usb_d_dev_handle_trfail+0x66>
	bank->STATUS_BK.reg     = 0;
    12ee:	0060      	lsls	r0, r4, #1
    12f0:	4a08      	ldr	r2, [pc, #32]	; (1314 <_usb_d_dev_handle_trfail+0xd4>)
    12f2:	18c0      	adds	r0, r0, r3
    12f4:	3230      	adds	r2, #48	; 0x30
    12f6:	0100      	lsls	r0, r0, #4
    12f8:	1812      	adds	r2, r2, r0
    12fa:	7296      	strb	r6, [r2, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12fc:	4a08      	ldr	r2, [pc, #32]	; (1320 <_usb_d_dev_handle_trfail+0xe0>)
    12fe:	0164      	lsls	r4, r4, #5
    1300:	18a4      	adds	r4, r4, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1302:	4a05      	ldr	r2, [pc, #20]	; (1318 <_usb_d_dev_handle_trfail+0xd8>)
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1304:	5cfb      	ldrb	r3, [r7, r3]
    1306:	1889      	adds	r1, r1, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1308:	71e3      	strb	r3, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    130a:	724b      	strb	r3, [r1, #9]
}
    130c:	e7cd      	b.n	12aa <_usb_d_dev_handle_trfail+0x6a>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	41005000 	.word	0x41005000
    1314:	20000490 	.word	0x20000490
    1318:	410050ff 	.word	0x410050ff
    131c:	000011e1 	.word	0x000011e1
    1320:	41005100 	.word	0x41005100

00001324 <_usb_d_dev_reset_epts>:
{
    1324:	b570      	push	{r4, r5, r6, lr}
    1326:	4d0b      	ldr	r5, [pc, #44]	; (1354 <_usb_d_dev_reset_epts+0x30>)
    1328:	238c      	movs	r3, #140	; 0x8c
    132a:	002c      	movs	r4, r5
		dev_inst.ep[i].ep       = 0xFF;
    132c:	26ff      	movs	r6, #255	; 0xff
    132e:	009b      	lsls	r3, r3, #2
    1330:	3414      	adds	r4, #20
    1332:	18ed      	adds	r5, r5, r3
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1334:	2103      	movs	r1, #3
    1336:	0020      	movs	r0, r4
    1338:	4b07      	ldr	r3, [pc, #28]	; (1358 <_usb_d_dev_reset_epts+0x34>)
    133a:	4798      	blx	r3
		dev_inst.ep[i].flags.u8 = 0;
    133c:	2100      	movs	r1, #0
		dev_inst.ep[i].ep       = 0xFF;
    133e:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1340:	74e1      	strb	r1, [r4, #19]
    1342:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1344:	42ac      	cmp	r4, r5
    1346:	d1f5      	bne.n	1334 <_usb_d_dev_reset_epts+0x10>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1348:	4804      	ldr	r0, [pc, #16]	; (135c <_usb_d_dev_reset_epts+0x38>)
    134a:	2260      	movs	r2, #96	; 0x60
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <_usb_d_dev_reset_epts+0x3c>)
    134e:	3030      	adds	r0, #48	; 0x30
    1350:	4798      	blx	r3
}
    1352:	bd70      	pop	{r4, r5, r6, pc}
    1354:	20000290 	.word	0x20000290
    1358:	000011bd 	.word	0x000011bd
    135c:	20000490 	.word	0x20000490
    1360:	00002bb3 	.word	0x00002bb3

00001364 <_usb_d_dev_in_next>:
{
    1364:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1366:	250f      	movs	r5, #15
{
    1368:	b085      	sub	sp, #20
    136a:	9100      	str	r1, [sp, #0]
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    136c:	7c83      	ldrb	r3, [r0, #18]
{
    136e:	0004      	movs	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    1370:	401d      	ands	r5, r3
    1372:	9301      	str	r3, [sp, #4]
    1374:	016b      	lsls	r3, r5, #5
    1376:	9302      	str	r3, [sp, #8]
    1378:	2300      	movs	r3, #0
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    137a:	4299      	cmp	r1, r3
    137c:	d006      	beq.n	138c <_usb_d_dev_in_next+0x28>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    137e:	4b4d      	ldr	r3, [pc, #308]	; (14b4 <_usb_d_dev_in_next+0x150>)
    1380:	016a      	lsls	r2, r5, #5
    1382:	3330      	adds	r3, #48	; 0x30
    1384:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1386:	695b      	ldr	r3, [r3, #20]
    1388:	049b      	lsls	r3, r3, #18
    138a:	0c9b      	lsrs	r3, r3, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    138c:	8a26      	ldrh	r6, [r4, #16]
    138e:	4a4a      	ldr	r2, [pc, #296]	; (14b8 <_usb_d_dev_in_next+0x154>)
    1390:	9603      	str	r6, [sp, #12]
    1392:	4296      	cmp	r6, r2
    1394:	d002      	beq.n	139c <_usb_d_dev_in_next+0x38>
    1396:	1e72      	subs	r2, r6, #1
    1398:	b292      	uxth	r2, r2
    139a:	9203      	str	r2, [sp, #12]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    139c:	7ce2      	ldrb	r2, [r4, #19]
    139e:	4694      	mov	ip, r2
    13a0:	2207      	movs	r2, #7
    13a2:	4661      	mov	r1, ip
    13a4:	4011      	ands	r1, r2
	if (isr) {
    13a6:	9a00      	ldr	r2, [sp, #0]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    13a8:	9102      	str	r1, [sp, #8]
	if (isr) {
    13aa:	2a00      	cmp	r2, #0
    13ac:	d004      	beq.n	13b8 <_usb_d_dev_in_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    13ae:	4943      	ldr	r1, [pc, #268]	; (14bc <_usb_d_dev_in_next+0x158>)
    13b0:	016a      	lsls	r2, r5, #5
    13b2:	1852      	adds	r2, r2, r1
    13b4:	2102      	movs	r1, #2
    13b6:	71d1      	strb	r1, [r2, #7]
	ept->trans_count += trans_count;
    13b8:	68a2      	ldr	r2, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    13ba:	6867      	ldr	r7, [r4, #4]
	ept->trans_count += trans_count;
    13bc:	1899      	adds	r1, r3, r2
    13be:	60a1      	str	r1, [r4, #8]
    13c0:	016a      	lsls	r2, r5, #5
	if (ept->trans_count < ept->trans_size) {
    13c2:	42b9      	cmp	r1, r7
    13c4:	d240      	bcs.n	1448 <_usb_d_dev_in_next+0xe4>
		if (ept->flags.bits.use_cache) {
    13c6:	4660      	mov	r0, ip
		trans_next = ept->trans_size - ept->trans_count;
    13c8:	1a7f      	subs	r7, r7, r1
    13ca:	b2bb      	uxth	r3, r7
    13cc:	4f39      	ldr	r7, [pc, #228]	; (14b4 <_usb_d_dev_in_next+0x150>)
		if (ept->flags.bits.use_cache) {
    13ce:	0680      	lsls	r0, r0, #26
    13d0:	d52e      	bpl.n	1430 <_usb_d_dev_in_next+0xcc>
    13d2:	1c32      	adds	r2, r6, #0
    13d4:	429e      	cmp	r6, r3
    13d6:	d900      	bls.n	13da <_usb_d_dev_in_next+0x76>
    13d8:	1c1a      	adds	r2, r3, #0
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    13da:	6823      	ldr	r3, [r4, #0]
    13dc:	b296      	uxth	r6, r2
    13de:	1859      	adds	r1, r3, r1
    13e0:	0032      	movs	r2, r6
    13e2:	4b37      	ldr	r3, [pc, #220]	; (14c0 <_usb_d_dev_in_next+0x15c>)
    13e4:	68e0      	ldr	r0, [r4, #12]
    13e6:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    13e8:	4b32      	ldr	r3, [pc, #200]	; (14b4 <_usb_d_dev_in_next+0x150>)
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    13ea:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    13ec:	0169      	lsls	r1, r5, #5
    13ee:	185b      	adds	r3, r3, r1
    13f0:	641a      	str	r2, [r3, #64]	; 0x40
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    13f2:	016b      	lsls	r3, r5, #5
    13f4:	18ff      	adds	r7, r7, r3
    13f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13f8:	04b6      	lsls	r6, r6, #18
    13fa:	0cb2      	lsrs	r2, r6, #18
    13fc:	0b9e      	lsrs	r6, r3, #14
    13fe:	03b6      	lsls	r6, r6, #14
    1400:	4316      	orrs	r6, r2
    1402:	647e      	str	r6, [r7, #68]	; 0x44
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1406:	4a2f      	ldr	r2, [pc, #188]	; (14c4 <_usb_d_dev_in_next+0x160>)
    1408:	4013      	ands	r3, r2
    140a:	647b      	str	r3, [r7, #68]	; 0x44
	if (!isr) {
    140c:	9b00      	ldr	r3, [sp, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d108      	bne.n	1424 <_usb_d_dev_in_next+0xc0>
		if (is_ctrl) {
    1412:	9b02      	ldr	r3, [sp, #8]
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1414:	224e      	movs	r2, #78	; 0x4e
		if (is_ctrl) {
    1416:	2b01      	cmp	r3, #1
    1418:	d000      	beq.n	141c <_usb_d_dev_in_next+0xb8>
			inten = USB_D_BANK1_INT_FLAGS;
    141a:	3a04      	subs	r2, #4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    141c:	492a      	ldr	r1, [pc, #168]	; (14c8 <_usb_d_dev_in_next+0x164>)
    141e:	016b      	lsls	r3, r5, #5
    1420:	185b      	adds	r3, r3, r1
    1422:	729a      	strb	r2, [r3, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1424:	4b25      	ldr	r3, [pc, #148]	; (14bc <_usb_d_dev_in_next+0x158>)
    1426:	016d      	lsls	r5, r5, #5
    1428:	18ed      	adds	r5, r5, r3
    142a:	2380      	movs	r3, #128	; 0x80
    142c:	716b      	strb	r3, [r5, #5]
    142e:	e03a      	b.n	14a6 <_usb_d_dev_in_next+0x142>
    1430:	2080      	movs	r0, #128	; 0x80
    1432:	1c1e      	adds	r6, r3, #0
    1434:	0180      	lsls	r0, r0, #6
    1436:	4283      	cmp	r3, r0
    1438:	d900      	bls.n	143c <_usb_d_dev_in_next+0xd8>
    143a:	1c06      	adds	r6, r0, #0
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    143c:	6823      	ldr	r3, [r4, #0]
	bank->ADDR.reg          = addr;
    143e:	18ba      	adds	r2, r7, r2
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1440:	1859      	adds	r1, r3, r1
    1442:	b2b6      	uxth	r6, r6
	bank->ADDR.reg          = addr;
    1444:	6411      	str	r1, [r2, #64]	; 0x40
    1446:	e7d4      	b.n	13f2 <_usb_d_dev_in_next+0x8e>
	} else if (ept->flags.bits.need_zlp) {
    1448:	2710      	movs	r7, #16
    144a:	4660      	mov	r0, ip
    144c:	4238      	tst	r0, r7
    144e:	d00e      	beq.n	146e <_usb_d_dev_in_next+0x10a>
		ept->flags.bits.need_zlp = 0;
    1450:	7ce3      	ldrb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1452:	016a      	lsls	r2, r5, #5
		ept->flags.bits.need_zlp = 0;
    1454:	43bb      	bics	r3, r7
    1456:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1458:	4b16      	ldr	r3, [pc, #88]	; (14b4 <_usb_d_dev_in_next+0x150>)
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    145a:	491a      	ldr	r1, [pc, #104]	; (14c4 <_usb_d_dev_in_next+0x160>)
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    145c:	189b      	adds	r3, r3, r2
    145e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1460:	0b92      	lsrs	r2, r2, #14
    1462:	0392      	lsls	r2, r2, #14
    1464:	645a      	str	r2, [r3, #68]	; 0x44
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1468:	400a      	ands	r2, r1
    146a:	645a      	str	r2, [r3, #68]	; 0x44
    146c:	e7ce      	b.n	140c <_usb_d_dev_in_next+0xa8>
	if (is_ctrl) {
    146e:	9802      	ldr	r0, [sp, #8]
    1470:	2801      	cmp	r0, #1
    1472:	d11a      	bne.n	14aa <_usb_d_dev_in_next+0x146>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1474:	254b      	movs	r5, #75	; 0x4b
    1476:	4814      	ldr	r0, [pc, #80]	; (14c8 <_usb_d_dev_in_next+0x164>)
    1478:	1812      	adds	r2, r2, r0
    147a:	7255      	strb	r5, [r2, #9]
	if (last_pkt == ept->size) {
    147c:	9a03      	ldr	r2, [sp, #12]
    147e:	4013      	ands	r3, r2
    1480:	429e      	cmp	r6, r3
    1482:	d10c      	bne.n	149e <_usb_d_dev_in_next+0x13a>
		ept->flags.bits.is_busy = 0;
    1484:	2540      	movs	r5, #64	; 0x40
    1486:	7ce3      	ldrb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1488:	9801      	ldr	r0, [sp, #4]
		ept->flags.bits.is_busy = 0;
    148a:	43ab      	bics	r3, r5
    148c:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    148e:	4b0f      	ldr	r3, [pc, #60]	; (14cc <_usb_d_dev_in_next+0x168>)
    1490:	68db      	ldr	r3, [r3, #12]
    1492:	4798      	blx	r3
    1494:	2800      	cmp	r0, #0
    1496:	d106      	bne.n	14a6 <_usb_d_dev_in_next+0x142>
		ept->flags.bits.is_busy = 1;
    1498:	7ce3      	ldrb	r3, [r4, #19]
    149a:	432b      	orrs	r3, r5
    149c:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    149e:	2100      	movs	r1, #0
    14a0:	0020      	movs	r0, r4
    14a2:	4b0b      	ldr	r3, [pc, #44]	; (14d0 <_usb_d_dev_in_next+0x16c>)
    14a4:	4798      	blx	r3
}
    14a6:	b005      	add	sp, #20
    14a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14aa:	4807      	ldr	r0, [pc, #28]	; (14c8 <_usb_d_dev_in_next+0x164>)
    14ac:	254a      	movs	r5, #74	; 0x4a
    14ae:	1812      	adds	r2, r2, r0
    14b0:	e7e3      	b.n	147a <_usb_d_dev_in_next+0x116>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	20000490 	.word	0x20000490
    14b8:	000003ff 	.word	0x000003ff
    14bc:	41005100 	.word	0x41005100
    14c0:	00002ba1 	.word	0x00002ba1
    14c4:	f0003fff 	.word	0xf0003fff
    14c8:	410050ff 	.word	0x410050ff
    14cc:	20000290 	.word	0x20000290
    14d0:	000011bd 	.word	0x000011bd

000014d4 <_usb_d_dev_out_next>:
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14d4:	230f      	movs	r3, #15
{
    14d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14d8:	7c82      	ldrb	r2, [r0, #18]
{
    14da:	b087      	sub	sp, #28
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14dc:	401a      	ands	r2, r3
    14de:	0153      	lsls	r3, r2, #5
{
    14e0:	0004      	movs	r4, r0
    14e2:	1e0d      	subs	r5, r1, #0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14e4:	9201      	str	r2, [sp, #4]
    14e6:	9305      	str	r3, [sp, #20]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    14e8:	d068      	beq.n	15bc <_usb_d_dev_out_next+0xe8>
    14ea:	9a05      	ldr	r2, [sp, #20]
    14ec:	4b67      	ldr	r3, [pc, #412]	; (168c <_usb_d_dev_out_next+0x1b8>)
    14ee:	189b      	adds	r3, r3, r2
    14f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    14f2:	0100      	lsls	r0, r0, #4
    14f4:	0c82      	lsrs	r2, r0, #18
    14f6:	9203      	str	r2, [sp, #12]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    14f8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    14fa:	04bf      	lsls	r7, r7, #18
    14fc:	0cbf      	lsrs	r7, r7, #18
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    14fe:	8a23      	ldrh	r3, [r4, #16]
    1500:	9302      	str	r3, [sp, #8]
    1502:	9a02      	ldr	r2, [sp, #8]
    1504:	4b62      	ldr	r3, [pc, #392]	; (1690 <_usb_d_dev_out_next+0x1bc>)
    1506:	429a      	cmp	r2, r3
    1508:	d003      	beq.n	1512 <_usb_d_dev_out_next+0x3e>
    150a:	0013      	movs	r3, r2
    150c:	3b01      	subs	r3, #1
    150e:	b29b      	uxth	r3, r3
    1510:	9302      	str	r3, [sp, #8]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1512:	2307      	movs	r3, #7
    1514:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           last_pkt   = last_trans & size_mask;
    1516:	9e02      	ldr	r6, [sp, #8]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1518:	4013      	ands	r3, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    151a:	403e      	ands	r6, r7
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    151c:	9304      	str	r3, [sp, #16]
	if (isr) {
    151e:	2d00      	cmp	r5, #0
    1520:	d005      	beq.n	152e <_usb_d_dev_out_next+0x5a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1522:	9b01      	ldr	r3, [sp, #4]
    1524:	495b      	ldr	r1, [pc, #364]	; (1694 <_usb_d_dev_out_next+0x1c0>)
    1526:	015b      	lsls	r3, r3, #5
    1528:	185b      	adds	r3, r3, r1
    152a:	2101      	movs	r1, #1
    152c:	71d9      	strb	r1, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    152e:	0693      	lsls	r3, r2, #26
    1530:	d50d      	bpl.n	154e <_usb_d_dev_out_next+0x7a>
    1532:	6862      	ldr	r2, [r4, #4]
    1534:	2a00      	cmp	r2, #0
    1536:	d00a      	beq.n	154e <_usb_d_dev_out_next+0x7a>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1538:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    153a:	6823      	ldr	r3, [r4, #0]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    153c:	1a12      	subs	r2, r2, r0
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    153e:	b292      	uxth	r2, r2
    1540:	1818      	adds	r0, r3, r0
    1542:	68e1      	ldr	r1, [r4, #12]
    1544:	4296      	cmp	r6, r2
    1546:	d200      	bcs.n	154a <_usb_d_dev_out_next+0x76>
    1548:	0032      	movs	r2, r6
    154a:	4b53      	ldr	r3, [pc, #332]	; (1698 <_usb_d_dev_out_next+0x1c4>)
    154c:	4798      	blx	r3
    154e:	9a01      	ldr	r2, [sp, #4]
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1550:	6863      	ldr	r3, [r4, #4]
    1552:	0151      	lsls	r1, r2, #5
    1554:	2b00      	cmp	r3, #0
    1556:	d134      	bne.n	15c2 <_usb_d_dev_out_next+0xee>
    1558:	2010      	movs	r0, #16
    155a:	7ce2      	ldrb	r2, [r4, #19]
    155c:	4202      	tst	r2, r0
    155e:	d100      	bne.n	1562 <_usb_d_dev_out_next+0x8e>
    1560:	e08b      	b.n	167a <_usb_d_dev_out_next+0x1a6>
		ept->flags.bits.use_cache = 1;
    1562:	4382      	bics	r2, r0
    1564:	3320      	adds	r3, #32
    1566:	431a      	orrs	r2, r3
    1568:	74e2      	strb	r2, [r4, #19]
	bank->ADDR.reg          = addr;
    156a:	4b48      	ldr	r3, [pc, #288]	; (168c <_usb_d_dev_out_next+0x1b8>)
    156c:	9a05      	ldr	r2, [sp, #20]
    156e:	68e1      	ldr	r1, [r4, #12]
    1570:	189b      	adds	r3, r3, r2
    1572:	6319      	str	r1, [r3, #48]	; 0x30
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1574:	8a21      	ldrh	r1, [r4, #16]
	bank->ADDR.reg          = addr;
    1576:	001a      	movs	r2, r3
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1578:	4848      	ldr	r0, [pc, #288]	; (169c <_usb_d_dev_out_next+0x1c8>)
    157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    157c:	0489      	lsls	r1, r1, #18
    157e:	0909      	lsrs	r1, r1, #4
    1580:	4003      	ands	r3, r0
    1582:	430b      	orrs	r3, r1
    1584:	6353      	str	r3, [r2, #52]	; 0x34
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1586:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1588:	0b9b      	lsrs	r3, r3, #14
    158a:	039b      	lsls	r3, r3, #14
    158c:	6353      	str	r3, [r2, #52]	; 0x34
	if (!isr) {
    158e:	2d00      	cmp	r5, #0
    1590:	d10d      	bne.n	15ae <_usb_d_dev_out_next+0xda>
    1592:	9b01      	ldr	r3, [sp, #4]
		if (is_ctrl) {
    1594:	9904      	ldr	r1, [sp, #16]
    1596:	015a      	lsls	r2, r3, #5
			inten = USB_D_BANK0_INT_FLAGS;
    1598:	2325      	movs	r3, #37	; 0x25
		if (is_ctrl) {
    159a:	2901      	cmp	r1, #1
    159c:	d104      	bne.n	15a8 <_usb_d_dev_out_next+0xd4>
	bank->STATUS_BK.reg     = 0;
    159e:	4b3b      	ldr	r3, [pc, #236]	; (168c <_usb_d_dev_out_next+0x1b8>)
    15a0:	3330      	adds	r3, #48	; 0x30
    15a2:	189b      	adds	r3, r3, r2
    15a4:	769d      	strb	r5, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    15a6:	232d      	movs	r3, #45	; 0x2d
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    15a8:	493d      	ldr	r1, [pc, #244]	; (16a0 <_usb_d_dev_out_next+0x1cc>)
    15aa:	1852      	adds	r2, r2, r1
    15ac:	7293      	strb	r3, [r2, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    15ae:	9b01      	ldr	r3, [sp, #4]
    15b0:	4a38      	ldr	r2, [pc, #224]	; (1694 <_usb_d_dev_out_next+0x1c0>)
    15b2:	015b      	lsls	r3, r3, #5
    15b4:	189b      	adds	r3, r3, r2
    15b6:	2240      	movs	r2, #64	; 0x40
    15b8:	711a      	strb	r2, [r3, #4]
    15ba:	e01f      	b.n	15fc <_usb_d_dev_out_next+0x128>
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    15bc:	9103      	str	r1, [sp, #12]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    15be:	000f      	movs	r7, r1
    15c0:	e79d      	b.n	14fe <_usb_d_dev_out_next+0x2a>
	} else if (isr && last_pkt < ept->size) {
    15c2:	2d00      	cmp	r5, #0
    15c4:	d01c      	beq.n	1600 <_usb_d_dev_out_next+0x12c>
    15c6:	8a22      	ldrh	r2, [r4, #16]
    15c8:	42b2      	cmp	r2, r6
    15ca:	d919      	bls.n	1600 <_usb_d_dev_out_next+0x12c>
		ept->flags.bits.need_zlp = 0;
    15cc:	2210      	movs	r2, #16
    15ce:	7ce3      	ldrb	r3, [r4, #19]
    15d0:	4393      	bics	r3, r2
    15d2:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    15d4:	68a3      	ldr	r3, [r4, #8]
    15d6:	19df      	adds	r7, r3, r7
    15d8:	60a7      	str	r7, [r4, #8]
	if (is_ctrl) {
    15da:	9b04      	ldr	r3, [sp, #16]
    15dc:	2b01      	cmp	r3, #1
    15de:	d148      	bne.n	1672 <_usb_d_dev_out_next+0x19e>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    15e0:	4b2f      	ldr	r3, [pc, #188]	; (16a0 <_usb_d_dev_out_next+0x1cc>)
    15e2:	18c9      	adds	r1, r1, r3
    15e4:	232d      	movs	r3, #45	; 0x2d
    15e6:	724b      	strb	r3, [r1, #9]
	if (0 == epn) {
    15e8:	9b01      	ldr	r3, [sp, #4]
    15ea:	2b00      	cmp	r3, #0
    15ec:	d102      	bne.n	15f4 <_usb_d_dev_out_next+0x120>
	bank->ADDR.reg          = addr;
    15ee:	4b27      	ldr	r3, [pc, #156]	; (168c <_usb_d_dev_out_next+0x1b8>)
    15f0:	68e2      	ldr	r2, [r4, #12]
    15f2:	631a      	str	r2, [r3, #48]	; 0x30
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    15f4:	2100      	movs	r1, #0
    15f6:	0020      	movs	r0, r4
    15f8:	4b2a      	ldr	r3, [pc, #168]	; (16a4 <_usb_d_dev_out_next+0x1d0>)
    15fa:	4798      	blx	r3
}
    15fc:	b007      	add	sp, #28
    15fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ept->trans_count += trans_size;
    1600:	68a6      	ldr	r6, [r4, #8]
    1602:	9a03      	ldr	r2, [sp, #12]
    1604:	46b4      	mov	ip, r6
    1606:	4462      	add	r2, ip
    1608:	0010      	movs	r0, r2
    160a:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    160c:	4293      	cmp	r3, r2
    160e:	d9e4      	bls.n	15da <_usb_d_dev_out_next+0x106>
			if (ept->flags.bits.use_cache) {
    1610:	2620      	movs	r6, #32
			trans_next = ept->trans_size - ept->trans_count;
    1612:	1a9b      	subs	r3, r3, r2
			if (ept->flags.bits.use_cache) {
    1614:	7ce2      	ldrb	r2, [r4, #19]
			trans_next = ept->trans_size - ept->trans_count;
    1616:	b29b      	uxth	r3, r3
    1618:	8a27      	ldrh	r7, [r4, #16]
			if (ept->flags.bits.use_cache) {
    161a:	4232      	tst	r2, r6
    161c:	d012      	beq.n	1644 <_usb_d_dev_out_next+0x170>
    161e:	1c38      	adds	r0, r7, #0
    1620:	429f      	cmp	r7, r3
    1622:	d900      	bls.n	1626 <_usb_d_dev_out_next+0x152>
    1624:	1c18      	adds	r0, r3, #0
	bank->ADDR.reg          = addr;
    1626:	9a01      	ldr	r2, [sp, #4]
    1628:	b283      	uxth	r3, r0
    162a:	0150      	lsls	r0, r2, #5
    162c:	4a17      	ldr	r2, [pc, #92]	; (168c <_usb_d_dev_out_next+0x1b8>)
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    162e:	68e4      	ldr	r4, [r4, #12]
	bank->ADDR.reg          = addr;
    1630:	1810      	adds	r0, r2, r0
    1632:	6304      	str	r4, [r0, #48]	; 0x30
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1634:	4a15      	ldr	r2, [pc, #84]	; (168c <_usb_d_dev_out_next+0x1b8>)
    1636:	4819      	ldr	r0, [pc, #100]	; (169c <_usb_d_dev_out_next+0x1c8>)
    1638:	1852      	adds	r2, r2, r1
    163a:	6b51      	ldr	r1, [r2, #52]	; 0x34
    163c:	049b      	lsls	r3, r3, #18
    163e:	091b      	lsrs	r3, r3, #4
    1640:	4001      	ands	r1, r0
    1642:	e79e      	b.n	1582 <_usb_d_dev_out_next+0xae>
				if (trans_next > ept->size) {
    1644:	42bb      	cmp	r3, r7
    1646:	d90d      	bls.n	1664 <_usb_d_dev_out_next+0x190>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1648:	2680      	movs	r6, #128	; 0x80
    164a:	01b6      	lsls	r6, r6, #6
    164c:	42b3      	cmp	r3, r6
    164e:	d80e      	bhi.n	166e <_usb_d_dev_out_next+0x19a>
    1650:	9a02      	ldr	r2, [sp, #8]
    1652:	4393      	bics	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1654:	6824      	ldr	r4, [r4, #0]
	bank->ADDR.reg          = addr;
    1656:	9a01      	ldr	r2, [sp, #4]
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1658:	1820      	adds	r0, r4, r0
	bank->ADDR.reg          = addr;
    165a:	0154      	lsls	r4, r2, #5
    165c:	4a0b      	ldr	r2, [pc, #44]	; (168c <_usb_d_dev_out_next+0x1b8>)
    165e:	1914      	adds	r4, r2, r4
    1660:	6320      	str	r0, [r4, #48]	; 0x30
    1662:	e7e7      	b.n	1634 <_usb_d_dev_out_next+0x160>
				} else if (trans_next < ept->size) {
    1664:	42bb      	cmp	r3, r7
    1666:	d2f5      	bcs.n	1654 <_usb_d_dev_out_next+0x180>
					ept->flags.bits.use_cache = 1;
    1668:	4316      	orrs	r6, r2
    166a:	74e6      	strb	r6, [r4, #19]
    166c:	e7f2      	b.n	1654 <_usb_d_dev_out_next+0x180>
						trans_next = USB_D_DEV_TRANS_MAX;
    166e:	0033      	movs	r3, r6
    1670:	e7f0      	b.n	1654 <_usb_d_dev_out_next+0x180>
    1672:	4b0b      	ldr	r3, [pc, #44]	; (16a0 <_usb_d_dev_out_next+0x1cc>)
    1674:	18c9      	adds	r1, r1, r3
    1676:	2325      	movs	r3, #37	; 0x25
    1678:	e7b5      	b.n	15e6 <_usb_d_dev_out_next+0x112>
	} else if (isr && last_pkt < ept->size) {
    167a:	2d00      	cmp	r5, #0
    167c:	d1a3      	bne.n	15c6 <_usb_d_dev_out_next+0xf2>
		ept->trans_count += trans_size;
    167e:	68a2      	ldr	r2, [r4, #8]
    1680:	9b03      	ldr	r3, [sp, #12]
    1682:	4694      	mov	ip, r2
    1684:	4463      	add	r3, ip
    1686:	60a3      	str	r3, [r4, #8]
    1688:	e7a7      	b.n	15da <_usb_d_dev_out_next+0x106>
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	20000490 	.word	0x20000490
    1690:	000003ff 	.word	0x000003ff
    1694:	41005100 	.word	0x41005100
    1698:	00002ba1 	.word	0x00002ba1
    169c:	f0003fff 	.word	0xf0003fff
    16a0:	410050ff 	.word	0x410050ff
    16a4:	000011bd 	.word	0x000011bd

000016a8 <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16a8:	2380      	movs	r3, #128	; 0x80
{
    16aa:	0002      	movs	r2, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16ac:	009b      	lsls	r3, r3, #2
    16ae:	2007      	movs	r0, #7
    16b0:	429a      	cmp	r2, r3
    16b2:	d814      	bhi.n	16de <_usbd_ep_pcksize_size+0x36>
    16b4:	3b01      	subs	r3, #1
    16b6:	3bff      	subs	r3, #255	; 0xff
    16b8:	3801      	subs	r0, #1
    16ba:	429a      	cmp	r2, r3
    16bc:	d80f      	bhi.n	16de <_usbd_ep_pcksize_size+0x36>
    16be:	3801      	subs	r0, #1
    16c0:	2a80      	cmp	r2, #128	; 0x80
    16c2:	d80c      	bhi.n	16de <_usbd_ep_pcksize_size+0x36>
    16c4:	3801      	subs	r0, #1
    16c6:	2a40      	cmp	r2, #64	; 0x40
    16c8:	d809      	bhi.n	16de <_usbd_ep_pcksize_size+0x36>
    16ca:	3801      	subs	r0, #1
    16cc:	2a20      	cmp	r2, #32
    16ce:	d806      	bhi.n	16de <_usbd_ep_pcksize_size+0x36>
    16d0:	3801      	subs	r0, #1
    16d2:	2a10      	cmp	r2, #16
    16d4:	d803      	bhi.n	16de <_usbd_ep_pcksize_size+0x36>
    16d6:	3006      	adds	r0, #6
    16d8:	4290      	cmp	r0, r2
    16da:	4180      	sbcs	r0, r0
    16dc:	4240      	negs	r0, r0
}
    16de:	4770      	bx	lr

000016e0 <_usb_d_dev_init>:
{
    16e0:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    16e2:	4c2a      	ldr	r4, [pc, #168]	; (178c <_usb_d_dev_init+0xac>)
    16e4:	78a3      	ldrb	r3, [r4, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    16e6:	07db      	lsls	r3, r3, #31
    16e8:	d40d      	bmi.n	1706 <_usb_d_dev_init+0x26>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16ea:	2303      	movs	r3, #3
    16ec:	78a2      	ldrb	r2, [r4, #2]
    16ee:	421a      	tst	r2, r3
    16f0:	d1fc      	bne.n	16ec <_usb_d_dev_init+0xc>
static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
	tmp &= mask;
    16f2:	2202      	movs	r2, #2
	tmp = ((Usb *)hw)->DEVICE.CTRLA.reg;
    16f4:	7823      	ldrb	r3, [r4, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    16f6:	4213      	tst	r3, r2
    16f8:	d13c      	bne.n	1774 <_usb_d_dev_init+0x94>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    16fa:	2301      	movs	r3, #1
    16fc:	7023      	strb	r3, [r4, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16fe:	3302      	adds	r3, #2
    1700:	78a2      	ldrb	r2, [r4, #2]
    1702:	421a      	tst	r2, r3
    1704:	d1fc      	bne.n	1700 <_usb_d_dev_init+0x20>
    1706:	2301      	movs	r3, #1
    1708:	78a2      	ldrb	r2, [r4, #2]
    170a:	421a      	tst	r2, r3
    170c:	d1fc      	bne.n	1708 <_usb_d_dev_init+0x28>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    170e:	4b20      	ldr	r3, [pc, #128]	; (1790 <_usb_d_dev_init+0xb0>)
    1710:	4a20      	ldr	r2, [pc, #128]	; (1794 <_usb_d_dev_init+0xb4>)
    1712:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1714:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1716:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1718:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    171a:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    171c:	4b1e      	ldr	r3, [pc, #120]	; (1798 <_usb_d_dev_init+0xb8>)
    171e:	4798      	blx	r3
	uint32_t pad_transn
    1720:	201f      	movs	r0, #31
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1722:	4b1e      	ldr	r3, [pc, #120]	; (179c <_usb_d_dev_init+0xbc>)
    1724:	681a      	ldr	r2, [r3, #0]
    1726:	0b53      	lsrs	r3, r2, #13
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1728:	0c91      	lsrs	r1, r2, #18
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    172a:	0192      	lsls	r2, r2, #6
	uint32_t pad_transn
    172c:	4003      	ands	r3, r0
	uint32_t pad_transp
    172e:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1730:	0f52      	lsrs	r2, r2, #29
	if (pad_transn == 0x1F) {
    1732:	4283      	cmp	r3, r0
    1734:	d100      	bne.n	1738 <_usb_d_dev_init+0x58>
		pad_transn = 5;
    1736:	2305      	movs	r3, #5
	if (pad_transp == 0x1F) {
    1738:	291f      	cmp	r1, #31
    173a:	d100      	bne.n	173e <_usb_d_dev_init+0x5e>
		pad_transp = 29;
    173c:	3902      	subs	r1, #2
	if (pad_trim == 0x7) {
    173e:	2a07      	cmp	r2, #7
    1740:	d100      	bne.n	1744 <_usb_d_dev_init+0x64>
		pad_trim = 5;
    1742:	3a02      	subs	r2, #2
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1744:	019b      	lsls	r3, r3, #6
    1746:	430b      	orrs	r3, r1
    1748:	0312      	lsls	r2, r2, #12
    174a:	4313      	orrs	r3, r2
    174c:	8523      	strh	r3, [r4, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    174e:	2303      	movs	r3, #3
    1750:	78e2      	ldrb	r2, [r4, #3]
    1752:	431a      	orrs	r2, r3
    1754:	70e2      	strb	r2, [r4, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1756:	220c      	movs	r2, #12
    1758:	78e1      	ldrb	r1, [r4, #3]
    175a:	430a      	orrs	r2, r1
    175c:	70e2      	strb	r2, [r4, #3]
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    175e:	2204      	movs	r2, #4
    1760:	7022      	strb	r2, [r4, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1762:	78a0      	ldrb	r0, [r4, #2]
    1764:	4018      	ands	r0, r3
    1766:	d1fc      	bne.n	1762 <_usb_d_dev_init+0x82>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    1768:	4b0d      	ldr	r3, [pc, #52]	; (17a0 <_usb_d_dev_init+0xc0>)
    176a:	3330      	adds	r3, #48	; 0x30
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->DEVICE.DESCADD.reg = data;
    176c:	6263      	str	r3, [r4, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    176e:	2301      	movs	r3, #1
    1770:	8123      	strh	r3, [r4, #8]
}
    1772:	bd10      	pop	{r4, pc}
	((Usb *)hw)->DEVICE.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1774:	7823      	ldrb	r3, [r4, #0]
    1776:	4393      	bics	r3, r2
    1778:	7023      	strb	r3, [r4, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    177a:	2303      	movs	r3, #3
    177c:	78a2      	ldrb	r2, [r4, #2]
    177e:	421a      	tst	r2, r3
    1780:	d1fc      	bne.n	177c <_usb_d_dev_init+0x9c>
    1782:	2302      	movs	r3, #2
    1784:	78a2      	ldrb	r2, [r4, #2]
    1786:	421a      	tst	r2, r3
    1788:	d1fc      	bne.n	1784 <_usb_d_dev_init+0xa4>
    178a:	e7b6      	b.n	16fa <_usb_d_dev_init+0x1a>
    178c:	41005000 	.word	0x41005000
    1790:	20000290 	.word	0x20000290
    1794:	000010d1 	.word	0x000010d1
    1798:	00001325 	.word	0x00001325
    179c:	00806024 	.word	0x00806024
    17a0:	20000490 	.word	0x20000490

000017a4 <_usb_d_dev_enable>:
	tmp &= mask;
    17a4:	2203      	movs	r2, #3
	tmp = ((Usb *)hw)->DEVICE.SYNCBUSY.reg;
    17a6:	4b0e      	ldr	r3, [pc, #56]	; (17e0 <_usb_d_dev_enable+0x3c>)
    17a8:	7899      	ldrb	r1, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    17aa:	4211      	tst	r1, r2
    17ac:	d115      	bne.n	17da <_usb_d_dev_enable+0x36>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    17ae:	7899      	ldrb	r1, [r3, #2]
    17b0:	4211      	tst	r1, r2
    17b2:	d1fc      	bne.n	17ae <_usb_d_dev_enable+0xa>
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    17b4:	2202      	movs	r2, #2
	return ((Usb *)hw)->DEVICE.CTRLA.reg;
    17b6:	7819      	ldrb	r1, [r3, #0]
    17b8:	b2c9      	uxtb	r1, r1
    17ba:	4211      	tst	r1, r2
    17bc:	d006      	beq.n	17cc <_usb_d_dev_enable+0x28>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17be:	2180      	movs	r1, #128	; 0x80
	return ERR_NONE;
    17c0:	2000      	movs	r0, #0
    17c2:	4a08      	ldr	r2, [pc, #32]	; (17e4 <_usb_d_dev_enable+0x40>)
    17c4:	6011      	str	r1, [r2, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    17c6:	4a08      	ldr	r2, [pc, #32]	; (17e8 <_usb_d_dev_enable+0x44>)
    17c8:	831a      	strh	r2, [r3, #24]
}
    17ca:	4770      	bx	lr
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    17cc:	430a      	orrs	r2, r1
	((Usb *)hw)->DEVICE.CTRLA.reg = data;
    17ce:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    17d0:	2203      	movs	r2, #3
    17d2:	7899      	ldrb	r1, [r3, #2]
    17d4:	4211      	tst	r1, r2
    17d6:	d1fc      	bne.n	17d2 <_usb_d_dev_enable+0x2e>
    17d8:	e7f1      	b.n	17be <_usb_d_dev_enable+0x1a>
		return -USB_ERR_DENIED;
    17da:	2011      	movs	r0, #17
    17dc:	4240      	negs	r0, r0
    17de:	e7f4      	b.n	17ca <_usb_d_dev_enable+0x26>
    17e0:	41005000 	.word	0x41005000
    17e4:	e000e100 	.word	0xe000e100
    17e8:	0000028d 	.word	0x0000028d

000017ec <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    17ec:	2101      	movs	r1, #1
    17ee:	4a02      	ldr	r2, [pc, #8]	; (17f8 <_usb_d_dev_attach+0xc>)
    17f0:	8913      	ldrh	r3, [r2, #8]
    17f2:	438b      	bics	r3, r1
    17f4:	8113      	strh	r3, [r2, #8]
}
    17f6:	4770      	bx	lr
    17f8:	41005000 	.word	0x41005000

000017fc <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    17fc:	2380      	movs	r3, #128	; 0x80
    17fe:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1800:	4b01      	ldr	r3, [pc, #4]	; (1808 <_usb_d_dev_set_address+0xc>)
    1802:	7298      	strb	r0, [r3, #10]
}
    1804:	4770      	bx	lr
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	41005000 	.word	0x41005000

0000180c <_usb_d_dev_ep_init>:
{
    180c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    180e:	2600      	movs	r6, #0
    1810:	466b      	mov	r3, sp
	uint8_t               epn = USB_EP_GET_N(ep);
    1812:	240f      	movs	r4, #15
{
    1814:	9000      	str	r0, [sp, #0]
    1816:	9201      	str	r2, [sp, #4]
    1818:	579e      	ldrsb	r6, [r3, r6]
	uint8_t               epn = USB_EP_GET_N(ep);
    181a:	4004      	ands	r4, r0
{
    181c:	000f      	movs	r7, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    181e:	4b2b      	ldr	r3, [pc, #172]	; (18cc <_usb_d_dev_ep_init+0xc0>)
    1820:	0ff1      	lsrs	r1, r6, #31
    1822:	0020      	movs	r0, r4
    1824:	4798      	blx	r3
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1826:	2303      	movs	r3, #3
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1828:	0005      	movs	r5, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    182a:	401f      	ands	r7, r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    182c:	2c02      	cmp	r4, #2
    182e:	d844      	bhi.n	18ba <_usb_d_dev_ep_init+0xae>
	if (ept->ep != 0xFF) {
    1830:	7c83      	ldrb	r3, [r0, #18]
    1832:	2bff      	cmp	r3, #255	; 0xff
    1834:	d144      	bne.n	18c0 <_usb_d_dev_ep_init+0xb4>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    1836:	2f00      	cmp	r7, #0
    1838:	d10f      	bne.n	185a <_usb_d_dev_ep_init+0x4e>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    183a:	43f1      	mvns	r1, r6
    183c:	4b23      	ldr	r3, [pc, #140]	; (18cc <_usb_d_dev_ep_init+0xc0>)
    183e:	0fc9      	lsrs	r1, r1, #31
    1840:	0020      	movs	r0, r4
    1842:	4798      	blx	r3
		if (ept_in->ep != 0xFF) {
    1844:	7c83      	ldrb	r3, [r0, #18]
    1846:	2bff      	cmp	r3, #255	; 0xff
    1848:	d13a      	bne.n	18c0 <_usb_d_dev_ep_init+0xb4>
		if (pcfg->cache == NULL) {
    184a:	3bf3      	subs	r3, #243	; 0xf3
    184c:	4363      	muls	r3, r4
    184e:	4a20      	ldr	r2, [pc, #128]	; (18d0 <_usb_d_dev_ep_init+0xc4>)
    1850:	589b      	ldr	r3, [r3, r2]
    1852:	2b00      	cmp	r3, #0
    1854:	d136      	bne.n	18c4 <_usb_d_dev_ep_init+0xb8>
			return -USB_ERR_FUNC;
    1856:	2013      	movs	r0, #19
    1858:	e030      	b.n	18bc <_usb_d_dev_ep_init+0xb0>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    185a:	2e00      	cmp	r6, #0
    185c:	da16      	bge.n	188c <_usb_d_dev_ep_init+0x80>
    185e:	220c      	movs	r2, #12
    1860:	4362      	muls	r2, r4
    1862:	4b1b      	ldr	r3, [pc, #108]	; (18d0 <_usb_d_dev_ep_init+0xc4>)
    1864:	189b      	adds	r3, r3, r2
    1866:	685a      	ldr	r2, [r3, #4]
    1868:	2a00      	cmp	r2, #0
    186a:	d11b      	bne.n	18a4 <_usb_d_dev_ep_init+0x98>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    186c:	230c      	movs	r3, #12
    186e:	4363      	muls	r3, r4
    1870:	4c17      	ldr	r4, [pc, #92]	; (18d0 <_usb_d_dev_ep_init+0xc4>)
    1872:	18e4      	adds	r4, r4, r3
    1874:	6863      	ldr	r3, [r4, #4]
    1876:	60eb      	str	r3, [r5, #12]
	ept->size     = max_pkt_siz;
    1878:	466b      	mov	r3, sp
    187a:	889b      	ldrh	r3, [r3, #4]
	return USB_OK;
    187c:	2000      	movs	r0, #0
	ept->size     = max_pkt_siz;
    187e:	822b      	strh	r3, [r5, #16]
	ept->ep       = ep;
    1880:	466b      	mov	r3, sp
    1882:	781b      	ldrb	r3, [r3, #0]
	ept->flags.u8 = (ep_type + 1);
    1884:	3701      	adds	r7, #1
    1886:	74ef      	strb	r7, [r5, #19]
	ept->ep       = ep;
    1888:	74ab      	strb	r3, [r5, #18]
}
    188a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    188c:	230c      	movs	r3, #12
    188e:	4363      	muls	r3, r4
    1890:	4a0f      	ldr	r2, [pc, #60]	; (18d0 <_usb_d_dev_ep_init+0xc4>)
    1892:	589b      	ldr	r3, [r3, r2]
    1894:	2b00      	cmp	r3, #0
    1896:	d00b      	beq.n	18b0 <_usb_d_dev_ep_init+0xa4>
    1898:	220c      	movs	r2, #12
    189a:	4362      	muls	r2, r4
    189c:	4b0c      	ldr	r3, [pc, #48]	; (18d0 <_usb_d_dev_ep_init+0xc4>)
    189e:	189b      	adds	r3, r3, r2
    18a0:	891b      	ldrh	r3, [r3, #8]
    18a2:	e000      	b.n	18a6 <_usb_d_dev_ep_init+0x9a>
    18a4:	895b      	ldrh	r3, [r3, #10]
    18a6:	9a01      	ldr	r2, [sp, #4]
    18a8:	4293      	cmp	r3, r2
    18aa:	dbd4      	blt.n	1856 <_usb_d_dev_ep_init+0x4a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    18ac:	2e00      	cmp	r6, #0
    18ae:	dbdd      	blt.n	186c <_usb_d_dev_ep_init+0x60>
    18b0:	230c      	movs	r3, #12
    18b2:	435c      	muls	r4, r3
    18b4:	4b06      	ldr	r3, [pc, #24]	; (18d0 <_usb_d_dev_ep_init+0xc4>)
    18b6:	58e3      	ldr	r3, [r4, r3]
    18b8:	e7dd      	b.n	1876 <_usb_d_dev_ep_init+0x6a>
		return -USB_ERR_PARAM;
    18ba:	2012      	movs	r0, #18
			return -USB_ERR_FUNC;
    18bc:	4240      	negs	r0, r0
    18be:	e7e4      	b.n	188a <_usb_d_dev_ep_init+0x7e>
		return -USB_ERR_REDO;
    18c0:	2014      	movs	r0, #20
    18c2:	e7fb      	b.n	18bc <_usb_d_dev_ep_init+0xb0>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    18c4:	2e00      	cmp	r6, #0
    18c6:	dae7      	bge.n	1898 <_usb_d_dev_ep_init+0x8c>
    18c8:	e7c9      	b.n	185e <_usb_d_dev_ep_init+0x52>
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	000010f9 	.word	0x000010f9
    18d0:	00003498 	.word	0x00003498

000018d4 <_usb_d_dev_ep_deinit>:
{
    18d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    18d6:	250f      	movs	r5, #15
    18d8:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    18da:	0fdf      	lsrs	r7, r3, #31
	uint8_t               epn = USB_EP_GET_N(ep);
    18dc:	4005      	ands	r5, r0
    18de:	9301      	str	r3, [sp, #4]
{
    18e0:	0004      	movs	r4, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    18e2:	0039      	movs	r1, r7
    18e4:	0028      	movs	r0, r5
    18e6:	4b16      	ldr	r3, [pc, #88]	; (1940 <_usb_d_dev_ep_deinit+0x6c>)
    18e8:	4798      	blx	r3
    18ea:	0006      	movs	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    18ec:	2d02      	cmp	r5, #2
    18ee:	d814      	bhi.n	191a <_usb_d_dev_ep_deinit+0x46>
    18f0:	7c83      	ldrb	r3, [r0, #18]
    18f2:	2bff      	cmp	r3, #255	; 0xff
    18f4:	d011      	beq.n	191a <_usb_d_dev_ep_deinit+0x46>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    18f6:	2203      	movs	r2, #3
    18f8:	4b12      	ldr	r3, [pc, #72]	; (1944 <_usb_d_dev_ep_deinit+0x70>)
    18fa:	0039      	movs	r1, r7
    18fc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    18fe:	2207      	movs	r2, #7
    1900:	7cf3      	ldrb	r3, [r6, #19]
    1902:	4013      	ands	r3, r2
    1904:	2b01      	cmp	r3, #1
    1906:	d109      	bne.n	191c <_usb_d_dev_ep_deinit+0x48>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1908:	2200      	movs	r2, #0
    190a:	3408      	adds	r4, #8
    190c:	4b0e      	ldr	r3, [pc, #56]	; (1948 <_usb_d_dev_ep_deinit+0x74>)
    190e:	0164      	lsls	r4, r4, #5
    1910:	54e2      	strb	r2, [r4, r3]
	ept->flags.u8 = 0;
    1912:	2300      	movs	r3, #0
    1914:	74f3      	strb	r3, [r6, #19]
	ept->ep       = 0xFF;
    1916:	33ff      	adds	r3, #255	; 0xff
    1918:	74b3      	strb	r3, [r6, #18]
}
    191a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    191c:	b263      	sxtb	r3, r4
    191e:	2b00      	cmp	r3, #0
    1920:	da07      	bge.n	1932 <_usb_d_dev_ep_deinit+0x5e>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1922:	2270      	movs	r2, #112	; 0x70
    1924:	4b09      	ldr	r3, [pc, #36]	; (194c <_usb_d_dev_ep_deinit+0x78>)
    1926:	016d      	lsls	r5, r5, #5
    1928:	18ed      	adds	r5, r5, r3
    192a:	786b      	ldrb	r3, [r5, #1]
    192c:	4393      	bics	r3, r2
    192e:	706b      	strb	r3, [r5, #1]
    1930:	e7ef      	b.n	1912 <_usb_d_dev_ep_deinit+0x3e>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    1932:	4b06      	ldr	r3, [pc, #24]	; (194c <_usb_d_dev_ep_deinit+0x78>)
    1934:	0164      	lsls	r4, r4, #5
    1936:	18e4      	adds	r4, r4, r3
    1938:	7863      	ldrb	r3, [r4, #1]
    193a:	4393      	bics	r3, r2
    193c:	7063      	strb	r3, [r4, #1]
    193e:	e7e8      	b.n	1912 <_usb_d_dev_ep_deinit+0x3e>
    1940:	000010f9 	.word	0x000010f9
    1944:	000011e1 	.word	0x000011e1
    1948:	41005000 	.word	0x41005000
    194c:	410050ff 	.word	0x410050ff

00001950 <_usb_d_dev_ep_enable>:
{
    1950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    1952:	250f      	movs	r5, #15
    1954:	b244      	sxtb	r4, r0
    1956:	4005      	ands	r5, r0
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    1958:	0fe1      	lsrs	r1, r4, #31
    195a:	4b46      	ldr	r3, [pc, #280]	; (1a74 <_usb_d_dev_ep_enable+0x124>)
    195c:	0028      	movs	r0, r5
    195e:	4798      	blx	r3
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1960:	4b45      	ldr	r3, [pc, #276]	; (1a78 <_usb_d_dev_ep_enable+0x128>)
    1962:	0169      	lsls	r1, r5, #5
    1964:	18ce      	adds	r6, r1, r3
    1966:	7872      	ldrb	r2, [r6, #1]
    1968:	0007      	movs	r7, r0
    196a:	b2d2      	uxtb	r2, r2
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    196c:	2d02      	cmp	r5, #2
    196e:	d900      	bls.n	1972 <_usb_d_dev_ep_enable+0x22>
    1970:	e07b      	b.n	1a6a <_usb_d_dev_ep_enable+0x11a>
    1972:	7c83      	ldrb	r3, [r0, #18]
    1974:	9301      	str	r3, [sp, #4]
    1976:	2bff      	cmp	r3, #255	; 0xff
    1978:	d100      	bne.n	197c <_usb_d_dev_ep_enable+0x2c>
    197a:	e076      	b.n	1a6a <_usb_d_dev_ep_enable+0x11a>
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    197c:	4d3f      	ldr	r5, [pc, #252]	; (1a7c <_usb_d_dev_ep_enable+0x12c>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    197e:	7cc3      	ldrb	r3, [r0, #19]
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1980:	3530      	adds	r5, #48	; 0x30
    1982:	186d      	adds	r5, r5, r1
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1984:	2007      	movs	r0, #7
    1986:	0019      	movs	r1, r3
    1988:	4001      	ands	r1, r0
    198a:	2901      	cmp	r1, #1
    198c:	d13b      	bne.n	1a06 <_usb_d_dev_ep_enable+0xb6>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    198e:	2477      	movs	r4, #119	; 0x77
    1990:	4014      	ands	r4, r2
    1992:	d000      	beq.n	1996 <_usb_d_dev_ep_enable+0x46>
    1994:	e06c      	b.n	1a70 <_usb_d_dev_ep_enable+0x120>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1996:	2311      	movs	r3, #17
    1998:	7073      	strb	r3, [r6, #1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    199a:	8a3b      	ldrh	r3, [r7, #16]
    199c:	9300      	str	r3, [sp, #0]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    199e:	0018      	movs	r0, r3
    19a0:	4b37      	ldr	r3, [pc, #220]	; (1a80 <_usb_d_dev_ep_enable+0x130>)
    19a2:	4798      	blx	r3
    19a4:	23e0      	movs	r3, #224	; 0xe0
    19a6:	0700      	lsls	r0, r0, #28
    19a8:	05db      	lsls	r3, r3, #23
    19aa:	4018      	ands	r0, r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    19ac:	9b00      	ldr	r3, [sp, #0]
    19ae:	4a35      	ldr	r2, [pc, #212]	; (1a84 <_usb_d_dev_ep_enable+0x134>)
    19b0:	039b      	lsls	r3, r3, #14
    19b2:	4013      	ands	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19b4:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    19b6:	606b      	str	r3, [r5, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19b8:	9b00      	ldr	r3, [sp, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19ba:	2140      	movs	r1, #64	; 0x40
    19bc:	049b      	lsls	r3, r3, #18
    19be:	0c9b      	lsrs	r3, r3, #18
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    19c0:	2280      	movs	r2, #128	; 0x80
    19c2:	4318      	orrs	r0, r3
    19c4:	6168      	str	r0, [r5, #20]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19c6:	200f      	movs	r0, #15
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19c8:	71b1      	strb	r1, [r6, #6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    19ca:	7172      	strb	r2, [r6, #5]
    19cc:	9a01      	ldr	r2, [sp, #4]
	bank->STATUS_BK.reg     = 0;
    19ce:	72ac      	strb	r4, [r5, #10]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    19d0:	4002      	ands	r2, r0
	bank->ADDR.reg          = addr;
    19d2:	482a      	ldr	r0, [pc, #168]	; (1a7c <_usb_d_dev_ep_enable+0x12c>)
    19d4:	0152      	lsls	r2, r2, #5
	bank->STATUS_BK.reg     = 0;
    19d6:	76ac      	strb	r4, [r5, #26]
	bank->ADDR.reg          = addr;
    19d8:	1885      	adds	r5, r0, r2
    19da:	0028      	movs	r0, r5
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    19dc:	68fe      	ldr	r6, [r7, #12]
	bank->ADDR.reg          = addr;
    19de:	632e      	str	r6, [r5, #48]	; 0x30
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    19e0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
    19e2:	039e      	lsls	r6, r3, #14
    19e4:	4b28      	ldr	r3, [pc, #160]	; (1a88 <_usb_d_dev_ep_enable+0x138>)
    19e6:	402b      	ands	r3, r5
    19e8:	4333      	orrs	r3, r6
    19ea:	6343      	str	r3, [r0, #52]	; 0x34
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    19ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
    19ee:	0b9b      	lsrs	r3, r3, #14
    19f0:	039b      	lsls	r3, r3, #14
    19f2:	6343      	str	r3, [r0, #52]	; 0x34
    19f4:	4b20      	ldr	r3, [pc, #128]	; (1a78 <_usb_d_dev_ep_enable+0x128>)
    19f6:	18d3      	adds	r3, r2, r3
    19f8:	22b0      	movs	r2, #176	; 0xb0
    19fa:	715a      	strb	r2, [r3, #5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    19fc:	3aa0      	subs	r2, #160	; 0xa0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    19fe:	7199      	strb	r1, [r3, #6]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1a00:	729a      	strb	r2, [r3, #10]
	return USB_OK;
    1a02:	0020      	movs	r0, r4
}
    1a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	} else if (dir) {
    1a06:	2c00      	cmp	r4, #0
    1a08:	da17      	bge.n	1a3a <_usb_d_dev_ep_enable+0xea>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    1a0a:	2070      	movs	r0, #112	; 0x70
    1a0c:	0014      	movs	r4, r2
    1a0e:	4004      	ands	r4, r0
    1a10:	d12e      	bne.n	1a70 <_usb_d_dev_ep_enable+0x120>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    1a12:	011b      	lsls	r3, r3, #4
    1a14:	4003      	ands	r3, r0
    1a16:	4313      	orrs	r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a18:	7073      	strb	r3, [r6, #1]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a1a:	8a3f      	ldrh	r7, [r7, #16]
    1a1c:	4b18      	ldr	r3, [pc, #96]	; (1a80 <_usb_d_dev_ep_enable+0x130>)
    1a1e:	0038      	movs	r0, r7
    1a20:	4798      	blx	r3
    1a22:	23e0      	movs	r3, #224	; 0xe0
    1a24:	0700      	lsls	r0, r0, #28
    1a26:	05db      	lsls	r3, r3, #23
    1a28:	4018      	ands	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a2a:	2380      	movs	r3, #128	; 0x80
    1a2c:	04bf      	lsls	r7, r7, #18
    1a2e:	0cbf      	lsrs	r7, r7, #18
    1a30:	4338      	orrs	r0, r7
    1a32:	6168      	str	r0, [r5, #20]
    1a34:	7173      	strb	r3, [r6, #5]
	bank->STATUS_BK.reg     = 0;
    1a36:	76ac      	strb	r4, [r5, #26]
    1a38:	e7e3      	b.n	1a02 <_usb_d_dev_ep_enable+0xb2>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1a3a:	4010      	ands	r0, r2
    1a3c:	1e04      	subs	r4, r0, #0
    1a3e:	d117      	bne.n	1a70 <_usb_d_dev_ep_enable+0x120>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1a40:	075b      	lsls	r3, r3, #29
    1a42:	0f5b      	lsrs	r3, r3, #29
    1a44:	4313      	orrs	r3, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a46:	7073      	strb	r3, [r6, #1]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a48:	8a3f      	ldrh	r7, [r7, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a4a:	4b0d      	ldr	r3, [pc, #52]	; (1a80 <_usb_d_dev_ep_enable+0x130>)
    1a4c:	0038      	movs	r0, r7
    1a4e:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a50:	4a0c      	ldr	r2, [pc, #48]	; (1a84 <_usb_d_dev_ep_enable+0x134>)
    1a52:	03bb      	lsls	r3, r7, #14
    1a54:	4013      	ands	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a56:	22e0      	movs	r2, #224	; 0xe0
    1a58:	0700      	lsls	r0, r0, #28
    1a5a:	05d2      	lsls	r2, r2, #23
    1a5c:	4010      	ands	r0, r2
    1a5e:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a60:	2340      	movs	r3, #64	; 0x40
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a62:	6068      	str	r0, [r5, #4]
    1a64:	71b3      	strb	r3, [r6, #6]
	bank->STATUS_BK.reg     = 0;
    1a66:	72ac      	strb	r4, [r5, #10]
    1a68:	e7cb      	b.n	1a02 <_usb_d_dev_ep_enable+0xb2>
		return -USB_ERR_PARAM;
    1a6a:	2012      	movs	r0, #18
			return -USB_ERR_REDO;
    1a6c:	4240      	negs	r0, r0
    1a6e:	e7c9      	b.n	1a04 <_usb_d_dev_ep_enable+0xb4>
    1a70:	2014      	movs	r0, #20
    1a72:	e7fb      	b.n	1a6c <_usb_d_dev_ep_enable+0x11c>
    1a74:	000010f9 	.word	0x000010f9
    1a78:	410050ff 	.word	0x410050ff
    1a7c:	20000490 	.word	0x20000490
    1a80:	000016a9 	.word	0x000016a9
    1a84:	0fffc000 	.word	0x0fffc000
    1a88:	f0003fff 	.word	0xf0003fff

00001a8c <_usb_d_dev_ep_stall>:
{
    1a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1a8e:	0007      	movs	r7, r0
    1a90:	250f      	movs	r5, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    1a92:	09c4      	lsrs	r4, r0, #7
	uint8_t               epn = USB_EP_GET_N(ep);
    1a94:	402f      	ands	r7, r5
{
    1a96:	000e      	movs	r6, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1a98:	0038      	movs	r0, r7
    1a9a:	0021      	movs	r1, r4
    1a9c:	4b2b      	ldr	r3, [pc, #172]	; (1b4c <_usb_d_dev_ep_stall+0xc0>)
    1a9e:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    1aa0:	2f02      	cmp	r7, #2
    1aa2:	d84f      	bhi.n	1b44 <_usb_d_dev_ep_stall+0xb8>
	if (USB_EP_STALL_SET == ctrl) {
    1aa4:	2e01      	cmp	r6, #1
    1aa6:	d115      	bne.n	1ad4 <_usb_d_dev_ep_stall+0x48>
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1aa8:	2210      	movs	r2, #16
    1aaa:	40a2      	lsls	r2, r4
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1aac:	7c83      	ldrb	r3, [r0, #18]
    1aae:	4928      	ldr	r1, [pc, #160]	; (1b50 <_usb_d_dev_ep_stall+0xc4>)
    1ab0:	401d      	ands	r5, r3
    1ab2:	016b      	lsls	r3, r5, #5
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1ab4:	b2d2      	uxtb	r2, r2
    1ab6:	185b      	adds	r3, r3, r1
    1ab8:	715a      	strb	r2, [r3, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1aba:	2320      	movs	r3, #32
    1abc:	40a3      	lsls	r3, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1abe:	4a25      	ldr	r2, [pc, #148]	; (1b54 <_usb_d_dev_ep_stall+0xc8>)
    1ac0:	016d      	lsls	r5, r5, #5
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1ac2:	b2db      	uxtb	r3, r3
    1ac4:	18ad      	adds	r5, r5, r2
    1ac6:	72ab      	strb	r3, [r5, #10]
	ept->flags.bits.is_stalled = 1;
    1ac8:	2308      	movs	r3, #8
    1aca:	7cc2      	ldrb	r2, [r0, #19]
    1acc:	4313      	orrs	r3, r2
    1ace:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1ad0:	2000      	movs	r0, #0
}
    1ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1ad4:	7c83      	ldrb	r3, [r0, #18]
	} else if (USB_EP_STALL_CLR == ctrl) {
    1ad6:	2e00      	cmp	r6, #0
    1ad8:	d129      	bne.n	1b2e <_usb_d_dev_ep_stall+0xa2>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1ada:	402b      	ands	r3, r5
    1adc:	4a1e      	ldr	r2, [pc, #120]	; (1b58 <_usb_d_dev_ep_stall+0xcc>)
    1ade:	015b      	lsls	r3, r3, #5
    1ae0:	1899      	adds	r1, r3, r2
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1ae2:	4a1c      	ldr	r2, [pc, #112]	; (1b54 <_usb_d_dev_ep_stall+0xc8>)
    1ae4:	189b      	adds	r3, r3, r2
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1ae6:	2210      	movs	r2, #16
    1ae8:	40a2      	lsls	r2, r4
    1aea:	79dd      	ldrb	r5, [r3, #7]
	if (!is_stalled) {
    1aec:	422a      	tst	r2, r5
    1aee:	d0ef      	beq.n	1ad0 <_usb_d_dev_ep_stall+0x44>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1af0:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1af2:	715a      	strb	r2, [r3, #5]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1af4:	2220      	movs	r2, #32
    1af6:	40a2      	lsls	r2, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1af8:	b2d5      	uxtb	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1afa:	725d      	strb	r5, [r3, #9]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1afc:	7a1e      	ldrb	r6, [r3, #8]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1afe:	4232      	tst	r2, r6
    1b00:	d004      	beq.n	1b0c <_usb_d_dev_ep_stall+0x80>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1b02:	2201      	movs	r2, #1
    1b04:	40a2      	lsls	r2, r4
    1b06:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b08:	721d      	strb	r5, [r3, #8]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b0a:	715a      	strb	r2, [r3, #5]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1b0c:	2307      	movs	r3, #7
    1b0e:	7cc2      	ldrb	r2, [r0, #19]
    1b10:	4013      	ands	r3, r2
    1b12:	2b01      	cmp	r3, #1
    1b14:	d108      	bne.n	1b28 <_usb_d_dev_ep_stall+0x9c>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1b16:	31ff      	adds	r1, #255	; 0xff
    1b18:	79cb      	ldrb	r3, [r1, #7]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1b1a:	2130      	movs	r1, #48	; 0x30
    1b1c:	400b      	ands	r3, r1
    1b1e:	d1d7      	bne.n	1ad0 <_usb_d_dev_ep_stall+0x44>
			ept->flags.bits.is_stalled = 0;
    1b20:	3928      	subs	r1, #40	; 0x28
    1b22:	438a      	bics	r2, r1
		ept->flags.bits.is_stalled = 0;
    1b24:	74c2      	strb	r2, [r0, #19]
    1b26:	e7d3      	b.n	1ad0 <_usb_d_dev_ep_stall+0x44>
    1b28:	2308      	movs	r3, #8
    1b2a:	439a      	bics	r2, r3
    1b2c:	e7fa      	b.n	1b24 <_usb_d_dev_ep_stall+0x98>
    1b2e:	401d      	ands	r5, r3
    1b30:	4b07      	ldr	r3, [pc, #28]	; (1b50 <_usb_d_dev_ep_stall+0xc4>)
    1b32:	016d      	lsls	r5, r5, #5
    1b34:	18ed      	adds	r5, r5, r3
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1b36:	2310      	movs	r3, #16
    1b38:	40a3      	lsls	r3, r4
    1b3a:	79a8      	ldrb	r0, [r5, #6]
    1b3c:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    1b3e:	1e43      	subs	r3, r0, #1
    1b40:	4198      	sbcs	r0, r3
    1b42:	e7c6      	b.n	1ad2 <_usb_d_dev_ep_stall+0x46>
		return -USB_ERR_PARAM;
    1b44:	2012      	movs	r0, #18
    1b46:	4240      	negs	r0, r0
    1b48:	e7c3      	b.n	1ad2 <_usb_d_dev_ep_stall+0x46>
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	000010f9 	.word	0x000010f9
    1b50:	41005100 	.word	0x41005100
    1b54:	410050ff 	.word	0x410050ff
    1b58:	41005000 	.word	0x41005000

00001b5c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
    1b5e:	230f      	movs	r3, #15
    1b60:	4018      	ands	r0, r3
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1b62:	4b11      	ldr	r3, [pc, #68]	; (1ba8 <_usb_d_dev_ep_read_req+0x4c>)
    1b64:	0144      	lsls	r4, r0, #5
    1b66:	3330      	adds	r3, #48	; 0x30
    1b68:	191b      	adds	r3, r3, r4
{
    1b6a:	000f      	movs	r7, r1
	uint32_t           addr  = bank[0].ADDR.reg;
    1b6c:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1b6e:	685d      	ldr	r5, [r3, #4]
    1b70:	04ad      	lsls	r5, r5, #18
    1b72:	0cad      	lsrs	r5, r5, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1b74:	2802      	cmp	r0, #2
    1b76:	d812      	bhi.n	1b9e <_usb_d_dev_ep_read_req+0x42>
    1b78:	2f00      	cmp	r7, #0
    1b7a:	d010      	beq.n	1b9e <_usb_d_dev_ep_read_req+0x42>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1b7c:	4b0b      	ldr	r3, [pc, #44]	; (1bac <_usb_d_dev_ep_read_req+0x50>)
    1b7e:	18e4      	adds	r4, r4, r3
    1b80:	7863      	ldrb	r3, [r4, #1]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1b82:	2b11      	cmp	r3, #17
    1b84:	d10e      	bne.n	1ba4 <_usb_d_dev_ep_read_req+0x48>
	tmp &= mask;
    1b86:	2610      	movs	r6, #16
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1b88:	7a23      	ldrb	r3, [r4, #8]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1b8a:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1b8c:	4233      	tst	r3, r6
    1b8e:	d005      	beq.n	1b9c <_usb_d_dev_ep_read_req+0x40>
	}
	memcpy(req_buf, (void *)addr, 8);
    1b90:	2208      	movs	r2, #8
    1b92:	0038      	movs	r0, r7
    1b94:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <_usb_d_dev_ep_read_req+0x54>)
    1b96:	4798      	blx	r3
	_usbd_ep_ack_setup(epn);

	return bytes;
    1b98:	0028      	movs	r0, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1b9a:	7226      	strb	r6, [r4, #8]
}
    1b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_PARAM;
    1b9e:	2012      	movs	r0, #18
		return -USB_ERR_FUNC;
    1ba0:	4240      	negs	r0, r0
    1ba2:	e7fb      	b.n	1b9c <_usb_d_dev_ep_read_req+0x40>
    1ba4:	2013      	movs	r0, #19
    1ba6:	e7fb      	b.n	1ba0 <_usb_d_dev_ep_read_req+0x44>
    1ba8:	20000490 	.word	0x20000490
    1bac:	410050ff 	.word	0x410050ff
    1bb0:	00002ba1 	.word	0x00002ba1

00001bb4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1bb6:	250f      	movs	r5, #15
    1bb8:	7a03      	ldrb	r3, [r0, #8]
{
    1bba:	b087      	sub	sp, #28
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1bbc:	401d      	ands	r5, r3
    1bbe:	b25b      	sxtb	r3, r3
    1bc0:	9301      	str	r3, [sp, #4]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1bc2:	0fdb      	lsrs	r3, r3, #31
    1bc4:	9303      	str	r3, [sp, #12]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1bc6:	0019      	movs	r1, r3
{
    1bc8:	0007      	movs	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1bca:	4b38      	ldr	r3, [pc, #224]	; (1cac <_usb_d_dev_ep_trans+0xf8>)
    1bcc:	0028      	movs	r0, r5
    1bce:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1bd0:	4a37      	ldr	r2, [pc, #220]	; (1cb0 <_usb_d_dev_ep_trans+0xfc>)
    1bd2:	8a03      	ldrh	r3, [r0, #16]
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    1bd4:	0004      	movs	r4, r0
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1bd6:	001e      	movs	r6, r3
    1bd8:	4293      	cmp	r3, r2
    1bda:	d001      	beq.n	1be0 <_usb_d_dev_ep_trans+0x2c>
    1bdc:	1e5e      	subs	r6, r3, #1
    1bde:	b2b6      	uxth	r6, r6
	bool     size_n_aligned = (trans->size & size_mask);
    1be0:	687a      	ldr	r2, [r7, #4]
    1be2:	4016      	ands	r6, r2
    1be4:	9602      	str	r6, [sp, #8]

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1be6:	2d02      	cmp	r5, #2
    1be8:	d85d      	bhi.n	1ca6 <_usb_d_dev_ep_trans+0xf2>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1bea:	683d      	ldr	r5, [r7, #0]
    1bec:	4931      	ldr	r1, [pc, #196]	; (1cb4 <_usb_d_dev_ep_trans+0x100>)
    1bee:	428d      	cmp	r5, r1
    1bf0:	d90b      	bls.n	1c0a <_usb_d_dev_ep_trans+0x56>
    1bf2:	4831      	ldr	r0, [pc, #196]	; (1cb8 <_usb_d_dev_ep_trans+0x104>)
    1bf4:	1951      	adds	r1, r2, r5
    1bf6:	4281      	cmp	r1, r0
    1bf8:	d807      	bhi.n	1c0a <_usb_d_dev_ep_trans+0x56>
    1bfa:	2103      	movs	r1, #3
    1bfc:	400d      	ands	r5, r1
    1bfe:	d104      	bne.n	1c0a <_usb_d_dev_ep_trans+0x56>
	    || (!dir && (trans->size < ept->size))) {
    1c00:	9901      	ldr	r1, [sp, #4]
    1c02:	2900      	cmp	r1, #0
    1c04:	db0e      	blt.n	1c24 <_usb_d_dev_ep_trans+0x70>
    1c06:	429a      	cmp	r2, r3
    1c08:	d206      	bcs.n	1c18 <_usb_d_dev_ep_trans+0x64>
		if (!ept->cache) {
    1c0a:	68e3      	ldr	r3, [r4, #12]
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    1c0c:	2501      	movs	r5, #1
		if (!ept->cache) {
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d108      	bne.n	1c24 <_usb_d_dev_ep_trans+0x70>
			return -USB_ERR_FUNC;
    1c12:	2013      	movs	r0, #19
		return -USB_ERR_PARAM;
    1c14:	4240      	negs	r0, r0
    1c16:	e015      	b.n	1c44 <_usb_d_dev_ep_trans+0x90>
	}
	if (!dir && size_n_aligned) {
    1c18:	9b02      	ldr	r3, [sp, #8]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d014      	beq.n	1c48 <_usb_d_dev_ep_trans+0x94>
		if (!ept->cache) {
    1c1e:	68e3      	ldr	r3, [r4, #12]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d040      	beq.n	1ca6 <_usb_d_dev_ep_trans+0xf2>
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1c24:	7ce3      	ldrb	r3, [r4, #19]
		return USB_HALTED;
    1c26:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1c28:	071b      	lsls	r3, r3, #28
    1c2a:	d40b      	bmi.n	1c44 <_usb_d_dev_ep_trans+0x90>
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    1c2c:	4b23      	ldr	r3, [pc, #140]	; (1cbc <_usb_d_dev_ep_trans+0x108>)
    1c2e:	a805      	add	r0, sp, #20
    1c30:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1c32:	7ce1      	ldrb	r1, [r4, #19]
    1c34:	2340      	movs	r3, #64	; 0x40
    1c36:	000e      	movs	r6, r1
    1c38:	4a21      	ldr	r2, [pc, #132]	; (1cc0 <_usb_d_dev_ep_trans+0x10c>)
    1c3a:	401e      	ands	r6, r3
    1c3c:	d006      	beq.n	1c4c <_usb_d_dev_ep_trans+0x98>
		atomic_leave_critical(&flags);
    1c3e:	a805      	add	r0, sp, #20
    1c40:	4790      	blx	r2
		return USB_BUSY;
    1c42:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1c44:	b007      	add	sp, #28
    1c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    1c48:	9d02      	ldr	r5, [sp, #8]
    1c4a:	e7eb      	b.n	1c24 <_usb_d_dev_ep_trans+0x70>
	ept->flags.bits.is_busy = 1;
    1c4c:	430b      	orrs	r3, r1
    1c4e:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    1c50:	a805      	add	r0, sp, #20
    1c52:	4790      	blx	r2
	ept->flags.bits.dir       = dir;
    1c54:	217f      	movs	r1, #127	; 0x7f
	ept->trans_buf   = trans->buf;
    1c56:	683b      	ldr	r3, [r7, #0]
    1c58:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    1c5a:	687b      	ldr	r3, [r7, #4]
	ept->trans_count = 0;
    1c5c:	60a6      	str	r6, [r4, #8]
	ept->trans_size  = trans->size;
    1c5e:	6063      	str	r3, [r4, #4]
	ept->flags.bits.dir       = dir;
    1c60:	9b03      	ldr	r3, [sp, #12]
    1c62:	01da      	lsls	r2, r3, #7
    1c64:	7ce3      	ldrb	r3, [r4, #19]
    1c66:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1c68:	4313      	orrs	r3, r2
    1c6a:	0169      	lsls	r1, r5, #5
    1c6c:	001d      	movs	r5, r3
    1c6e:	2320      	movs	r3, #32
    1c70:	439d      	bics	r5, r3
    1c72:	430d      	orrs	r5, r1
    1c74:	74e5      	strb	r5, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1c76:	7a7b      	ldrb	r3, [r7, #9]
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d003      	beq.n	1c84 <_usb_d_dev_ep_trans+0xd0>
    1c7c:	9e02      	ldr	r6, [sp, #8]
    1c7e:	4273      	negs	r3, r6
    1c80:	415e      	adcs	r6, r3
    1c82:	b2f6      	uxtb	r6, r6
    1c84:	2210      	movs	r2, #16
    1c86:	7ce3      	ldrb	r3, [r4, #19]
    1c88:	0136      	lsls	r6, r6, #4
    1c8a:	4393      	bics	r3, r2
    1c8c:	431e      	orrs	r6, r3
	if (dir) {
    1c8e:	9b01      	ldr	r3, [sp, #4]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1c90:	74e6      	strb	r6, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    1c92:	2100      	movs	r1, #0
    1c94:	0020      	movs	r0, r4
	if (dir) {
    1c96:	2b00      	cmp	r3, #0
    1c98:	da03      	bge.n	1ca2 <_usb_d_dev_ep_trans+0xee>
		_usb_d_dev_in_next(ept, false);
    1c9a:	4b0a      	ldr	r3, [pc, #40]	; (1cc4 <_usb_d_dev_ep_trans+0x110>)
		_usb_d_dev_out_next(ept, false);
    1c9c:	4798      	blx	r3
	return ERR_NONE;
    1c9e:	2000      	movs	r0, #0
    1ca0:	e7d0      	b.n	1c44 <_usb_d_dev_ep_trans+0x90>
		_usb_d_dev_out_next(ept, false);
    1ca2:	4b09      	ldr	r3, [pc, #36]	; (1cc8 <_usb_d_dev_ep_trans+0x114>)
    1ca4:	e7fa      	b.n	1c9c <_usb_d_dev_ep_trans+0xe8>
		return -USB_ERR_PARAM;
    1ca6:	2012      	movs	r0, #18
    1ca8:	e7b4      	b.n	1c14 <_usb_d_dev_ep_trans+0x60>
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	000010f9 	.word	0x000010f9
    1cb0:	000003ff 	.word	0x000003ff
    1cb4:	1fffffff 	.word	0x1fffffff
    1cb8:	20000fff 	.word	0x20000fff
    1cbc:	00000381 	.word	0x00000381
    1cc0:	0000038f 	.word	0x0000038f
    1cc4:	00001365 	.word	0x00001365
    1cc8:	000014d5 	.word	0x000014d5

00001ccc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1ccc:	2900      	cmp	r1, #0
    1cce:	d100      	bne.n	1cd2 <_usb_d_dev_register_callback+0x6>
    1cd0:	4905      	ldr	r1, [pc, #20]	; (1ce8 <_usb_d_dev_register_callback+0x1c>)
	if (type == USB_D_CB_EVENT) {
    1cd2:	2801      	cmp	r0, #1
    1cd4:	d102      	bne.n	1cdc <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1cd6:	4b05      	ldr	r3, [pc, #20]	; (1cec <_usb_d_dev_register_callback+0x20>)
    1cd8:	6059      	str	r1, [r3, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
    1cda:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    1cdc:	2800      	cmp	r0, #0
    1cde:	d1fc      	bne.n	1cda <_usb_d_dev_register_callback+0xe>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1ce0:	4b02      	ldr	r3, [pc, #8]	; (1cec <_usb_d_dev_register_callback+0x20>)
    1ce2:	6019      	str	r1, [r3, #0]
}
    1ce4:	e7f9      	b.n	1cda <_usb_d_dev_register_callback+0xe>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	000010d1 	.word	0x000010d1
    1cec:	20000290 	.word	0x20000290

00001cf0 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1cf0:	2900      	cmp	r1, #0
    1cf2:	d100      	bne.n	1cf6 <_usb_d_dev_register_ep_callback+0x6>
    1cf4:	4907      	ldr	r1, [pc, #28]	; (1d14 <_usb_d_dev_register_ep_callback+0x24>)
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1cf6:	2800      	cmp	r0, #0
    1cf8:	d102      	bne.n	1d00 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1cfa:	4b07      	ldr	r3, [pc, #28]	; (1d18 <_usb_d_dev_register_ep_callback+0x28>)
    1cfc:	6099      	str	r1, [r3, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
    1cfe:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1d00:	2801      	cmp	r0, #1
    1d02:	d102      	bne.n	1d0a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1d04:	4b04      	ldr	r3, [pc, #16]	; (1d18 <_usb_d_dev_register_ep_callback+0x28>)
    1d06:	60d9      	str	r1, [r3, #12]
    1d08:	e7f9      	b.n	1cfe <_usb_d_dev_register_ep_callback+0xe>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1d0a:	2802      	cmp	r0, #2
    1d0c:	d1f7      	bne.n	1cfe <_usb_d_dev_register_ep_callback+0xe>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1d0e:	4b02      	ldr	r3, [pc, #8]	; (1d18 <_usb_d_dev_register_ep_callback+0x28>)
    1d10:	6119      	str	r1, [r3, #16]
}
    1d12:	e7f4      	b.n	1cfe <_usb_d_dev_register_ep_callback+0xe>
    1d14:	000010d1 	.word	0x000010d1
    1d18:	20000290 	.word	0x20000290

00001d1c <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1d1e:	4b65      	ldr	r3, [pc, #404]	; (1eb4 <USB_Handler+0x198>)
    1d20:	4d65      	ldr	r5, [pc, #404]	; (1eb8 <USB_Handler+0x19c>)
    1d22:	8c1a      	ldrh	r2, [r3, #32]
    1d24:	b292      	uxth	r2, r2
    1d26:	9201      	str	r2, [sp, #4]
	if (0 == epint) {
    1d28:	2a00      	cmp	r2, #0
    1d2a:	d156      	bne.n	1dda <USB_Handler+0xbe>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1d2c:	8b9a      	ldrh	r2, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1d2e:	8b1f      	ldrh	r7, [r3, #24]
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1d30:	2004      	movs	r0, #4
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1d32:	4017      	ands	r7, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1d34:	003a      	movs	r2, r7
    1d36:	4002      	ands	r2, r0
    1d38:	d003      	beq.n	1d42 <USB_Handler+0x26>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1d3a:	8398      	strh	r0, [r3, #28]
	dev_inst.callbacks.sof();
    1d3c:	682b      	ldr	r3, [r5, #0]
    1d3e:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1d40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1d42:	2180      	movs	r1, #128	; 0x80
    1d44:	0089      	lsls	r1, r1, #2
    1d46:	4039      	ands	r1, r7
    1d48:	d01f      	beq.n	1d8a <USB_Handler+0x6e>
    1d4a:	495c      	ldr	r1, [pc, #368]	; (1ebc <USB_Handler+0x1a0>)
    1d4c:	8399      	strh	r1, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1d4e:	8299      	strh	r1, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1d50:	3992      	subs	r1, #146	; 0x92
    1d52:	39ff      	subs	r1, #255	; 0xff
    1d54:	8319      	strh	r1, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1d56:	4b5a      	ldr	r3, [pc, #360]	; (1ec0 <USB_Handler+0x1a4>)
    1d58:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    1d5a:	0709      	lsls	r1, r1, #28
    1d5c:	0f09      	lsrs	r1, r1, #28
    1d5e:	2903      	cmp	r1, #3
    1d60:	d008      	beq.n	1d74 <USB_Handler+0x58>
    1d62:	0019      	movs	r1, r3
    1d64:	3158      	adds	r1, #88	; 0x58
    1d66:	8808      	ldrh	r0, [r1, #0]
	uint32_t lpm_variable = 0;
    1d68:	0011      	movs	r1, r2
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1d6a:	0700      	lsls	r0, r0, #28
    1d6c:	0f00      	lsrs	r0, r0, #28
    1d6e:	2803      	cmp	r0, #3
    1d70:	d107      	bne.n	1d82 <USB_Handler+0x66>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1d72:	2201      	movs	r2, #1
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1d74:	0152      	lsls	r2, r2, #5
    1d76:	189a      	adds	r2, r3, r2
			bank->EXTREG.reg = 0;
    1d78:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1d7a:	8f11      	ldrh	r1, [r2, #56]	; 0x38
			bank->EXTREG.reg = 0;
    1d7c:	8713      	strh	r3, [r2, #56]	; 0x38
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1d7e:	0449      	lsls	r1, r1, #17
    1d80:	0d49      	lsrs	r1, r1, #21
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1d82:	2003      	movs	r0, #3
    1d84:	686b      	ldr	r3, [r5, #4]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1d86:	4798      	blx	r3
    1d88:	e7da      	b.n	1d40 <USB_Handler+0x24>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1d8a:	2280      	movs	r2, #128	; 0x80
    1d8c:	003e      	movs	r6, r7
    1d8e:	4016      	ands	r6, r2
    1d90:	d003      	beq.n	1d9a <USB_Handler+0x7e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1d92:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1d94:	686b      	ldr	r3, [r5, #4]
    1d96:	2005      	movs	r0, #5
    1d98:	e7f5      	b.n	1d86 <USB_Handler+0x6a>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1d9a:	2270      	movs	r2, #112	; 0x70
    1d9c:	003c      	movs	r4, r7
    1d9e:	4014      	ands	r4, r2
    1da0:	d009      	beq.n	1db6 <USB_Handler+0x9a>
    1da2:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1da4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1da6:	4a45      	ldr	r2, [pc, #276]	; (1ebc <USB_Handler+0x1a0>)
    1da8:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    1daa:	4b46      	ldr	r3, [pc, #280]	; (1ec4 <USB_Handler+0x1a8>)
    1dac:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1dae:	686b      	ldr	r3, [r5, #4]
    1db0:	0031      	movs	r1, r6
    1db2:	2002      	movs	r0, #2
    1db4:	e7e7      	b.n	1d86 <USB_Handler+0x6a>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1db6:	2608      	movs	r6, #8
    1db8:	0039      	movs	r1, r7
    1dba:	4031      	ands	r1, r6
    1dbc:	d00b      	beq.n	1dd6 <USB_Handler+0xba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1dbe:	4942      	ldr	r1, [pc, #264]	; (1ec8 <USB_Handler+0x1ac>)
    1dc0:	704c      	strb	r4, [r1, #1]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1dc2:	839e      	strh	r6, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1dc4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1dc6:	4a3d      	ldr	r2, [pc, #244]	; (1ebc <USB_Handler+0x1a0>)
    1dc8:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1dca:	4b40      	ldr	r3, [pc, #256]	; (1ecc <USB_Handler+0x1b0>)
    1dcc:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1dce:	686b      	ldr	r3, [r5, #4]
    1dd0:	0021      	movs	r1, r4
    1dd2:	2001      	movs	r0, #1
    1dd4:	e7d7      	b.n	1d86 <USB_Handler+0x6a>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1dd6:	07fc      	lsls	r4, r7, #31
    1dd8:	d426      	bmi.n	1e28 <USB_Handler+0x10c>
    1dda:	002c      	movs	r4, r5
	uint32_t lpm_variable = 0;
    1ddc:	2700      	movs	r7, #0
	if (!(epint & (1u << epn))) {
    1dde:	2601      	movs	r6, #1
    1de0:	3414      	adds	r4, #20
		if (ept->ep == 0xFF) {
    1de2:	7ca2      	ldrb	r2, [r4, #18]
    1de4:	2aff      	cmp	r2, #255	; 0xff
    1de6:	d03e      	beq.n	1e66 <USB_Handler+0x14a>
	if (!(epint & (1u << epn))) {
    1de8:	230f      	movs	r3, #15
    1dea:	401a      	ands	r2, r3
    1dec:	0033      	movs	r3, r6
    1dee:	4093      	lsls	r3, r2
    1df0:	9901      	ldr	r1, [sp, #4]
    1df2:	4219      	tst	r1, r3
    1df4:	d037      	beq.n	1e66 <USB_Handler+0x14a>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1df6:	4936      	ldr	r1, [pc, #216]	; (1ed0 <USB_Handler+0x1b4>)
    1df8:	0153      	lsls	r3, r2, #5
    1dfa:	185b      	adds	r3, r3, r1
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1dfc:	4932      	ldr	r1, [pc, #200]	; (1ec8 <USB_Handler+0x1ac>)
    1dfe:	0152      	lsls	r2, r2, #5
    1e00:	1852      	adds	r2, r2, r1
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1e02:	781b      	ldrb	r3, [r3, #0]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1e04:	7a92      	ldrb	r2, [r2, #10]
	flags &= mask;
    1e06:	4013      	ands	r3, r2
	if (flags) {
    1e08:	d02d      	beq.n	1e66 <USB_Handler+0x14a>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1e0a:	2214      	movs	r2, #20
    1e0c:	2147      	movs	r1, #71	; 0x47
    1e0e:	437a      	muls	r2, r7
    1e10:	18aa      	adds	r2, r5, r2
    1e12:	3210      	adds	r2, #16
    1e14:	7dd2      	ldrb	r2, [r2, #23]
    1e16:	4011      	ands	r1, r2
    1e18:	2901      	cmp	r1, #1
    1e1a:	d115      	bne.n	1e48 <USB_Handler+0x12c>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1e1c:	06da      	lsls	r2, r3, #27
    1e1e:	d509      	bpl.n	1e34 <USB_Handler+0x118>
			_usb_d_dev_handle_setup(ept);
    1e20:	0020      	movs	r0, r4
    1e22:	4b2c      	ldr	r3, [pc, #176]	; (1ed4 <USB_Handler+0x1b8>)
    1e24:	4798      	blx	r3
    1e26:	e01e      	b.n	1e66 <USB_Handler+0x14a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1e28:	4c24      	ldr	r4, [pc, #144]	; (1ebc <USB_Handler+0x1a0>)
    1e2a:	839c      	strh	r4, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1e2c:	829c      	strh	r4, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1e2e:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1e30:	686b      	ldr	r3, [r5, #4]
    1e32:	e7a8      	b.n	1d86 <USB_Handler+0x6a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1e34:	2140      	movs	r1, #64	; 0x40
    1e36:	4019      	ands	r1, r3
    1e38:	d001      	beq.n	1e3e <USB_Handler+0x122>
		_usb_d_dev_handle_stall(ept, 1);
    1e3a:	0031      	movs	r1, r6
    1e3c:	e001      	b.n	1e42 <USB_Handler+0x126>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1e3e:	069b      	lsls	r3, r3, #26
    1e40:	d511      	bpl.n	1e66 <USB_Handler+0x14a>
		_usb_d_dev_handle_stall(ept, 0);
    1e42:	0020      	movs	r0, r4
    1e44:	4b24      	ldr	r3, [pc, #144]	; (1ed8 <USB_Handler+0x1bc>)
    1e46:	e00d      	b.n	1e64 <USB_Handler+0x148>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1e48:	b251      	sxtb	r1, r2
    1e4a:	2900      	cmp	r1, #0
    1e4c:	da1a      	bge.n	1e84 <USB_Handler+0x168>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1e4e:	0659      	lsls	r1, r3, #25
    1e50:	d4f3      	bmi.n	1e3a <USB_Handler+0x11e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1e52:	0719      	lsls	r1, r3, #28
    1e54:	d501      	bpl.n	1e5a <USB_Handler+0x13e>
			_usb_d_dev_handle_trfail(ept, 1);
    1e56:	0031      	movs	r1, r6
    1e58:	e01b      	b.n	1e92 <USB_Handler+0x176>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1e5a:	0799      	lsls	r1, r3, #30
    1e5c:	d508      	bpl.n	1e70 <USB_Handler+0x154>
		_usb_d_dev_in_next(ept, true);
    1e5e:	0031      	movs	r1, r6
    1e60:	0020      	movs	r0, r4
    1e62:	4b1e      	ldr	r3, [pc, #120]	; (1edc <USB_Handler+0x1c0>)
			_usb_d_dev_handle_trfail(ept, 1);
    1e64:	4798      	blx	r3
    1e66:	3701      	adds	r7, #1
    1e68:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1e6a:	2f1b      	cmp	r7, #27
    1e6c:	d1b9      	bne.n	1de2 <USB_Handler+0xc6>
    1e6e:	e767      	b.n	1d40 <USB_Handler+0x24>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1e70:	2107      	movs	r1, #7
    1e72:	400a      	ands	r2, r1
    1e74:	2a01      	cmp	r2, #1
    1e76:	d1f6      	bne.n	1e66 <USB_Handler+0x14a>
			_usb_d_dev_handle_trfail(ept, 0);
    1e78:	2100      	movs	r1, #0
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1e7a:	075a      	lsls	r2, r3, #29
    1e7c:	d409      	bmi.n	1e92 <USB_Handler+0x176>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1e7e:	06db      	lsls	r3, r3, #27
    1e80:	d5f1      	bpl.n	1e66 <USB_Handler+0x14a>
    1e82:	e7cd      	b.n	1e20 <USB_Handler+0x104>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1e84:	2120      	movs	r1, #32
    1e86:	4019      	ands	r1, r3
    1e88:	d001      	beq.n	1e8e <USB_Handler+0x172>
		_usb_d_dev_handle_stall(ept, 0);
    1e8a:	2100      	movs	r1, #0
    1e8c:	e7d9      	b.n	1e42 <USB_Handler+0x126>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1e8e:	0758      	lsls	r0, r3, #29
    1e90:	d502      	bpl.n	1e98 <USB_Handler+0x17c>
			_usb_d_dev_handle_trfail(ept, 1);
    1e92:	0020      	movs	r0, r4
    1e94:	4b12      	ldr	r3, [pc, #72]	; (1ee0 <USB_Handler+0x1c4>)
    1e96:	e7e5      	b.n	1e64 <USB_Handler+0x148>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1e98:	4233      	tst	r3, r6
    1e9a:	d003      	beq.n	1ea4 <USB_Handler+0x188>
		_usb_d_dev_out_next(ept, true);
    1e9c:	0031      	movs	r1, r6
    1e9e:	0020      	movs	r0, r4
    1ea0:	4b10      	ldr	r3, [pc, #64]	; (1ee4 <USB_Handler+0x1c8>)
    1ea2:	e7df      	b.n	1e64 <USB_Handler+0x148>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ea4:	2107      	movs	r1, #7
    1ea6:	400a      	ands	r2, r1
    1ea8:	2a01      	cmp	r2, #1
    1eaa:	d1dc      	bne.n	1e66 <USB_Handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1eac:	071a      	lsls	r2, r3, #28
    1eae:	d5e6      	bpl.n	1e7e <USB_Handler+0x162>
    1eb0:	e7d1      	b.n	1e56 <USB_Handler+0x13a>
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	41005000 	.word	0x41005000
    1eb8:	20000290 	.word	0x20000290
    1ebc:	00000201 	.word	0x00000201
    1ec0:	20000490 	.word	0x20000490
    1ec4:	000010d5 	.word	0x000010d5
    1ec8:	410050ff 	.word	0x410050ff
    1ecc:	00001325 	.word	0x00001325
    1ed0:	41005107 	.word	0x41005107
    1ed4:	00001115 	.word	0x00001115
    1ed8:	00001191 	.word	0x00001191
    1edc:	00001365 	.word	0x00001365
    1ee0:	00001241 	.word	0x00001241
    1ee4:	000014d5 	.word	0x000014d5

00001ee8 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eea:	0016      	movs	r6, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1eec:	780a      	ldrb	r2, [r1, #0]
{
    1eee:	b085      	sub	sp, #20
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1ef0:	0653      	lsls	r3, r2, #25
{
    1ef2:	9001      	str	r0, [sp, #4]
    1ef4:	000c      	movs	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1ef6:	0f9b      	lsrs	r3, r3, #30
    1ef8:	2b01      	cmp	r3, #1
    1efa:	d156      	bne.n	1faa <cdcdf_acm_req+0xc2>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1efc:	7963      	ldrb	r3, [r4, #5]
    1efe:	7909      	ldrb	r1, [r1, #4]
    1f00:	4d2c      	ldr	r5, [pc, #176]	; (1fb4 <cdcdf_acm_req+0xcc>)
    1f02:	021b      	lsls	r3, r3, #8
    1f04:	430b      	orrs	r3, r1
    1f06:	7829      	ldrb	r1, [r5, #0]
    1f08:	4299      	cmp	r1, r3
    1f0a:	d002      	beq.n	1f12 <cdcdf_acm_req+0x2a>
    1f0c:	7869      	ldrb	r1, [r5, #1]
    1f0e:	4299      	cmp	r1, r3
    1f10:	d14b      	bne.n	1faa <cdcdf_acm_req+0xc2>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1f12:	b252      	sxtb	r2, r2
    1f14:	2a00      	cmp	r2, #0
    1f16:	da12      	bge.n	1f3e <cdcdf_acm_req+0x56>
		return ERR_NONE;
    1f18:	2000      	movs	r0, #0
	if (USB_DATA_STAGE == stage) {
    1f1a:	2e01      	cmp	r6, #1
    1f1c:	d00d      	beq.n	1f3a <cdcdf_acm_req+0x52>
	switch (req->bRequest) {
    1f1e:	7863      	ldrb	r3, [r4, #1]
    1f20:	2b21      	cmp	r3, #33	; 0x21
    1f22:	d118      	bne.n	1f56 <cdcdf_acm_req+0x6e>
	uint16_t len = req->wLength;
    1f24:	79e2      	ldrb	r2, [r4, #7]
    1f26:	79a3      	ldrb	r3, [r4, #6]
    1f28:	0212      	lsls	r2, r2, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1f2a:	431a      	orrs	r2, r3
    1f2c:	2a07      	cmp	r2, #7
    1f2e:	d13f      	bne.n	1fb0 <cdcdf_acm_req+0xc8>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    1f30:	0003      	movs	r3, r0
    1f32:	1da9      	adds	r1, r5, #6
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1f34:	9801      	ldr	r0, [sp, #4]
    1f36:	4c20      	ldr	r4, [pc, #128]	; (1fb8 <cdcdf_acm_req+0xd0>)
    1f38:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1f3a:	b005      	add	sp, #20
    1f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t                   len      = req->wLength;
    1f3e:	79e3      	ldrb	r3, [r4, #7]
    1f40:	79a7      	ldrb	r7, [r4, #6]
    1f42:	021b      	lsls	r3, r3, #8
    1f44:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1f46:	4b1d      	ldr	r3, [pc, #116]	; (1fbc <cdcdf_acm_req+0xd4>)
    1f48:	4798      	blx	r3
	switch (req->bRequest) {
    1f4a:	7863      	ldrb	r3, [r4, #1]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1f4c:	0001      	movs	r1, r0
	switch (req->bRequest) {
    1f4e:	2b20      	cmp	r3, #32
    1f50:	d003      	beq.n	1f5a <cdcdf_acm_req+0x72>
    1f52:	2b22      	cmp	r3, #34	; 0x22
    1f54:	d01a      	beq.n	1f8c <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    1f56:	200d      	movs	r0, #13
    1f58:	e028      	b.n	1fac <cdcdf_acm_req+0xc4>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1f5a:	2f07      	cmp	r7, #7
    1f5c:	d128      	bne.n	1fb0 <cdcdf_acm_req+0xc8>
		if (USB_SETUP_STAGE == stage) {
    1f5e:	2e00      	cmp	r6, #0
    1f60:	d102      	bne.n	1f68 <cdcdf_acm_req+0x80>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1f62:	0033      	movs	r3, r6
    1f64:	003a      	movs	r2, r7
    1f66:	e7e5      	b.n	1f34 <cdcdf_acm_req+0x4c>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    1f68:	003a      	movs	r2, r7
    1f6a:	a802      	add	r0, sp, #8
    1f6c:	4c14      	ldr	r4, [pc, #80]	; (1fc0 <cdcdf_acm_req+0xd8>)
    1f6e:	47a0      	blx	r4
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1f70:	692b      	ldr	r3, [r5, #16]
    1f72:	2b00      	cmp	r3, #0
    1f74:	d105      	bne.n	1f82 <cdcdf_acm_req+0x9a>
				usbd_cdc_line_coding = line_coding_tmp;
    1f76:	1da8      	adds	r0, r5, #6
    1f78:	2207      	movs	r2, #7
    1f7a:	a902      	add	r1, sp, #8
    1f7c:	47a0      	blx	r4
		return ERR_NONE;
    1f7e:	2000      	movs	r0, #0
    1f80:	e7db      	b.n	1f3a <cdcdf_acm_req+0x52>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1f82:	a802      	add	r0, sp, #8
    1f84:	4798      	blx	r3
    1f86:	2800      	cmp	r0, #0
    1f88:	d1f5      	bne.n	1f76 <cdcdf_acm_req+0x8e>
    1f8a:	e7f8      	b.n	1f7e <cdcdf_acm_req+0x96>
		usbdc_xfer(0, NULL, 0, 0);
    1f8c:	2300      	movs	r3, #0
    1f8e:	4e0a      	ldr	r6, [pc, #40]	; (1fb8 <cdcdf_acm_req+0xd0>)
    1f90:	001a      	movs	r2, r3
    1f92:	0019      	movs	r1, r3
    1f94:	0018      	movs	r0, r3
    1f96:	47b0      	blx	r6
		if (NULL != cdcdf_acm_notify_state) {
    1f98:	696b      	ldr	r3, [r5, #20]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d0ef      	beq.n	1f7e <cdcdf_acm_req+0x96>
			cdcdf_acm_notify_state(req->wValue);
    1f9e:	78e0      	ldrb	r0, [r4, #3]
    1fa0:	78a2      	ldrb	r2, [r4, #2]
    1fa2:	0200      	lsls	r0, r0, #8
    1fa4:	4310      	orrs	r0, r2
    1fa6:	4798      	blx	r3
    1fa8:	e7e9      	b.n	1f7e <cdcdf_acm_req+0x96>
		return ERR_NOT_FOUND;
    1faa:	200a      	movs	r0, #10
			return ERR_INVALID_DATA;
    1fac:	4240      	negs	r0, r0
    1fae:	e7c4      	b.n	1f3a <cdcdf_acm_req+0x52>
    1fb0:	2001      	movs	r0, #1
    1fb2:	e7fb      	b.n	1fac <cdcdf_acm_req+0xc4>
    1fb4:	200005e0 	.word	0x200005e0
    1fb8:	0000231d 	.word	0x0000231d
    1fbc:	0000273d 	.word	0x0000273d
    1fc0:	00002ba1 	.word	0x00002ba1

00001fc4 <cdcdf_acm_ctrl>:
{
    1fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1fc6:	0015      	movs	r5, r2
	switch (ctrl) {
    1fc8:	2901      	cmp	r1, #1
    1fca:	d050      	beq.n	206e <cdcdf_acm_ctrl+0xaa>
    1fcc:	2900      	cmp	r1, #0
    1fce:	d004      	beq.n	1fda <cdcdf_acm_ctrl+0x16>
		return ERR_UNSUPPORTED_OP;
    1fd0:	201b      	movs	r0, #27
	switch (ctrl) {
    1fd2:	2902      	cmp	r1, #2
    1fd4:	d00a      	beq.n	1fec <cdcdf_acm_ctrl+0x28>
		return ERR_INVALID_ARG;
    1fd6:	200d      	movs	r0, #13
    1fd8:	e008      	b.n	1fec <cdcdf_acm_ctrl+0x28>
    1fda:	6883      	ldr	r3, [r0, #8]
	ifc = desc->sod;
    1fdc:	6810      	ldr	r0, [r2, #0]
    1fde:	9300      	str	r3, [sp, #0]
    1fe0:	001e      	movs	r6, r3
    1fe2:	3302      	adds	r3, #2
    1fe4:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    1fe6:	2800      	cmp	r0, #0
    1fe8:	d102      	bne.n	1ff0 <cdcdf_acm_ctrl+0x2c>
			return ERR_NOT_FOUND;
    1fea:	200a      	movs	r0, #10
				return ERR_NOT_INITIALIZED;
    1fec:	4240      	negs	r0, r0
    1fee:	e020      	b.n	2032 <cdcdf_acm_ctrl+0x6e>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1ff0:	2108      	movs	r1, #8
    1ff2:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    1ff4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1ff6:	438b      	bics	r3, r1
    1ff8:	2b02      	cmp	r3, #2
    1ffa:	d1f6      	bne.n	1fea <cdcdf_acm_ctrl+0x26>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    1ffc:	7833      	ldrb	r3, [r6, #0]
    1ffe:	429a      	cmp	r2, r3
    2000:	d05f      	beq.n	20c2 <cdcdf_acm_ctrl+0xfe>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2002:	2bff      	cmp	r3, #255	; 0xff
    2004:	d15f      	bne.n	20c6 <cdcdf_acm_ctrl+0x102>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2006:	7032      	strb	r2, [r6, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2008:	6869      	ldr	r1, [r5, #4]
    200a:	2205      	movs	r2, #5
    200c:	4b30      	ldr	r3, [pc, #192]	; (20d0 <cdcdf_acm_ctrl+0x10c>)
    200e:	4798      	blx	r3
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2010:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    2012:	d10f      	bne.n	2034 <cdcdf_acm_ctrl+0x70>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    2014:	6828      	ldr	r0, [r5, #0]
    2016:	2204      	movs	r2, #4
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2018:	7803      	ldrb	r3, [r0, #0]
    201a:	6869      	ldr	r1, [r5, #4]
    201c:	18c0      	adds	r0, r0, r3
    201e:	4b2c      	ldr	r3, [pc, #176]	; (20d0 <cdcdf_acm_ctrl+0x10c>)
    2020:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    2022:	9b01      	ldr	r3, [sp, #4]
    2024:	3601      	adds	r6, #1
    2026:	42b3      	cmp	r3, r6
    2028:	d1dd      	bne.n	1fe6 <cdcdf_acm_ctrl+0x22>
	_cdcdf_acm_funcd.enabled = true;
    202a:	2201      	movs	r2, #1
	return ERR_NONE;
    202c:	0020      	movs	r0, r4
	_cdcdf_acm_funcd.enabled = true;
    202e:	4b29      	ldr	r3, [pc, #164]	; (20d4 <cdcdf_acm_ctrl+0x110>)
    2030:	715a      	strb	r2, [r3, #5]
}
    2032:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	return (ptr[0] + (ptr[1] << 8));
    2034:	7963      	ldrb	r3, [r4, #5]
    2036:	7922      	ldrb	r2, [r4, #4]
    2038:	021b      	lsls	r3, r3, #8
			ep_desc.bEndpointAddress = ep[2];
    203a:	78a7      	ldrb	r7, [r4, #2]
    203c:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    203e:	b292      	uxth	r2, r2
    2040:	78e1      	ldrb	r1, [r4, #3]
    2042:	0038      	movs	r0, r7
    2044:	4b24      	ldr	r3, [pc, #144]	; (20d8 <cdcdf_acm_ctrl+0x114>)
    2046:	4798      	blx	r3
    2048:	2800      	cmp	r0, #0
    204a:	d13e      	bne.n	20ca <cdcdf_acm_ctrl+0x106>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    204c:	b27b      	sxtb	r3, r7
    204e:	4a23      	ldr	r2, [pc, #140]	; (20dc <cdcdf_acm_ctrl+0x118>)
    2050:	2b00      	cmp	r3, #0
    2052:	da09      	bge.n	2068 <cdcdf_acm_ctrl+0xa4>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2054:	70b7      	strb	r7, [r6, #2]
				usb_d_ep_enable(func_data->func_ep_out);
    2056:	0038      	movs	r0, r7
    2058:	4790      	blx	r2
			desc->sod = ep;
    205a:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    205c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    205e:	6869      	ldr	r1, [r5, #4]
    2060:	1820      	adds	r0, r4, r0
    2062:	4b1f      	ldr	r3, [pc, #124]	; (20e0 <cdcdf_acm_ctrl+0x11c>)
    2064:	4798      	blx	r3
    2066:	e7d3      	b.n	2010 <cdcdf_acm_ctrl+0x4c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    2068:	9b00      	ldr	r3, [sp, #0]
    206a:	711f      	strb	r7, [r3, #4]
    206c:	e7f3      	b.n	2056 <cdcdf_acm_ctrl+0x92>
    206e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2070:	2a00      	cmp	r2, #0
    2072:	d005      	beq.n	2080 <cdcdf_acm_ctrl+0xbc>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2074:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2076:	2208      	movs	r2, #8
    2078:	795b      	ldrb	r3, [r3, #5]
    207a:	4393      	bics	r3, r2
    207c:	2b02      	cmp	r3, #2
    207e:	d1b4      	bne.n	1fea <cdcdf_acm_ctrl+0x26>
		if (func_data->func_iface[i] == 0xFF) {
    2080:	7823      	ldrb	r3, [r4, #0]
    2082:	2bff      	cmp	r3, #255	; 0xff
    2084:	d007      	beq.n	2096 <cdcdf_acm_ctrl+0xd2>
			func_data->func_iface[i] = 0xFF;
    2086:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    2088:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    208a:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    208c:	42a8      	cmp	r0, r5
    208e:	d002      	beq.n	2096 <cdcdf_acm_ctrl+0xd2>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2090:	4b14      	ldr	r3, [pc, #80]	; (20e4 <cdcdf_acm_ctrl+0x120>)
    2092:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2094:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2096:	7863      	ldrb	r3, [r4, #1]
    2098:	2bff      	cmp	r3, #255	; 0xff
    209a:	d007      	beq.n	20ac <cdcdf_acm_ctrl+0xe8>
			func_data->func_iface[i] = 0xFF;
    209c:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    209e:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    20a0:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    20a2:	42a8      	cmp	r0, r5
    20a4:	d002      	beq.n	20ac <cdcdf_acm_ctrl+0xe8>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    20a6:	4b0f      	ldr	r3, [pc, #60]	; (20e4 <cdcdf_acm_ctrl+0x120>)
    20a8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    20aa:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    20ac:	7920      	ldrb	r0, [r4, #4]
    20ae:	28ff      	cmp	r0, #255	; 0xff
    20b0:	d003      	beq.n	20ba <cdcdf_acm_ctrl+0xf6>
		usb_d_ep_deinit(func_data->func_ep_out);
    20b2:	4b0c      	ldr	r3, [pc, #48]	; (20e4 <cdcdf_acm_ctrl+0x120>)
    20b4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    20b6:	23ff      	movs	r3, #255	; 0xff
    20b8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    20ba:	2000      	movs	r0, #0
    20bc:	4b05      	ldr	r3, [pc, #20]	; (20d4 <cdcdf_acm_ctrl+0x110>)
    20be:	7158      	strb	r0, [r3, #5]
    20c0:	e7b7      	b.n	2032 <cdcdf_acm_ctrl+0x6e>
				return ERR_ALREADY_INITIALIZED;
    20c2:	2012      	movs	r0, #18
    20c4:	e792      	b.n	1fec <cdcdf_acm_ctrl+0x28>
				return ERR_NO_RESOURCE;
    20c6:	201c      	movs	r0, #28
    20c8:	e790      	b.n	1fec <cdcdf_acm_ctrl+0x28>
				return ERR_NOT_INITIALIZED;
    20ca:	2014      	movs	r0, #20
    20cc:	e78e      	b.n	1fec <cdcdf_acm_ctrl+0x28>
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	0000275d 	.word	0x0000275d
    20d4:	200005e0 	.word	0x200005e0
    20d8:	00000771 	.word	0x00000771
    20dc:	00000801 	.word	0x00000801
    20e0:	00002777 	.word	0x00002777
    20e4:	000007d5 	.word	0x000007d5

000020e8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    20e8:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <cdcdf_acm_init+0x2c>)
    20ec:	4798      	blx	r3
    20ee:	2801      	cmp	r0, #1
    20f0:	d80c      	bhi.n	210c <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    20f2:	4809      	ldr	r0, [pc, #36]	; (2118 <cdcdf_acm_init+0x30>)
    20f4:	4b09      	ldr	r3, [pc, #36]	; (211c <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    20f6:	6200      	str	r0, [r0, #32]
	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    20f8:	61c3      	str	r3, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
    20fa:	3018      	adds	r0, #24
    20fc:	4b08      	ldr	r3, [pc, #32]	; (2120 <cdcdf_acm_init+0x38>)
    20fe:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2100:	2001      	movs	r0, #1
    2102:	4908      	ldr	r1, [pc, #32]	; (2124 <cdcdf_acm_init+0x3c>)
    2104:	4b08      	ldr	r3, [pc, #32]	; (2128 <cdcdf_acm_init+0x40>)
    2106:	4798      	blx	r3
	return ERR_NONE;
    2108:	2000      	movs	r0, #0
}
    210a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    210c:	2011      	movs	r0, #17
    210e:	4240      	negs	r0, r0
    2110:	e7fb      	b.n	210a <cdcdf_acm_init+0x22>
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	00002749 	.word	0x00002749
    2118:	200005e0 	.word	0x200005e0
    211c:	00001fc5 	.word	0x00001fc5
    2120:	000026e5 	.word	0x000026e5
    2124:	20000000 	.word	0x20000000
    2128:	00002655 	.word	0x00002655

0000212c <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
    212c:	b510      	push	{r4, lr}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    212e:	4b07      	ldr	r3, [pc, #28]	; (214c <cdcdf_acm_write+0x20>)
{
    2130:	000a      	movs	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    2132:	7959      	ldrb	r1, [r3, #5]
{
    2134:	0004      	movs	r4, r0
	if (!cdcdf_acm_is_enabled()) {
    2136:	2900      	cmp	r1, #0
    2138:	d005      	beq.n	2146 <cdcdf_acm_write+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    213a:	78d8      	ldrb	r0, [r3, #3]
    213c:	0021      	movs	r1, r4
    213e:	2301      	movs	r3, #1
    2140:	4c03      	ldr	r4, [pc, #12]	; (2150 <cdcdf_acm_write+0x24>)
    2142:	47a0      	blx	r4
}
    2144:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2146:	2011      	movs	r0, #17
    2148:	4240      	negs	r0, r0
    214a:	e7fb      	b.n	2144 <cdcdf_acm_write+0x18>
    214c:	200005e0 	.word	0x200005e0
    2150:	0000231d 	.word	0x0000231d

00002154 <cdcdf_acm_register_callback>:
{
    2154:	b510      	push	{r4, lr}
    2156:	000a      	movs	r2, r1
	switch (cb_type) {
    2158:	2803      	cmp	r0, #3
    215a:	d810      	bhi.n	217e <cdcdf_acm_register_callback+0x2a>
    215c:	4b09      	ldr	r3, [pc, #36]	; (2184 <cdcdf_acm_register_callback+0x30>)
    215e:	f000 fc5b 	bl	2a18 <__gnu_thumb1_case_uqi>
    2162:	0802      	.short	0x0802
    2164:	0c0a      	.short	0x0c0a
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    2166:	7918      	ldrb	r0, [r3, #4]
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2168:	2102      	movs	r1, #2
    216a:	4b07      	ldr	r3, [pc, #28]	; (2188 <cdcdf_acm_register_callback+0x34>)
    216c:	4798      	blx	r3
	return ERR_NONE;
    216e:	2000      	movs	r0, #0
}
    2170:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2172:	78d8      	ldrb	r0, [r3, #3]
    2174:	e7f8      	b.n	2168 <cdcdf_acm_register_callback+0x14>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2176:	6119      	str	r1, [r3, #16]
    2178:	e7f9      	b.n	216e <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    217a:	6159      	str	r1, [r3, #20]
    217c:	e7f7      	b.n	216e <cdcdf_acm_register_callback+0x1a>
		return ERR_INVALID_ARG;
    217e:	200d      	movs	r0, #13
    2180:	4240      	negs	r0, r0
    2182:	e7f5      	b.n	2170 <cdcdf_acm_register_callback+0x1c>
    2184:	200005e0 	.word	0x200005e0
    2188:	00000999 	.word	0x00000999

0000218c <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    218c:	4b01      	ldr	r3, [pc, #4]	; (2194 <cdcdf_acm_is_enabled+0x8>)
    218e:	7958      	ldrb	r0, [r3, #5]
}
    2190:	4770      	bx	lr
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	200005e0 	.word	0x200005e0

00002198 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2198:	4b06      	ldr	r3, [pc, #24]	; (21b4 <usbdc_unconfig+0x1c>)
{
    219a:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    219c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    219e:	2c00      	cmp	r4, #0
    21a0:	d100      	bne.n	21a4 <usbdc_unconfig+0xc>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
    21a2:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
    21a4:	0020      	movs	r0, r4
    21a6:	6863      	ldr	r3, [r4, #4]
    21a8:	2200      	movs	r2, #0
    21aa:	2101      	movs	r1, #1
    21ac:	4798      	blx	r3
		func = func->next;
    21ae:	6824      	ldr	r4, [r4, #0]
    21b0:	e7f5      	b.n	219e <usbdc_unconfig+0x6>
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	20000604 	.word	0x20000604

000021b8 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    21b8:	b570      	push	{r4, r5, r6, lr}
    21ba:	0005      	movs	r5, r0
    21bc:	000e      	movs	r6, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    21be:	4b06      	ldr	r3, [pc, #24]	; (21d8 <usbdc_change_notify+0x20>)
    21c0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    21c2:	2c00      	cmp	r4, #0
    21c4:	d100      	bne.n	21c8 <usbdc_change_notify+0x10>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    21c6:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
    21c8:	6863      	ldr	r3, [r4, #4]
    21ca:	2b00      	cmp	r3, #0
    21cc:	d002      	beq.n	21d4 <usbdc_change_notify+0x1c>
			cg->cb(change, value);
    21ce:	0031      	movs	r1, r6
    21d0:	0028      	movs	r0, r5
    21d2:	4798      	blx	r3
		cg = cg->next;
    21d4:	6824      	ldr	r4, [r4, #0]
    21d6:	e7f4      	b.n	21c2 <usbdc_change_notify+0xa>
    21d8:	20000604 	.word	0x20000604

000021dc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21de:	0005      	movs	r5, r0
    21e0:	000e      	movs	r6, r1
    21e2:	0017      	movs	r7, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    21e4:	4b0b      	ldr	r3, [pc, #44]	; (2214 <usbdc_request_handler+0x38>)
    21e6:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    21e8:	2c00      	cmp	r4, #0
    21ea:	d101      	bne.n	21f0 <usbdc_request_handler+0x14>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    21ec:	0020      	movs	r0, r4
}
    21ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
    21f0:	6863      	ldr	r3, [r4, #4]
    21f2:	2b00      	cmp	r3, #0
    21f4:	d101      	bne.n	21fa <usbdc_request_handler+0x1e>
		h = h->next;
    21f6:	6824      	ldr	r4, [r4, #0]
    21f8:	e7f6      	b.n	21e8 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
    21fa:	003a      	movs	r2, r7
    21fc:	0031      	movs	r1, r6
    21fe:	0028      	movs	r0, r5
    2200:	4798      	blx	r3
			if (0 == rc) {
    2202:	2800      	cmp	r0, #0
    2204:	d004      	beq.n	2210 <usbdc_request_handler+0x34>
			} else if (ERR_NOT_FOUND != rc) {
    2206:	300a      	adds	r0, #10
    2208:	d0f5      	beq.n	21f6 <usbdc_request_handler+0x1a>
				return -1;
    220a:	2001      	movs	r0, #1
    220c:	4240      	negs	r0, r0
    220e:	e7ee      	b.n	21ee <usbdc_request_handler+0x12>
				return true;
    2210:	2001      	movs	r0, #1
    2212:	e7ec      	b.n	21ee <usbdc_request_handler+0x12>
    2214:	20000604 	.word	0x20000604

00002218 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2218:	4b05      	ldr	r3, [pc, #20]	; (2230 <usbd_sof_cb+0x18>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    221a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    221c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    221e:	2c00      	cmp	r4, #0
    2220:	d100      	bne.n	2224 <usbd_sof_cb+0xc>
	usbdc_sof_notify();
}
    2222:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
    2224:	6863      	ldr	r3, [r4, #4]
    2226:	2b00      	cmp	r3, #0
    2228:	d000      	beq.n	222c <usbd_sof_cb+0x14>
			sof->cb();
    222a:	4798      	blx	r3
		sof = sof->next;
    222c:	6824      	ldr	r4, [r4, #0]
    222e:	e7f6      	b.n	221e <usbd_sof_cb+0x6>
    2230:	20000604 	.word	0x20000604

00002234 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2234:	b510      	push	{r4, lr}
    2236:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2238:	2900      	cmp	r1, #0
    223a:	d003      	beq.n	2244 <usbdc_cb_ctl_done+0x10>
    223c:	2901      	cmp	r1, #1
    223e:	d023      	beq.n	2288 <usbdc_cb_ctl_done+0x54>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2240:	2000      	movs	r0, #0
    2242:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2244:	7813      	ldrb	r3, [r2, #0]
    2246:	2b00      	cmp	r3, #0
    2248:	d1fa      	bne.n	2240 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    224a:	7853      	ldrb	r3, [r2, #1]
    224c:	2b05      	cmp	r3, #5
    224e:	d00f      	beq.n	2270 <usbdc_cb_ctl_done+0x3c>
    2250:	2b09      	cmp	r3, #9
    2252:	d1f5      	bne.n	2240 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2254:	78d1      	ldrb	r1, [r2, #3]
    2256:	7893      	ldrb	r3, [r2, #2]
    2258:	0209      	lsls	r1, r1, #8
    225a:	4319      	orrs	r1, r3
    225c:	4b0d      	ldr	r3, [pc, #52]	; (2294 <usbdc_cb_ctl_done+0x60>)
    225e:	76d9      	strb	r1, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2260:	1e4a      	subs	r2, r1, #1
    2262:	4191      	sbcs	r1, r2
    2264:	3103      	adds	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2266:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2268:	2001      	movs	r0, #1
    226a:	4b0b      	ldr	r3, [pc, #44]	; (2298 <usbdc_cb_ctl_done+0x64>)
    226c:	4798      	blx	r3
    226e:	e7e7      	b.n	2240 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2270:	4b0a      	ldr	r3, [pc, #40]	; (229c <usbdc_cb_ctl_done+0x68>)
    2272:	7890      	ldrb	r0, [r2, #2]
    2274:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2276:	78e1      	ldrb	r1, [r4, #3]
    2278:	78a3      	ldrb	r3, [r4, #2]
    227a:	0209      	lsls	r1, r1, #8
    227c:	4319      	orrs	r1, r3
    227e:	1e4b      	subs	r3, r1, #1
    2280:	4199      	sbcs	r1, r3
    2282:	4b04      	ldr	r3, [pc, #16]	; (2294 <usbdc_cb_ctl_done+0x60>)
    2284:	3102      	adds	r1, #2
    2286:	e7ee      	b.n	2266 <usbdc_cb_ctl_done+0x32>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2288:	000a      	movs	r2, r1
    228a:	4b05      	ldr	r3, [pc, #20]	; (22a0 <usbdc_cb_ctl_done+0x6c>)
    228c:	0021      	movs	r1, r4
    228e:	2000      	movs	r0, #0
    2290:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2292:	e7d5      	b.n	2240 <usbdc_cb_ctl_done+0xc>
    2294:	20000604 	.word	0x20000604
    2298:	000021b9 	.word	0x000021b9
    229c:	00000765 	.word	0x00000765
    22a0:	000021dd 	.word	0x000021dd

000022a4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    22a4:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
	usbdc.cfg_value   = 0;
    22a6:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
    22a8:	2602      	movs	r6, #2
	usbdc_unconfig();
    22aa:	4b0c      	ldr	r3, [pc, #48]	; (22dc <usbdc_reset+0x38>)
    22ac:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
    22ae:	4d0c      	ldr	r5, [pc, #48]	; (22e0 <usbdc_reset+0x3c>)
	usbdc.ifc_alt_map = 0;

	// Setup EP0
	usb_d_ep_deinit(0);
    22b0:	0020      	movs	r0, r4
    22b2:	4b0c      	ldr	r3, [pc, #48]	; (22e4 <usbdc_reset+0x40>)
	usbdc.state       = USBD_S_DEFAULT;
    22b4:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    22b6:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    22b8:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
    22ba:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    22bc:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <usbdc_reset+0x44>)
    22be:	7f28      	ldrb	r0, [r5, #28]
    22c0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    22c2:	4d0a      	ldr	r5, [pc, #40]	; (22ec <usbdc_reset+0x48>)
    22c4:	0021      	movs	r1, r4
    22c6:	0020      	movs	r0, r4
    22c8:	4a09      	ldr	r2, [pc, #36]	; (22f0 <usbdc_reset+0x4c>)
    22ca:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    22cc:	0031      	movs	r1, r6
    22ce:	4a09      	ldr	r2, [pc, #36]	; (22f4 <usbdc_reset+0x50>)
    22d0:	0020      	movs	r0, r4
    22d2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    22d4:	0020      	movs	r0, r4
    22d6:	4b08      	ldr	r3, [pc, #32]	; (22f8 <usbdc_reset+0x54>)
    22d8:	4798      	blx	r3
}
    22da:	bd70      	pop	{r4, r5, r6, pc}
    22dc:	00002199 	.word	0x00002199
    22e0:	20000604 	.word	0x20000604
    22e4:	000007d5 	.word	0x000007d5
    22e8:	000007c1 	.word	0x000007c1
    22ec:	00000999 	.word	0x00000999
    22f0:	00002339 	.word	0x00002339
    22f4:	00002235 	.word	0x00002235
    22f8:	00000801 	.word	0x00000801

000022fc <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    22fc:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    22fe:	2800      	cmp	r0, #0
    2300:	d002      	beq.n	2308 <usbd_event_cb+0xc>
    2302:	2801      	cmp	r0, #1
    2304:	d003      	beq.n	230e <usbd_event_cb+0x12>
		break;

	default:
		break;
	}
}
    2306:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    2308:	4b02      	ldr	r3, [pc, #8]	; (2314 <usbd_event_cb+0x18>)
    230a:	4798      	blx	r3
		break;
    230c:	e7fb      	b.n	2306 <usbd_event_cb+0xa>
		usbdc_reset();
    230e:	4b02      	ldr	r3, [pc, #8]	; (2318 <usbd_event_cb+0x1c>)
    2310:	4798      	blx	r3
}
    2312:	e7f8      	b.n	2306 <usbd_event_cb+0xa>
    2314:	000021b9 	.word	0x000021b9
    2318:	000022a5 	.word	0x000022a5

0000231c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    231c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    231e:	ac01      	add	r4, sp, #4
    2320:	7220      	strb	r0, [r4, #8]
    2322:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    2324:	0020      	movs	r0, r4
    2326:	4b03      	ldr	r3, [pc, #12]	; (2334 <usbdc_xfer+0x18>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2328:	9101      	str	r1, [sp, #4]
    232a:	9202      	str	r2, [sp, #8]
	return usb_d_ep_transfer(&xfer);
    232c:	4798      	blx	r3
}
    232e:	b004      	add	sp, #16
    2330:	bd10      	pop	{r4, pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	00000841 	.word	0x00000841

00002338 <usbdc_cb_ctl_req>:
{
    2338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    233a:	4bb3      	ldr	r3, [pc, #716]	; (2608 <usbdc_cb_ctl_req+0x2d0>)
    233c:	2200      	movs	r2, #0
{
    233e:	0004      	movs	r4, r0
    2340:	000d      	movs	r5, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2342:	4798      	blx	r3
		return false;
    2344:	2200      	movs	r2, #0
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2346:	1c43      	adds	r3, r0, #1
    2348:	d100      	bne.n	234c <usbdc_cb_ctl_req+0x14>
    234a:	e15a      	b.n	2602 <usbdc_cb_ctl_req+0x2ca>
		return true;
    234c:	3201      	adds	r2, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    234e:	4290      	cmp	r0, r2
    2350:	d100      	bne.n	2354 <usbdc_cb_ctl_req+0x1c>
    2352:	e156      	b.n	2602 <usbdc_cb_ctl_req+0x2ca>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2354:	7829      	ldrb	r1, [r5, #0]
    2356:	231f      	movs	r3, #31
    2358:	000a      	movs	r2, r1
    235a:	439a      	bics	r2, r3
    235c:	d004      	beq.n	2368 <usbdc_cb_ctl_req+0x30>
    235e:	2a80      	cmp	r2, #128	; 0x80
    2360:	d100      	bne.n	2364 <usbdc_cb_ctl_req+0x2c>
    2362:	e0b1      	b.n	24c8 <usbdc_cb_ctl_req+0x190>
	return false;
    2364:	2200      	movs	r2, #0
    2366:	e14c      	b.n	2602 <usbdc_cb_ctl_req+0x2ca>
	switch (req->bRequest) {
    2368:	7868      	ldrb	r0, [r5, #1]
    236a:	3801      	subs	r0, #1
    236c:	280a      	cmp	r0, #10
    236e:	d8f9      	bhi.n	2364 <usbdc_cb_ctl_req+0x2c>
    2370:	f000 fb48 	bl	2a04 <__gnu_thumb1_case_sqi>
    2374:	f854f842 	.word	0xf854f842
    2378:	f8f8f80b 	.word	0xf8f8f80b
    237c:	f806      	.short	0xf806
    237e:	5e          	.byte	0x5e
    237f:	00          	.byte	0x00
		if (!usbdc_set_config(req->wValue)) {
    2380:	78aa      	ldrb	r2, [r5, #2]
	if (cfg_value == 0) {
    2382:	2a00      	cmp	r2, #0
    2384:	d105      	bne.n	2392 <usbdc_cb_ctl_req+0x5a>
		usbdc_unconfig();
    2386:	4ba1      	ldr	r3, [pc, #644]	; (260c <usbdc_cb_ctl_req+0x2d4>)
    2388:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    238a:	2200      	movs	r2, #0
    238c:	2301      	movs	r3, #1
    238e:	0011      	movs	r1, r2
    2390:	e0cb      	b.n	252a <usbdc_cb_ctl_req+0x1f2>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2392:	4d9f      	ldr	r5, [pc, #636]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
    2394:	682b      	ldr	r3, [r5, #0]
    2396:	cb03      	ldmia	r3!, {r0, r1}
    2398:	4b9e      	ldr	r3, [pc, #632]	; (2614 <usbdc_cb_ctl_req+0x2dc>)
    239a:	4798      	blx	r3
			return false;
    239c:	1e02      	subs	r2, r0, #0
	if (NULL == cfg_desc) {
    239e:	d100      	bne.n	23a2 <usbdc_cb_ctl_req+0x6a>
    23a0:	e12f      	b.n	2602 <usbdc_cb_ctl_req+0x2ca>
	return (ptr[0] + (ptr[1] << 8));
    23a2:	78c3      	ldrb	r3, [r0, #3]
    23a4:	7881      	ldrb	r1, [r0, #2]
    23a6:	021b      	lsls	r3, r3, #8
    23a8:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    23aa:	b289      	uxth	r1, r1
    23ac:	1841      	adds	r1, r0, r1
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23ae:	4b9a      	ldr	r3, [pc, #616]	; (2618 <usbdc_cb_ctl_req+0x2e0>)
    23b0:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
    23b2:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23b4:	4798      	blx	r3
	uint8_t                 last_iface = 0xFF;
    23b6:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    23b8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    23ba:	9a00      	ldr	r2, [sp, #0]
    23bc:	2a00      	cmp	r2, #0
    23be:	d0e4      	beq.n	238a <usbdc_cb_ctl_req+0x52>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    23c0:	7896      	ldrb	r6, [r2, #2]
    23c2:	429e      	cmp	r6, r3
    23c4:	d016      	beq.n	23f4 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    23c6:	692f      	ldr	r7, [r5, #16]
			while (NULL != func) {
    23c8:	2f00      	cmp	r7, #0
    23ca:	d10a      	bne.n	23e2 <usbdc_cb_ctl_req+0xaa>
		desc.sod = usb_desc_next(desc.sod);
    23cc:	9800      	ldr	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    23ce:	2204      	movs	r2, #4
	return (desc + usb_desc_len(desc));
    23d0:	7803      	ldrb	r3, [r0, #0]
    23d2:	9901      	ldr	r1, [sp, #4]
    23d4:	18c0      	adds	r0, r0, r3
    23d6:	4b90      	ldr	r3, [pc, #576]	; (2618 <usbdc_cb_ctl_req+0x2e0>)
		desc.sod = usb_desc_next(desc.sod);
    23d8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    23da:	4798      	blx	r3
    23dc:	0033      	movs	r3, r6
    23de:	9000      	str	r0, [sp, #0]
    23e0:	e7eb      	b.n	23ba <usbdc_cb_ctl_req+0x82>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    23e2:	466a      	mov	r2, sp
    23e4:	2100      	movs	r1, #0
    23e6:	0038      	movs	r0, r7
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	4798      	blx	r3
    23ec:	2800      	cmp	r0, #0
    23ee:	d0ed      	beq.n	23cc <usbdc_cb_ctl_req+0x94>
					func = func->next;
    23f0:	683f      	ldr	r7, [r7, #0]
    23f2:	e7e9      	b.n	23c8 <usbdc_cb_ctl_req+0x90>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    23f4:	001e      	movs	r6, r3
    23f6:	e7e9      	b.n	23cc <usbdc_cb_ctl_req+0x94>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    23f8:	2902      	cmp	r1, #2
    23fa:	d1b3      	bne.n	2364 <usbdc_cb_ctl_req+0x2c>
		if (req->wLength != 0) {
    23fc:	79ee      	ldrb	r6, [r5, #7]
    23fe:	79ab      	ldrb	r3, [r5, #6]
    2400:	0236      	lsls	r6, r6, #8
    2402:	431e      	orrs	r6, r3
    2404:	d1ae      	bne.n	2364 <usbdc_cb_ctl_req+0x2c>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2406:	0031      	movs	r1, r6
    2408:	7928      	ldrb	r0, [r5, #4]
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    240a:	4b84      	ldr	r3, [pc, #528]	; (261c <usbdc_cb_ctl_req+0x2e4>)
    240c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    240e:	2301      	movs	r3, #1
    2410:	0032      	movs	r2, r6
    2412:	0031      	movs	r1, r6
    2414:	0020      	movs	r0, r4
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2416:	4c82      	ldr	r4, [pc, #520]	; (2620 <usbdc_cb_ctl_req+0x2e8>)
    2418:	47a0      	blx	r4
    241a:	e0f1      	b.n	2600 <usbdc_cb_ctl_req+0x2c8>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    241c:	2902      	cmp	r1, #2
    241e:	d1a1      	bne.n	2364 <usbdc_cb_ctl_req+0x2c>
		if (req->wLength != 0) {
    2420:	79eb      	ldrb	r3, [r5, #7]
    2422:	79ae      	ldrb	r6, [r5, #6]
    2424:	021b      	lsls	r3, r3, #8
    2426:	431e      	orrs	r6, r3
    2428:	d19c      	bne.n	2364 <usbdc_cb_ctl_req+0x2c>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    242a:	7928      	ldrb	r0, [r5, #4]
    242c:	3901      	subs	r1, #1
    242e:	e7ec      	b.n	240a <usbdc_cb_ctl_req+0xd2>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2430:	78ec      	ldrb	r4, [r5, #3]
    2432:	78ab      	ldrb	r3, [r5, #2]
    2434:	0224      	lsls	r4, r4, #8
    2436:	431c      	orrs	r4, r3
    2438:	792b      	ldrb	r3, [r5, #4]
    243a:	796d      	ldrb	r5, [r5, #5]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    243c:	4e74      	ldr	r6, [pc, #464]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
		return usbdc_set_interface(req->wValue, req->wIndex);
    243e:	022d      	lsls	r5, r5, #8
    2440:	431d      	orrs	r5, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2442:	6833      	ldr	r3, [r6, #0]
    2444:	7ef2      	ldrb	r2, [r6, #27]
    2446:	cb03      	ldmia	r3!, {r0, r1}
    2448:	4b72      	ldr	r3, [pc, #456]	; (2614 <usbdc_cb_ctl_req+0x2dc>)
    244a:	4798      	blx	r3
	if (NULL == ifc) {
    244c:	2800      	cmp	r0, #0
    244e:	d089      	beq.n	2364 <usbdc_cb_ctl_req+0x2c>
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2450:	2204      	movs	r2, #4
	desc.sod = ifc;
    2452:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2454:	78c3      	ldrb	r3, [r0, #3]
    2456:	7881      	ldrb	r1, [r0, #2]
    2458:	021b      	lsls	r3, r3, #8
    245a:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    245c:	b289      	uxth	r1, r1
    245e:	1841      	adds	r1, r0, r1
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2460:	4f6d      	ldr	r7, [pc, #436]	; (2618 <usbdc_cb_ctl_req+0x2e0>)
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2462:	9101      	str	r1, [sp, #4]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2464:	47b8      	blx	r7
		if (NULL == ifc) {
    2466:	2800      	cmp	r0, #0
    2468:	d100      	bne.n	246c <usbdc_cb_ctl_req+0x134>
    246a:	e77b      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    246c:	7883      	ldrb	r3, [r0, #2]
    246e:	42ab      	cmp	r3, r5
    2470:	d110      	bne.n	2494 <usbdc_cb_ctl_req+0x15c>
    2472:	78c3      	ldrb	r3, [r0, #3]
    2474:	42a3      	cmp	r3, r4
    2476:	d10d      	bne.n	2494 <usbdc_cb_ctl_req+0x15c>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2478:	6937      	ldr	r7, [r6, #16]
	desc.sod = ifc;
    247a:	9000      	str	r0, [sp, #0]
	while (NULL != func) {
    247c:	2f00      	cmp	r7, #0
    247e:	d100      	bne.n	2482 <usbdc_cb_ctl_req+0x14a>
    2480:	e770      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2482:	2101      	movs	r1, #1
    2484:	466a      	mov	r2, sp
    2486:	0038      	movs	r0, r7
    2488:	687b      	ldr	r3, [r7, #4]
    248a:	4798      	blx	r3
    248c:	1e01      	subs	r1, r0, #0
    248e:	d008      	beq.n	24a2 <usbdc_cb_ctl_req+0x16a>
			func = func->next;
    2490:	683f      	ldr	r7, [r7, #0]
    2492:	e7f3      	b.n	247c <usbdc_cb_ctl_req+0x144>
		desc.sod = usb_desc_next(desc.sod);
    2494:	9800      	ldr	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2496:	2204      	movs	r2, #4
	return (desc + usb_desc_len(desc));
    2498:	7803      	ldrb	r3, [r0, #0]
    249a:	9901      	ldr	r1, [sp, #4]
    249c:	18c0      	adds	r0, r0, r3
		desc.sod = usb_desc_next(desc.sod);
    249e:	9000      	str	r0, [sp, #0]
    24a0:	e7e0      	b.n	2464 <usbdc_cb_ctl_req+0x12c>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	466a      	mov	r2, sp
    24a6:	0038      	movs	r0, r7
    24a8:	4798      	blx	r3
    24aa:	2800      	cmp	r0, #0
    24ac:	d000      	beq.n	24b0 <usbdc_cb_ctl_req+0x178>
    24ae:	e759      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
			if (alt_set) {
    24b0:	2c00      	cmp	r4, #0
    24b2:	d004      	beq.n	24be <usbdc_cb_ctl_req+0x186>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    24b4:	2201      	movs	r2, #1
    24b6:	40aa      	lsls	r2, r5
    24b8:	7f73      	ldrb	r3, [r6, #29]
    24ba:	4313      	orrs	r3, r2
    24bc:	7773      	strb	r3, [r6, #29]
			usbdc_xfer(0, NULL, 0, 0);
    24be:	2300      	movs	r3, #0
    24c0:	001a      	movs	r2, r3
    24c2:	0019      	movs	r1, r3
    24c4:	0018      	movs	r0, r3
    24c6:	e7a6      	b.n	2416 <usbdc_cb_ctl_req+0xde>
	switch (req->bRequest) {
    24c8:	7868      	ldrb	r0, [r5, #1]
    24ca:	280a      	cmp	r0, #10
    24cc:	d900      	bls.n	24d0 <usbdc_cb_ctl_req+0x198>
    24ce:	e749      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
    24d0:	f000 faac 	bl	2a2c <__gnu_thumb1_case_shi>
    24d4:	ff480068 	.word	0xff480068
    24d8:	ff48ff48 	.word	0xff48ff48
    24dc:	ff48ff48 	.word	0xff48ff48
    24e0:	ff48000b 	.word	0xff48000b
    24e4:	ff480060 	.word	0xff480060
    24e8:	0085      	.short	0x0085
	uint8_t type = (uint8_t)(req->wValue >> 8);
    24ea:	78e9      	ldrb	r1, [r5, #3]
    24ec:	78aa      	ldrb	r2, [r5, #2]
    24ee:	0209      	lsls	r1, r1, #8
    24f0:	4311      	orrs	r1, r2
	switch (type) {
    24f2:	0a0b      	lsrs	r3, r1, #8
    24f4:	2b02      	cmp	r3, #2
    24f6:	d01f      	beq.n	2538 <usbdc_cb_ctl_req+0x200>
    24f8:	2b03      	cmp	r3, #3
    24fa:	d03b      	beq.n	2574 <usbdc_cb_ctl_req+0x23c>
    24fc:	2b01      	cmp	r3, #1
    24fe:	d000      	beq.n	2502 <usbdc_cb_ctl_req+0x1ca>
    2500:	e730      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
	uint16_t length   = req->wLength;
    2502:	79eb      	ldrb	r3, [r5, #7]
    2504:	79aa      	ldrb	r2, [r5, #6]
    2506:	021b      	lsls	r3, r3, #8
    2508:	4313      	orrs	r3, r2
    250a:	1c1d      	adds	r5, r3, #0
    250c:	2b12      	cmp	r3, #18
    250e:	d900      	bls.n	2512 <usbdc_cb_ctl_req+0x1da>
    2510:	2512      	movs	r5, #18
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2512:	4b3f      	ldr	r3, [pc, #252]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
    2514:	2201      	movs	r2, #1
    2516:	681b      	ldr	r3, [r3, #0]
    2518:	b2ad      	uxth	r5, r5
    251a:	cb03      	ldmia	r3!, {r0, r1}
    251c:	4b3e      	ldr	r3, [pc, #248]	; (2618 <usbdc_cb_ctl_req+0x2e0>)
    251e:	4798      	blx	r3
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2520:	2300      	movs	r3, #0
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2522:	1e01      	subs	r1, r0, #0
	if (!dev_desc) {
    2524:	d100      	bne.n	2528 <usbdc_cb_ctl_req+0x1f0>
    2526:	e71d      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2528:	002a      	movs	r2, r5
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    252a:	0020      	movs	r0, r4
    252c:	4c3c      	ldr	r4, [pc, #240]	; (2620 <usbdc_cb_ctl_req+0x2e8>)
    252e:	47a0      	blx	r4
    2530:	4242      	negs	r2, r0
    2532:	4142      	adcs	r2, r0
    2534:	b2d2      	uxtb	r2, r2
    2536:	e064      	b.n	2602 <usbdc_cb_ctl_req+0x2ca>
	uint16_t length   = req->wLength;
    2538:	79ab      	ldrb	r3, [r5, #6]
    253a:	79ed      	ldrb	r5, [r5, #7]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    253c:	3101      	adds	r1, #1
	uint16_t length   = req->wLength;
    253e:	022d      	lsls	r5, r5, #8
    2540:	431d      	orrs	r5, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2542:	4b33      	ldr	r3, [pc, #204]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2544:	b2ca      	uxtb	r2, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2546:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2548:	681b      	ldr	r3, [r3, #0]
    254a:	cb03      	ldmia	r3!, {r0, r1}
    254c:	4b31      	ldr	r3, [pc, #196]	; (2614 <usbdc_cb_ctl_req+0x2dc>)
    254e:	4798      	blx	r3
    2550:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    2552:	d100      	bne.n	2556 <usbdc_cb_ctl_req+0x21e>
    2554:	e706      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
	return (ptr[0] + (ptr[1] << 8));
    2556:	78c3      	ldrb	r3, [r0, #3]
    2558:	7882      	ldrb	r2, [r0, #2]
    255a:	021b      	lsls	r3, r3, #8
    255c:	18d2      	adds	r2, r2, r3
    255e:	b292      	uxth	r2, r2
		need_zlp = false;
    2560:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    2562:	4295      	cmp	r5, r2
    2564:	d9e0      	bls.n	2528 <usbdc_cb_ctl_req+0x1f0>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2566:	3e01      	subs	r6, #1
    2568:	4035      	ands	r5, r6
    256a:	426b      	negs	r3, r5
    256c:	416b      	adcs	r3, r5
    256e:	0015      	movs	r5, r2
    2570:	b2db      	uxtb	r3, r3
    2572:	e7d9      	b.n	2528 <usbdc_cb_ctl_req+0x1f0>
	uint16_t length   = req->wLength;
    2574:	79ab      	ldrb	r3, [r5, #6]
    2576:	79ed      	ldrb	r5, [r5, #7]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2578:	b2ca      	uxtb	r2, r1
	uint16_t length   = req->wLength;
    257a:	022d      	lsls	r5, r5, #8
    257c:	431d      	orrs	r5, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    257e:	4b24      	ldr	r3, [pc, #144]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
    2580:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2582:	681b      	ldr	r3, [r3, #0]
    2584:	cb03      	ldmia	r3!, {r0, r1}
    2586:	4b27      	ldr	r3, [pc, #156]	; (2624 <usbdc_cb_ctl_req+0x2ec>)
    2588:	4798      	blx	r3
    258a:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    258c:	d100      	bne.n	2590 <usbdc_cb_ctl_req+0x258>
    258e:	e6e9      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
	if (length <= str_desc[0]) {
    2590:	7802      	ldrb	r2, [r0, #0]
    2592:	e7e5      	b.n	2560 <usbdc_cb_ctl_req+0x228>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2594:	491e      	ldr	r1, [pc, #120]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
    2596:	7ecb      	ldrb	r3, [r1, #27]
    2598:	694a      	ldr	r2, [r1, #20]
    259a:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    259c:	6949      	ldr	r1, [r1, #20]
    259e:	2300      	movs	r3, #0
    25a0:	2201      	movs	r2, #1
    25a2:	e737      	b.n	2414 <usbdc_cb_ctl_req+0xdc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    25a4:	231f      	movs	r3, #31
    25a6:	4019      	ands	r1, r3
    25a8:	2901      	cmp	r1, #1
    25aa:	d90c      	bls.n	25c6 <usbdc_cb_ctl_req+0x28e>
    25ac:	2902      	cmp	r1, #2
    25ae:	d000      	beq.n	25b2 <usbdc_cb_ctl_req+0x27a>
    25b0:	e6d8      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    25b2:	7928      	ldrb	r0, [r5, #4]
    25b4:	4b19      	ldr	r3, [pc, #100]	; (261c <usbdc_cb_ctl_req+0x2e4>)
    25b6:	4798      	blx	r3
			return false;
    25b8:	2200      	movs	r2, #0
		if (st < 0) {
    25ba:	4290      	cmp	r0, r2
    25bc:	db21      	blt.n	2602 <usbdc_cb_ctl_req+0x2ca>
		st = st & 0x1;
    25be:	2301      	movs	r3, #1
    25c0:	4018      	ands	r0, r3
    25c2:	9000      	str	r0, [sp, #0]
    25c4:	e001      	b.n	25ca <usbdc_cb_ctl_req+0x292>
		st = 0;
    25c6:	2300      	movs	r3, #0
    25c8:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    25ca:	4d11      	ldr	r5, [pc, #68]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
    25cc:	2202      	movs	r2, #2
    25ce:	4669      	mov	r1, sp
    25d0:	4b15      	ldr	r3, [pc, #84]	; (2628 <usbdc_cb_ctl_req+0x2f0>)
    25d2:	6968      	ldr	r0, [r5, #20]
    25d4:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    25d6:	2300      	movs	r3, #0
    25d8:	2202      	movs	r2, #2
    25da:	6969      	ldr	r1, [r5, #20]
    25dc:	e71a      	b.n	2414 <usbdc_cb_ctl_req+0xdc>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    25de:	4e0c      	ldr	r6, [pc, #48]	; (2610 <usbdc_cb_ctl_req+0x2d8>)
    25e0:	796b      	ldrb	r3, [r5, #5]
    25e2:	792a      	ldrb	r2, [r5, #4]
    25e4:	7f70      	ldrb	r0, [r6, #29]
    25e6:	021b      	lsls	r3, r3, #8
    25e8:	4313      	orrs	r3, r2
    25ea:	4118      	asrs	r0, r3
    25ec:	2401      	movs	r4, #1
    25ee:	4020      	ands	r0, r4
    25f0:	d12e      	bne.n	2650 <usbdc_cb_ctl_req+0x318>
		usbdc.ctrl_buf[0] = 0;
    25f2:	6973      	ldr	r3, [r6, #20]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    25f4:	0022      	movs	r2, r4
		usbdc.ctrl_buf[0] = 0;
    25f6:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    25f8:	6971      	ldr	r1, [r6, #20]
    25fa:	0003      	movs	r3, r0
    25fc:	4d08      	ldr	r5, [pc, #32]	; (2620 <usbdc_cb_ctl_req+0x2e8>)
    25fe:	47a8      	blx	r5
			return true;
    2600:	2201      	movs	r2, #1
}
    2602:	0010      	movs	r0, r2
    2604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	000021dd 	.word	0x000021dd
    260c:	00002199 	.word	0x00002199
    2610:	20000604 	.word	0x20000604
    2614:	00002795 	.word	0x00002795
    2618:	0000275d 	.word	0x0000275d
    261c:	00000939 	.word	0x00000939
    2620:	0000231d 	.word	0x0000231d
    2624:	000027d1 	.word	0x000027d1
    2628:	00002ba1 	.word	0x00002ba1
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    262c:	002a      	movs	r2, r5
    262e:	2102      	movs	r1, #2
    2630:	0020      	movs	r0, r4
    2632:	6863      	ldr	r3, [r4, #4]
    2634:	4798      	blx	r3
    2636:	2800      	cmp	r0, #0
    2638:	da03      	bge.n	2642 <usbdc_cb_ctl_req+0x30a>
			func = func->next;
    263a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    263c:	2c00      	cmp	r4, #0
    263e:	d1f5      	bne.n	262c <usbdc_cb_ctl_req+0x2f4>
    2640:	e690      	b.n	2364 <usbdc_cb_ctl_req+0x2c>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2642:	6973      	ldr	r3, [r6, #20]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2644:	2201      	movs	r2, #1
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2646:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2648:	2300      	movs	r3, #0
    264a:	6971      	ldr	r1, [r6, #20]
    264c:	0018      	movs	r0, r3
    264e:	e6e2      	b.n	2416 <usbdc_cb_ctl_req+0xde>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2650:	6934      	ldr	r4, [r6, #16]
    2652:	e7f3      	b.n	263c <usbdc_cb_ctl_req+0x304>

00002654 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2654:	b510      	push	{r4, lr}
	switch (type) {
    2656:	2801      	cmp	r0, #1
    2658:	d009      	beq.n	266e <usbdc_register_handler+0x1a>
    265a:	2800      	cmp	r0, #0
    265c:	d002      	beq.n	2664 <usbdc_register_handler+0x10>
    265e:	2802      	cmp	r0, #2
    2660:	d008      	beq.n	2674 <usbdc_register_handler+0x20>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    2662:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2664:	4805      	ldr	r0, [pc, #20]	; (267c <usbdc_register_handler+0x28>)
    2666:	3004      	adds	r0, #4
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2668:	4b05      	ldr	r3, [pc, #20]	; (2680 <usbdc_register_handler+0x2c>)
    266a:	4798      	blx	r3
}
    266c:	e7f9      	b.n	2662 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    266e:	4803      	ldr	r0, [pc, #12]	; (267c <usbdc_register_handler+0x28>)
    2670:	3008      	adds	r0, #8
    2672:	e7f9      	b.n	2668 <usbdc_register_handler+0x14>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2674:	4801      	ldr	r0, [pc, #4]	; (267c <usbdc_register_handler+0x28>)
    2676:	300c      	adds	r0, #12
    2678:	e7f6      	b.n	2668 <usbdc_register_handler+0x14>
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	20000604 	.word	0x20000604
    2680:	000009fd 	.word	0x000009fd

00002684 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2688:	1e43      	subs	r3, r0, #1
    268a:	4198      	sbcs	r0, r3
    268c:	4a0c      	ldr	r2, [pc, #48]	; (26c0 <usbdc_init+0x3c>)
    268e:	4b0d      	ldr	r3, [pc, #52]	; (26c4 <usbdc_init+0x40>)
    2690:	b2c0      	uxtb	r0, r0
    2692:	490d      	ldr	r1, [pc, #52]	; (26c8 <usbdc_init+0x44>)
    2694:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2696:	4b0d      	ldr	r3, [pc, #52]	; (26cc <usbdc_init+0x48>)
    2698:	4798      	blx	r3
	if (rc < 0) {
    269a:	2800      	cmp	r0, #0
    269c:	db0e      	blt.n	26bc <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    269e:	4d0c      	ldr	r5, [pc, #48]	; (26d0 <usbdc_init+0x4c>)
    26a0:	2220      	movs	r2, #32
    26a2:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <usbdc_init+0x50>)
    26a4:	2100      	movs	r1, #0
    26a6:	0028      	movs	r0, r5
    26a8:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    26aa:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    26ac:	490a      	ldr	r1, [pc, #40]	; (26d8 <usbdc_init+0x54>)
    26ae:	2000      	movs	r0, #0
    26b0:	4c0a      	ldr	r4, [pc, #40]	; (26dc <usbdc_init+0x58>)
    26b2:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    26b4:	2001      	movs	r0, #1
    26b6:	490a      	ldr	r1, [pc, #40]	; (26e0 <usbdc_init+0x5c>)
    26b8:	47a0      	blx	r4

	return 0;
    26ba:	2000      	movs	r0, #0
}
    26bc:	bd70      	pop	{r4, r5, r6, pc}
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	00000355 	.word	0x00000355
    26c4:	000009e5 	.word	0x000009e5
    26c8:	000034bc 	.word	0x000034bc
    26cc:	000006d5 	.word	0x000006d5
    26d0:	20000604 	.word	0x20000604
    26d4:	00002bb3 	.word	0x00002bb3
    26d8:	00002219 	.word	0x00002219
    26dc:	00000741 	.word	0x00000741
    26e0:	000022fd 	.word	0x000022fd

000026e4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    26e4:	b510      	push	{r4, lr}
    26e6:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    26e8:	4802      	ldr	r0, [pc, #8]	; (26f4 <usbdc_register_function+0x10>)
    26ea:	4b03      	ldr	r3, [pc, #12]	; (26f8 <usbdc_register_function+0x14>)
    26ec:	3010      	adds	r0, #16
    26ee:	4798      	blx	r3
}
    26f0:	bd10      	pop	{r4, pc}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	20000604 	.word	0x20000604
    26f8:	000009fd 	.word	0x000009fd

000026fc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    26fc:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    26fe:	4b0a      	ldr	r3, [pc, #40]	; (2728 <usbdc_start+0x2c>)
    2700:	7e9c      	ldrb	r4, [r3, #26]
    2702:	2c00      	cmp	r4, #0
    2704:	d10b      	bne.n	271e <usbdc_start+0x22>
		return ERR_BUSY;
	}

	if (desces) {
    2706:	2800      	cmp	r0, #0
    2708:	d00c      	beq.n	2724 <usbdc_start+0x28>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    270a:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
    270c:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
    270e:	79d2      	ldrb	r2, [r2, #7]
    2710:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2712:	2201      	movs	r2, #1
    2714:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2716:	4b05      	ldr	r3, [pc, #20]	; (272c <usbdc_start+0x30>)
    2718:	4798      	blx	r3
	return ERR_NONE;
    271a:	0020      	movs	r0, r4
}
    271c:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    271e:	2004      	movs	r0, #4
		return ERR_BAD_DATA;
    2720:	4240      	negs	r0, r0
    2722:	e7fb      	b.n	271c <usbdc_start+0x20>
    2724:	2009      	movs	r0, #9
    2726:	e7fb      	b.n	2720 <usbdc_start+0x24>
    2728:	20000604 	.word	0x20000604
    272c:	0000074d 	.word	0x0000074d

00002730 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2730:	b510      	push	{r4, lr}
	usb_d_attach();
    2732:	4b01      	ldr	r3, [pc, #4]	; (2738 <usbdc_attach+0x8>)
    2734:	4798      	blx	r3
}
    2736:	bd10      	pop	{r4, pc}
    2738:	00000759 	.word	0x00000759

0000273c <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    273c:	4b01      	ldr	r3, [pc, #4]	; (2744 <usbdc_get_ctrl_buffer+0x8>)
    273e:	6958      	ldr	r0, [r3, #20]
}
    2740:	4770      	bx	lr
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	20000604 	.word	0x20000604

00002748 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2748:	4b03      	ldr	r3, [pc, #12]	; (2758 <usbdc_get_state+0x10>)
    274a:	7e98      	ldrb	r0, [r3, #26]
    274c:	2310      	movs	r3, #16
    274e:	4218      	tst	r0, r3
    2750:	d000      	beq.n	2754 <usbdc_get_state+0xc>
		return USBD_S_SUSPEND;
    2752:	0018      	movs	r0, r3
	}
	return usbdc.state;
}
    2754:	4770      	bx	lr
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	20000604 	.word	0x20000604

0000275c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    275c:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    275e:	4288      	cmp	r0, r1
    2760:	d301      	bcc.n	2766 <usb_find_desc+0xa>
		_desc_len_check();
    2762:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    2764:	bd10      	pop	{r4, pc}
    2766:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2768:	2b01      	cmp	r3, #1
    276a:	d9fa      	bls.n	2762 <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    276c:	7844      	ldrb	r4, [r0, #1]
    276e:	4294      	cmp	r4, r2
    2770:	d0f8      	beq.n	2764 <usb_find_desc+0x8>
	return (desc + usb_desc_len(desc));
    2772:	18c0      	adds	r0, r0, r3
    2774:	e7f3      	b.n	275e <usb_find_desc+0x2>

00002776 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2776:	4288      	cmp	r0, r1
    2778:	d301      	bcc.n	277e <usb_find_ep_desc+0x8>
		_desc_len_check();
    277a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    277c:	4770      	bx	lr
    277e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2780:	2b01      	cmp	r3, #1
    2782:	d9fa      	bls.n	277a <usb_find_ep_desc+0x4>
	return desc[1];
    2784:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2786:	2a04      	cmp	r2, #4
    2788:	d0f7      	beq.n	277a <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    278a:	2a05      	cmp	r2, #5
    278c:	d0f6      	beq.n	277c <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    278e:	18c0      	adds	r0, r0, r3
    2790:	e7f1      	b.n	2776 <usb_find_ep_desc>
	...

00002794 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2794:	b570      	push	{r4, r5, r6, lr}
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2796:	4b0d      	ldr	r3, [pc, #52]	; (27cc <usb_find_cfg_desc+0x38>)
{
    2798:	0015      	movs	r5, r2
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    279a:	2202      	movs	r2, #2
{
    279c:	000c      	movs	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    279e:	4798      	blx	r3
	if (!desc) {
    27a0:	2800      	cmp	r0, #0
    27a2:	d10f      	bne.n	27c4 <usb_find_cfg_desc+0x30>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    27a4:	bd70      	pop	{r4, r5, r6, pc}
		_desc_len_check();
    27a6:	7803      	ldrb	r3, [r0, #0]
    27a8:	2b01      	cmp	r3, #1
    27aa:	d90d      	bls.n	27c8 <usb_find_cfg_desc+0x34>
		if (desc[1] != USB_DT_CONFIG) {
    27ac:	7843      	ldrb	r3, [r0, #1]
    27ae:	2b02      	cmp	r3, #2
    27b0:	d10a      	bne.n	27c8 <usb_find_cfg_desc+0x34>
		if (desc[5] == cfg_value) {
    27b2:	7943      	ldrb	r3, [r0, #5]
    27b4:	42ab      	cmp	r3, r5
    27b6:	d0f5      	beq.n	27a4 <usb_find_cfg_desc+0x10>
	return (ptr[0] + (ptr[1] << 8));
    27b8:	78c2      	ldrb	r2, [r0, #3]
    27ba:	7883      	ldrb	r3, [r0, #2]
    27bc:	0212      	lsls	r2, r2, #8
    27be:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    27c0:	b29b      	uxth	r3, r3
    27c2:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    27c4:	42a0      	cmp	r0, r4
    27c6:	d3ee      	bcc.n	27a6 <usb_find_cfg_desc+0x12>
		return NULL;
    27c8:	2000      	movs	r0, #0
    27ca:	e7eb      	b.n	27a4 <usb_find_cfg_desc+0x10>
    27cc:	0000275d 	.word	0x0000275d

000027d0 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    27d0:	b570      	push	{r4, r5, r6, lr}
    27d2:	000d      	movs	r5, r1
    27d4:	0016      	movs	r6, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    27d6:	2400      	movs	r4, #0
    27d8:	42a8      	cmp	r0, r5
    27da:	d301      	bcc.n	27e0 <usb_find_str_desc+0x10>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    27dc:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    27de:	bd70      	pop	{r4, r5, r6, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    27e0:	2203      	movs	r2, #3
    27e2:	0029      	movs	r1, r5
    27e4:	4b05      	ldr	r3, [pc, #20]	; (27fc <usb_find_str_desc+0x2c>)
    27e6:	4798      	blx	r3
		if (desc) {
    27e8:	2800      	cmp	r0, #0
    27ea:	d0f8      	beq.n	27de <usb_find_str_desc+0xe>
    27ec:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    27ee:	2b01      	cmp	r3, #1
    27f0:	d9f4      	bls.n	27dc <usb_find_str_desc+0xc>
			if (i == str_index) {
    27f2:	42b4      	cmp	r4, r6
    27f4:	d0f3      	beq.n	27de <usb_find_str_desc+0xe>
	return (desc + usb_desc_len(desc));
    27f6:	18c0      	adds	r0, r0, r3
    27f8:	3401      	adds	r4, #1
    27fa:	e7ed      	b.n	27d8 <usb_find_str_desc+0x8>
    27fc:	0000275d 	.word	0x0000275d

00002800 <main>:

bool sos_flag = false;


int main(void)
{
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
	atmel_start_init();
    2802:	4b31      	ldr	r3, [pc, #196]	; (28c8 <main+0xc8>)
{
    2804:	b08b      	sub	sp, #44	; 0x2c
	atmel_start_init();
    2806:	4798      	blx	r3

	usbdc_attach();
    2808:	4b30      	ldr	r3, [pc, #192]	; (28cc <main+0xcc>)
    280a:	4798      	blx	r3
	delay_ms(100);
    280c:	2064      	movs	r0, #100	; 0x64
    280e:	4b30      	ldr	r3, [pc, #192]	; (28d0 <main+0xd0>)
    2810:	4798      	blx	r3
	usb_serial_begin();
    2812:	4b30      	ldr	r3, [pc, #192]	; (28d4 <main+0xd4>)
    2814:	4798      	blx	r3
	delay_ms(100);
    2816:	2064      	movs	r0, #100	; 0x64
    2818:	4b2d      	ldr	r3, [pc, #180]	; (28d0 <main+0xd0>)
    281a:	4798      	blx	r3

	
	i2c_m_sync_enable(&I2C_0);
    281c:	4b2e      	ldr	r3, [pc, #184]	; (28d8 <main+0xd8>)
    281e:	482f      	ldr	r0, [pc, #188]	; (28dc <main+0xdc>)
    2820:	4798      	blx	r3
	
	struct io_descriptor *I2C_sensors;
	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_sensors);
    2822:	a902      	add	r1, sp, #8
    2824:	482d      	ldr	r0, [pc, #180]	; (28dc <main+0xdc>)
    2826:	4b2e      	ldr	r3, [pc, #184]	; (28e0 <main+0xe0>)
    2828:	4798      	blx	r3
		
		char buff_green[] = {BH1792GLC_MEAS_CONTROL1,BH1792GLC_MEAS_CONTROL1_VAL_GREEN,BH1792GLC_MEAS_CONTROL2_VAL,BH1792GLC_MEAS_CONTROL3_VAL,
		BH1792GLC_MEAS_CONTROL4_VAL,BH1792GLC_MEAS_CONTROL4_2_VAL,BH1792GLC_MEAS_CONTROL5_VAL};
		io_write(I2C_sensors,buff_green,sizeof(buff_green));
		
		char start[] = {BH1792GLC_MEAS_START,BH1792GLC_MEAS_START_VAL};
    282a:	2402      	movs	r4, #2
		i2c_m_sync_set_slaveaddr(&I2C_0, 0x5B, I2C_M_SEVEN);    //0x5B
    282c:	2280      	movs	r2, #128	; 0x80
    282e:	4b2d      	ldr	r3, [pc, #180]	; (28e4 <main+0xe4>)
    2830:	0112      	lsls	r2, r2, #4
    2832:	215b      	movs	r1, #91	; 0x5b
    2834:	4829      	ldr	r0, [pc, #164]	; (28dc <main+0xdc>)
    2836:	4798      	blx	r3
		char buff_green[] = {BH1792GLC_MEAS_CONTROL1,BH1792GLC_MEAS_CONTROL1_VAL_GREEN,BH1792GLC_MEAS_CONTROL2_VAL,BH1792GLC_MEAS_CONTROL3_VAL,
    2838:	4d2b      	ldr	r5, [pc, #172]	; (28e8 <main+0xe8>)
    283a:	2207      	movs	r2, #7
    283c:	0029      	movs	r1, r5
    283e:	4f2b      	ldr	r7, [pc, #172]	; (28ec <main+0xec>)
    2840:	a805      	add	r0, sp, #20
    2842:	47b8      	blx	r7
		io_write(I2C_sensors,buff_green,sizeof(buff_green));
    2844:	2207      	movs	r2, #7
    2846:	a905      	add	r1, sp, #20
    2848:	4e29      	ldr	r6, [pc, #164]	; (28f0 <main+0xf0>)
    284a:	9802      	ldr	r0, [sp, #8]
    284c:	47b0      	blx	r6
		char start[] = {BH1792GLC_MEAS_START,BH1792GLC_MEAS_START_VAL};
    284e:	1de9      	adds	r1, r5, #7
    2850:	0022      	movs	r2, r4
    2852:	a801      	add	r0, sp, #4
    2854:	47b8      	blx	r7

		uint16_t pulse_data[5];
		
		io_write(I2C_sensors, start, 2);
    2856:	0022      	movs	r2, r4
    2858:	a901      	add	r1, sp, #4
    285a:	9802      	ldr	r0, [sp, #8]
    285c:	47b0      	blx	r6
		delay_ms(31);
    285e:	25a0      	movs	r5, #160	; 0xa0
    2860:	201f      	movs	r0, #31
    2862:	4b1b      	ldr	r3, [pc, #108]	; (28d0 <main+0xd0>)
    2864:	4798      	blx	r3
    2866:	00ad      	lsls	r5, r5, #2


		for(uint16_t i = 0; i<640; i++){
			

			i2c_m_sync_cmd_read(&I2C_0, 0x50, pulse_data, 9);
    2868:	af07      	add	r7, sp, #28
    286a:	2309      	movs	r3, #9
    286c:	003a      	movs	r2, r7
    286e:	2150      	movs	r1, #80	; 0x50
    2870:	4e20      	ldr	r6, [pc, #128]	; (28f4 <main+0xf4>)
    2872:	481a      	ldr	r0, [pc, #104]	; (28dc <main+0xdc>)
    2874:	47b0      	blx	r6
			
			
			serial_write("LEDON: ");
    2876:	4e20      	ldr	r6, [pc, #128]	; (28f8 <main+0xf8>)
    2878:	4820      	ldr	r0, [pc, #128]	; (28fc <main+0xfc>)
    287a:	47b0      	blx	r6
			char buffer_led[6];
			sprintf(buffer_led, "%d\n",pulse_data[3]);
    287c:	4b20      	ldr	r3, [pc, #128]	; (2900 <main+0x100>)
    287e:	88fa      	ldrh	r2, [r7, #6]
    2880:	4920      	ldr	r1, [pc, #128]	; (2904 <main+0x104>)
    2882:	a803      	add	r0, sp, #12
    2884:	4798      	blx	r3
			serial_write(buffer_led);
    2886:	a803      	add	r0, sp, #12
    2888:	47b0      	blx	r6
    288a:	3d01      	subs	r5, #1
	
			
			io_write(I2C_sensors, start, 2);
    288c:	0022      	movs	r2, r4
    288e:	a901      	add	r1, sp, #4
    2890:	9802      	ldr	r0, [sp, #8]
    2892:	4e17      	ldr	r6, [pc, #92]	; (28f0 <main+0xf0>)
    2894:	47b0      	blx	r6
    2896:	b2ad      	uxth	r5, r5
			
			delay_ms(31);
    2898:	201f      	movs	r0, #31
    289a:	4b0d      	ldr	r3, [pc, #52]	; (28d0 <main+0xd0>)
    289c:	4798      	blx	r3
		for(uint16_t i = 0; i<640; i++){
    289e:	2d00      	cmp	r5, #0
    28a0:	d1e2      	bne.n	2868 <main+0x68>
		}

		char buff_reset[] = {BH1792GLC_SW_RESET, BH1792GLC_SW_RESET_VAL};
    28a2:	4911      	ldr	r1, [pc, #68]	; (28e8 <main+0xe8>)
    28a4:	4b11      	ldr	r3, [pc, #68]	; (28ec <main+0xec>)
    28a6:	0022      	movs	r2, r4
    28a8:	3109      	adds	r1, #9
    28aa:	a803      	add	r0, sp, #12
    28ac:	4798      	blx	r3
		io_write(I2C_sensors, buff_reset, 2);
    28ae:	0022      	movs	r2, r4
    28b0:	a903      	add	r1, sp, #12
    28b2:	9802      	ldr	r0, [sp, #8]
    28b4:	47b0      	blx	r6

		

		io_write(I2C_sensors, start, 2);
    28b6:	0022      	movs	r2, r4
    28b8:	a901      	add	r1, sp, #4
    28ba:	9802      	ldr	r0, [sp, #8]
    28bc:	47b0      	blx	r6
		delay_ms(31);
    28be:	201f      	movs	r0, #31
    28c0:	4b03      	ldr	r3, [pc, #12]	; (28d0 <main+0xd0>)
    28c2:	4798      	blx	r3
	while(1){
    28c4:	e7b2      	b.n	282c <main+0x2c>
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	000000ed 	.word	0x000000ed
    28cc:	00002731 	.word	0x00002731
    28d0:	0000039d 	.word	0x0000039d
    28d4:	0000297d 	.word	0x0000297d
    28d8:	00000455 	.word	0x00000455
    28dc:	200006b4 	.word	0x200006b4
    28e0:	000004bd 	.word	0x000004bd
    28e4:	00000461 	.word	0x00000461
    28e8:	000034d2 	.word	0x000034d2
    28ec:	00002ba1 	.word	0x00002ba1
    28f0:	000004c5 	.word	0x000004c5
    28f4:	00000475 	.word	0x00000475
    28f8:	000029e9 	.word	0x000029e9
    28fc:	000034dd 	.word	0x000034dd
    2900:	00002bc5 	.word	0x00002bc5
    2904:	000034e5 	.word	0x000034e5

00002908 <cdc_write_finished>:
/**
 * \brief Callback invoked when bulk IN data received
 */
static bool cdc_write_finished(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    pending_write = false;
    2908:	2000      	movs	r0, #0
    290a:	4b01      	ldr	r3, [pc, #4]	; (2910 <cdc_write_finished+0x8>)
    290c:	7018      	strb	r0, [r3, #0]

	/* No error. */
	return false;
}
    290e:	4770      	bx	lr
    2910:	20000624 	.word	0x20000624

00002914 <usb_device_state_changed_handler>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_state_changed_handler(usb_cdc_control_signal_t state)
{
    2914:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (state.rs232.DTR) 
    2916:	2401      	movs	r4, #1
{
    2918:	1c03      	adds	r3, r0, #0
    291a:	aa01      	add	r2, sp, #4
    291c:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) 
    291e:	4023      	ands	r3, r4
    2920:	4d05      	ldr	r5, [pc, #20]	; (2938 <usb_device_state_changed_handler+0x24>)
    2922:	d006      	beq.n	2932 <usb_device_state_changed_handler+0x1e>
    {
		/* Callbacks must be registered after endpoint allocation */

		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cdc_write_finished);
    2924:	4905      	ldr	r1, [pc, #20]	; (293c <usb_device_state_changed_handler+0x28>)
    2926:	0020      	movs	r0, r4
    2928:	4b05      	ldr	r3, [pc, #20]	; (2940 <usb_device_state_changed_handler+0x2c>)
    292a:	4798      	blx	r3
		/* Start Rx */

		cdc_connected = true;
    292c:	706c      	strb	r4, [r5, #1]
		cdc_connected = false;
	}

	/* No error. */
	return false;
}
    292e:	2000      	movs	r0, #0
    2930:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		cdc_connected = false;
    2932:	706b      	strb	r3, [r5, #1]
    2934:	e7fb      	b.n	292e <usb_device_state_changed_handler+0x1a>
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	20000624 	.word	0x20000624
    293c:	00002909 	.word	0x00002909
    2940:	00002155 	.word	0x00002155

00002944 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2944:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2946:	4805      	ldr	r0, [pc, #20]	; (295c <cdc_device_acm_init+0x18>)
    2948:	4b05      	ldr	r3, [pc, #20]	; (2960 <cdc_device_acm_init+0x1c>)
    294a:	3002      	adds	r0, #2
    294c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    294e:	4b05      	ldr	r3, [pc, #20]	; (2964 <cdc_device_acm_init+0x20>)
    2950:	4798      	blx	r3

	usbdc_start(single_desc);
    2952:	4805      	ldr	r0, [pc, #20]	; (2968 <cdc_device_acm_init+0x24>)
    2954:	4b05      	ldr	r3, [pc, #20]	; (296c <cdc_device_acm_init+0x28>)
    2956:	4798      	blx	r3
	//usbdc_attach();
}
    2958:	bd10      	pop	{r4, pc}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	20000624 	.word	0x20000624
    2960:	00002685 	.word	0x00002685
    2964:	000020e9 	.word	0x000020e9
    2968:	20000008 	.word	0x20000008
    296c:	000026fd 	.word	0x000026fd

00002970 <usb_init>:

void usb_init(void)
{
    2970:	b510      	push	{r4, lr}
	cdc_device_acm_init();
    2972:	4b01      	ldr	r3, [pc, #4]	; (2978 <usb_init+0x8>)
    2974:	4798      	blx	r3
}
    2976:	bd10      	pop	{r4, pc}
    2978:	00002945 	.word	0x00002945

0000297c <usb_serial_begin>:

void usb_serial_begin (void)
{
    297c:	b510      	push	{r4, lr}
	while (!cdcdf_acm_is_enabled()) {
    297e:	4b04      	ldr	r3, [pc, #16]	; (2990 <usb_serial_begin+0x14>)
    2980:	4798      	blx	r3
    2982:	2800      	cmp	r0, #0
    2984:	d0fb      	beq.n	297e <usb_serial_begin+0x2>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_state_changed_handler);
    2986:	4903      	ldr	r1, [pc, #12]	; (2994 <usb_serial_begin+0x18>)
    2988:	2003      	movs	r0, #3
    298a:	4b03      	ldr	r3, [pc, #12]	; (2998 <usb_serial_begin+0x1c>)
    298c:	4798      	blx	r3
}
    298e:	bd10      	pop	{r4, pc}
    2990:	0000218d 	.word	0x0000218d
    2994:	00002915 	.word	0x00002915
    2998:	00002155 	.word	0x00002155

0000299c <usb_serial_write>:




int32_t usb_serial_write (const char *const user_output_buffer, const uint16_t user_output_buffer_length)
{
    299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    299e:	4c10      	ldr	r4, [pc, #64]	; (29e0 <usb_serial_write+0x44>)
    29a0:	000d      	movs	r5, r1
    29a2:	6c66      	ldr	r6, [r4, #68]	; 0x44
		output_buffer[output_length++] = p;
    29a4:	0027      	movs	r7, r4
{
    29a6:	0033      	movs	r3, r6
    29a8:	2100      	movs	r1, #0
		char p = buf[i];
    29aa:	1b80      	subs	r0, r0, r6
		output_buffer[output_length++] = p;
    29ac:	3748      	adds	r7, #72	; 0x48
	for (int i = 0; i < length && cdc_connected; i++)
    29ae:	1b9a      	subs	r2, r3, r6
    29b0:	4295      	cmp	r5, r2
    29b2:	dc0b      	bgt.n	29cc <usb_serial_write+0x30>
    29b4:	2900      	cmp	r1, #0
    29b6:	d000      	beq.n	29ba <usb_serial_write+0x1e>
    29b8:	6463      	str	r3, [r4, #68]	; 0x44
	cdcdf_acm_write(output_buffer, output_length);
    29ba:	0020      	movs	r0, r4
    29bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
    29be:	4b09      	ldr	r3, [pc, #36]	; (29e4 <usb_serial_write+0x48>)
    29c0:	3048      	adds	r0, #72	; 0x48
    29c2:	4798      	blx	r3
	output_length = 0;
    29c4:	2300      	movs	r3, #0
    return cdc_write(user_output_buffer, user_output_buffer_length);
}
    29c6:	0028      	movs	r0, r5
	output_length = 0;
    29c8:	6463      	str	r3, [r4, #68]	; 0x44
}
    29ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (int i = 0; i < length && cdc_connected; i++)
    29cc:	7862      	ldrb	r2, [r4, #1]
    29ce:	b2d2      	uxtb	r2, r2
    29d0:	2a00      	cmp	r2, #0
    29d2:	d0ef      	beq.n	29b4 <usb_serial_write+0x18>
		char p = buf[i];
    29d4:	5cc1      	ldrb	r1, [r0, r3]
		output_buffer[output_length++] = p;
    29d6:	55d9      	strb	r1, [r3, r7]
    29d8:	3301      	adds	r3, #1
    29da:	0011      	movs	r1, r2
    29dc:	e7e7      	b.n	29ae <usb_serial_write+0x12>
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	20000624 	.word	0x20000624
    29e4:	0000212d 	.word	0x0000212d

000029e8 <serial_write>:

void serial_write(const char *const serial_output_buffer)
{
    29e8:	b510      	push	{r4, lr}
	usb_serial_write(serial_output_buffer,strlen(serial_output_buffer));
    29ea:	4b04      	ldr	r3, [pc, #16]	; (29fc <serial_write+0x14>)
{
    29ec:	0004      	movs	r4, r0
	usb_serial_write(serial_output_buffer,strlen(serial_output_buffer));
    29ee:	4798      	blx	r3
    29f0:	4b03      	ldr	r3, [pc, #12]	; (2a00 <serial_write+0x18>)
    29f2:	b281      	uxth	r1, r0
    29f4:	0020      	movs	r0, r4
    29f6:	4798      	blx	r3
	
}
    29f8:	bd10      	pop	{r4, pc}
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	00002c09 	.word	0x00002c09
    2a00:	0000299d 	.word	0x0000299d

00002a04 <__gnu_thumb1_case_sqi>:
    2a04:	b402      	push	{r1}
    2a06:	4671      	mov	r1, lr
    2a08:	0849      	lsrs	r1, r1, #1
    2a0a:	0049      	lsls	r1, r1, #1
    2a0c:	5609      	ldrsb	r1, [r1, r0]
    2a0e:	0049      	lsls	r1, r1, #1
    2a10:	448e      	add	lr, r1
    2a12:	bc02      	pop	{r1}
    2a14:	4770      	bx	lr
    2a16:	46c0      	nop			; (mov r8, r8)

00002a18 <__gnu_thumb1_case_uqi>:
    2a18:	b402      	push	{r1}
    2a1a:	4671      	mov	r1, lr
    2a1c:	0849      	lsrs	r1, r1, #1
    2a1e:	0049      	lsls	r1, r1, #1
    2a20:	5c09      	ldrb	r1, [r1, r0]
    2a22:	0049      	lsls	r1, r1, #1
    2a24:	448e      	add	lr, r1
    2a26:	bc02      	pop	{r1}
    2a28:	4770      	bx	lr
    2a2a:	46c0      	nop			; (mov r8, r8)

00002a2c <__gnu_thumb1_case_shi>:
    2a2c:	b403      	push	{r0, r1}
    2a2e:	4671      	mov	r1, lr
    2a30:	0849      	lsrs	r1, r1, #1
    2a32:	0040      	lsls	r0, r0, #1
    2a34:	0049      	lsls	r1, r1, #1
    2a36:	5e09      	ldrsh	r1, [r1, r0]
    2a38:	0049      	lsls	r1, r1, #1
    2a3a:	448e      	add	lr, r1
    2a3c:	bc03      	pop	{r0, r1}
    2a3e:	4770      	bx	lr

00002a40 <__udivsi3>:
    2a40:	2200      	movs	r2, #0
    2a42:	0843      	lsrs	r3, r0, #1
    2a44:	428b      	cmp	r3, r1
    2a46:	d374      	bcc.n	2b32 <__udivsi3+0xf2>
    2a48:	0903      	lsrs	r3, r0, #4
    2a4a:	428b      	cmp	r3, r1
    2a4c:	d35f      	bcc.n	2b0e <__udivsi3+0xce>
    2a4e:	0a03      	lsrs	r3, r0, #8
    2a50:	428b      	cmp	r3, r1
    2a52:	d344      	bcc.n	2ade <__udivsi3+0x9e>
    2a54:	0b03      	lsrs	r3, r0, #12
    2a56:	428b      	cmp	r3, r1
    2a58:	d328      	bcc.n	2aac <__udivsi3+0x6c>
    2a5a:	0c03      	lsrs	r3, r0, #16
    2a5c:	428b      	cmp	r3, r1
    2a5e:	d30d      	bcc.n	2a7c <__udivsi3+0x3c>
    2a60:	22ff      	movs	r2, #255	; 0xff
    2a62:	0209      	lsls	r1, r1, #8
    2a64:	ba12      	rev	r2, r2
    2a66:	0c03      	lsrs	r3, r0, #16
    2a68:	428b      	cmp	r3, r1
    2a6a:	d302      	bcc.n	2a72 <__udivsi3+0x32>
    2a6c:	1212      	asrs	r2, r2, #8
    2a6e:	0209      	lsls	r1, r1, #8
    2a70:	d065      	beq.n	2b3e <__udivsi3+0xfe>
    2a72:	0b03      	lsrs	r3, r0, #12
    2a74:	428b      	cmp	r3, r1
    2a76:	d319      	bcc.n	2aac <__udivsi3+0x6c>
    2a78:	e000      	b.n	2a7c <__udivsi3+0x3c>
    2a7a:	0a09      	lsrs	r1, r1, #8
    2a7c:	0bc3      	lsrs	r3, r0, #15
    2a7e:	428b      	cmp	r3, r1
    2a80:	d301      	bcc.n	2a86 <__udivsi3+0x46>
    2a82:	03cb      	lsls	r3, r1, #15
    2a84:	1ac0      	subs	r0, r0, r3
    2a86:	4152      	adcs	r2, r2
    2a88:	0b83      	lsrs	r3, r0, #14
    2a8a:	428b      	cmp	r3, r1
    2a8c:	d301      	bcc.n	2a92 <__udivsi3+0x52>
    2a8e:	038b      	lsls	r3, r1, #14
    2a90:	1ac0      	subs	r0, r0, r3
    2a92:	4152      	adcs	r2, r2
    2a94:	0b43      	lsrs	r3, r0, #13
    2a96:	428b      	cmp	r3, r1
    2a98:	d301      	bcc.n	2a9e <__udivsi3+0x5e>
    2a9a:	034b      	lsls	r3, r1, #13
    2a9c:	1ac0      	subs	r0, r0, r3
    2a9e:	4152      	adcs	r2, r2
    2aa0:	0b03      	lsrs	r3, r0, #12
    2aa2:	428b      	cmp	r3, r1
    2aa4:	d301      	bcc.n	2aaa <__udivsi3+0x6a>
    2aa6:	030b      	lsls	r3, r1, #12
    2aa8:	1ac0      	subs	r0, r0, r3
    2aaa:	4152      	adcs	r2, r2
    2aac:	0ac3      	lsrs	r3, r0, #11
    2aae:	428b      	cmp	r3, r1
    2ab0:	d301      	bcc.n	2ab6 <__udivsi3+0x76>
    2ab2:	02cb      	lsls	r3, r1, #11
    2ab4:	1ac0      	subs	r0, r0, r3
    2ab6:	4152      	adcs	r2, r2
    2ab8:	0a83      	lsrs	r3, r0, #10
    2aba:	428b      	cmp	r3, r1
    2abc:	d301      	bcc.n	2ac2 <__udivsi3+0x82>
    2abe:	028b      	lsls	r3, r1, #10
    2ac0:	1ac0      	subs	r0, r0, r3
    2ac2:	4152      	adcs	r2, r2
    2ac4:	0a43      	lsrs	r3, r0, #9
    2ac6:	428b      	cmp	r3, r1
    2ac8:	d301      	bcc.n	2ace <__udivsi3+0x8e>
    2aca:	024b      	lsls	r3, r1, #9
    2acc:	1ac0      	subs	r0, r0, r3
    2ace:	4152      	adcs	r2, r2
    2ad0:	0a03      	lsrs	r3, r0, #8
    2ad2:	428b      	cmp	r3, r1
    2ad4:	d301      	bcc.n	2ada <__udivsi3+0x9a>
    2ad6:	020b      	lsls	r3, r1, #8
    2ad8:	1ac0      	subs	r0, r0, r3
    2ada:	4152      	adcs	r2, r2
    2adc:	d2cd      	bcs.n	2a7a <__udivsi3+0x3a>
    2ade:	09c3      	lsrs	r3, r0, #7
    2ae0:	428b      	cmp	r3, r1
    2ae2:	d301      	bcc.n	2ae8 <__udivsi3+0xa8>
    2ae4:	01cb      	lsls	r3, r1, #7
    2ae6:	1ac0      	subs	r0, r0, r3
    2ae8:	4152      	adcs	r2, r2
    2aea:	0983      	lsrs	r3, r0, #6
    2aec:	428b      	cmp	r3, r1
    2aee:	d301      	bcc.n	2af4 <__udivsi3+0xb4>
    2af0:	018b      	lsls	r3, r1, #6
    2af2:	1ac0      	subs	r0, r0, r3
    2af4:	4152      	adcs	r2, r2
    2af6:	0943      	lsrs	r3, r0, #5
    2af8:	428b      	cmp	r3, r1
    2afa:	d301      	bcc.n	2b00 <__udivsi3+0xc0>
    2afc:	014b      	lsls	r3, r1, #5
    2afe:	1ac0      	subs	r0, r0, r3
    2b00:	4152      	adcs	r2, r2
    2b02:	0903      	lsrs	r3, r0, #4
    2b04:	428b      	cmp	r3, r1
    2b06:	d301      	bcc.n	2b0c <__udivsi3+0xcc>
    2b08:	010b      	lsls	r3, r1, #4
    2b0a:	1ac0      	subs	r0, r0, r3
    2b0c:	4152      	adcs	r2, r2
    2b0e:	08c3      	lsrs	r3, r0, #3
    2b10:	428b      	cmp	r3, r1
    2b12:	d301      	bcc.n	2b18 <__udivsi3+0xd8>
    2b14:	00cb      	lsls	r3, r1, #3
    2b16:	1ac0      	subs	r0, r0, r3
    2b18:	4152      	adcs	r2, r2
    2b1a:	0883      	lsrs	r3, r0, #2
    2b1c:	428b      	cmp	r3, r1
    2b1e:	d301      	bcc.n	2b24 <__udivsi3+0xe4>
    2b20:	008b      	lsls	r3, r1, #2
    2b22:	1ac0      	subs	r0, r0, r3
    2b24:	4152      	adcs	r2, r2
    2b26:	0843      	lsrs	r3, r0, #1
    2b28:	428b      	cmp	r3, r1
    2b2a:	d301      	bcc.n	2b30 <__udivsi3+0xf0>
    2b2c:	004b      	lsls	r3, r1, #1
    2b2e:	1ac0      	subs	r0, r0, r3
    2b30:	4152      	adcs	r2, r2
    2b32:	1a41      	subs	r1, r0, r1
    2b34:	d200      	bcs.n	2b38 <__udivsi3+0xf8>
    2b36:	4601      	mov	r1, r0
    2b38:	4152      	adcs	r2, r2
    2b3a:	4610      	mov	r0, r2
    2b3c:	4770      	bx	lr
    2b3e:	e7ff      	b.n	2b40 <__udivsi3+0x100>
    2b40:	b501      	push	{r0, lr}
    2b42:	2000      	movs	r0, #0
    2b44:	f000 f806 	bl	2b54 <__aeabi_idiv0>
    2b48:	bd02      	pop	{r1, pc}
    2b4a:	46c0      	nop			; (mov r8, r8)

00002b4c <__aeabi_uidivmod>:
    2b4c:	2900      	cmp	r1, #0
    2b4e:	d0f7      	beq.n	2b40 <__udivsi3+0x100>
    2b50:	e776      	b.n	2a40 <__udivsi3>
    2b52:	4770      	bx	lr

00002b54 <__aeabi_idiv0>:
    2b54:	4770      	bx	lr
    2b56:	46c0      	nop			; (mov r8, r8)

00002b58 <__libc_init_array>:
    2b58:	b570      	push	{r4, r5, r6, lr}
    2b5a:	2600      	movs	r6, #0
    2b5c:	4d0c      	ldr	r5, [pc, #48]	; (2b90 <__libc_init_array+0x38>)
    2b5e:	4c0d      	ldr	r4, [pc, #52]	; (2b94 <__libc_init_array+0x3c>)
    2b60:	1b64      	subs	r4, r4, r5
    2b62:	10a4      	asrs	r4, r4, #2
    2b64:	42a6      	cmp	r6, r4
    2b66:	d109      	bne.n	2b7c <__libc_init_array+0x24>
    2b68:	2600      	movs	r6, #0
    2b6a:	f000 fd09 	bl	3580 <_init>
    2b6e:	4d0a      	ldr	r5, [pc, #40]	; (2b98 <__libc_init_array+0x40>)
    2b70:	4c0a      	ldr	r4, [pc, #40]	; (2b9c <__libc_init_array+0x44>)
    2b72:	1b64      	subs	r4, r4, r5
    2b74:	10a4      	asrs	r4, r4, #2
    2b76:	42a6      	cmp	r6, r4
    2b78:	d105      	bne.n	2b86 <__libc_init_array+0x2e>
    2b7a:	bd70      	pop	{r4, r5, r6, pc}
    2b7c:	00b3      	lsls	r3, r6, #2
    2b7e:	58eb      	ldr	r3, [r5, r3]
    2b80:	4798      	blx	r3
    2b82:	3601      	adds	r6, #1
    2b84:	e7ee      	b.n	2b64 <__libc_init_array+0xc>
    2b86:	00b3      	lsls	r3, r6, #2
    2b88:	58eb      	ldr	r3, [r5, r3]
    2b8a:	4798      	blx	r3
    2b8c:	3601      	adds	r6, #1
    2b8e:	e7f2      	b.n	2b76 <__libc_init_array+0x1e>
    2b90:	0000358c 	.word	0x0000358c
    2b94:	0000358c 	.word	0x0000358c
    2b98:	0000358c 	.word	0x0000358c
    2b9c:	00003590 	.word	0x00003590

00002ba0 <memcpy>:
    2ba0:	2300      	movs	r3, #0
    2ba2:	b510      	push	{r4, lr}
    2ba4:	429a      	cmp	r2, r3
    2ba6:	d100      	bne.n	2baa <memcpy+0xa>
    2ba8:	bd10      	pop	{r4, pc}
    2baa:	5ccc      	ldrb	r4, [r1, r3]
    2bac:	54c4      	strb	r4, [r0, r3]
    2bae:	3301      	adds	r3, #1
    2bb0:	e7f8      	b.n	2ba4 <memcpy+0x4>

00002bb2 <memset>:
    2bb2:	0003      	movs	r3, r0
    2bb4:	1882      	adds	r2, r0, r2
    2bb6:	4293      	cmp	r3, r2
    2bb8:	d100      	bne.n	2bbc <memset+0xa>
    2bba:	4770      	bx	lr
    2bbc:	7019      	strb	r1, [r3, #0]
    2bbe:	3301      	adds	r3, #1
    2bc0:	e7f9      	b.n	2bb6 <memset+0x4>
	...

00002bc4 <siprintf>:
    2bc4:	b40e      	push	{r1, r2, r3}
    2bc6:	b510      	push	{r4, lr}
    2bc8:	b09d      	sub	sp, #116	; 0x74
    2bca:	a902      	add	r1, sp, #8
    2bcc:	9002      	str	r0, [sp, #8]
    2bce:	6108      	str	r0, [r1, #16]
    2bd0:	480b      	ldr	r0, [pc, #44]	; (2c00 <siprintf+0x3c>)
    2bd2:	2482      	movs	r4, #130	; 0x82
    2bd4:	6088      	str	r0, [r1, #8]
    2bd6:	6148      	str	r0, [r1, #20]
    2bd8:	2001      	movs	r0, #1
    2bda:	4240      	negs	r0, r0
    2bdc:	ab1f      	add	r3, sp, #124	; 0x7c
    2bde:	81c8      	strh	r0, [r1, #14]
    2be0:	4808      	ldr	r0, [pc, #32]	; (2c04 <siprintf+0x40>)
    2be2:	cb04      	ldmia	r3!, {r2}
    2be4:	00a4      	lsls	r4, r4, #2
    2be6:	6800      	ldr	r0, [r0, #0]
    2be8:	9301      	str	r3, [sp, #4]
    2bea:	818c      	strh	r4, [r1, #12]
    2bec:	f000 f8d4 	bl	2d98 <_svfiprintf_r>
    2bf0:	2300      	movs	r3, #0
    2bf2:	9a02      	ldr	r2, [sp, #8]
    2bf4:	7013      	strb	r3, [r2, #0]
    2bf6:	b01d      	add	sp, #116	; 0x74
    2bf8:	bc10      	pop	{r4}
    2bfa:	bc08      	pop	{r3}
    2bfc:	b003      	add	sp, #12
    2bfe:	4718      	bx	r3
    2c00:	7fffffff 	.word	0x7fffffff
    2c04:	20000068 	.word	0x20000068

00002c08 <strlen>:
    2c08:	2300      	movs	r3, #0
    2c0a:	5cc2      	ldrb	r2, [r0, r3]
    2c0c:	3301      	adds	r3, #1
    2c0e:	2a00      	cmp	r2, #0
    2c10:	d1fb      	bne.n	2c0a <strlen+0x2>
    2c12:	1e58      	subs	r0, r3, #1
    2c14:	4770      	bx	lr
	...

00002c18 <_malloc_r>:
    2c18:	2303      	movs	r3, #3
    2c1a:	b570      	push	{r4, r5, r6, lr}
    2c1c:	1ccd      	adds	r5, r1, #3
    2c1e:	439d      	bics	r5, r3
    2c20:	3508      	adds	r5, #8
    2c22:	0006      	movs	r6, r0
    2c24:	2d0c      	cmp	r5, #12
    2c26:	d21e      	bcs.n	2c66 <_malloc_r+0x4e>
    2c28:	250c      	movs	r5, #12
    2c2a:	42a9      	cmp	r1, r5
    2c2c:	d81d      	bhi.n	2c6a <_malloc_r+0x52>
    2c2e:	0030      	movs	r0, r6
    2c30:	f000 fb6d 	bl	330e <__malloc_lock>
    2c34:	4a25      	ldr	r2, [pc, #148]	; (2ccc <_malloc_r+0xb4>)
    2c36:	6814      	ldr	r4, [r2, #0]
    2c38:	0021      	movs	r1, r4
    2c3a:	2900      	cmp	r1, #0
    2c3c:	d119      	bne.n	2c72 <_malloc_r+0x5a>
    2c3e:	4c24      	ldr	r4, [pc, #144]	; (2cd0 <_malloc_r+0xb8>)
    2c40:	6823      	ldr	r3, [r4, #0]
    2c42:	2b00      	cmp	r3, #0
    2c44:	d103      	bne.n	2c4e <_malloc_r+0x36>
    2c46:	0030      	movs	r0, r6
    2c48:	f000 fb32 	bl	32b0 <_sbrk_r>
    2c4c:	6020      	str	r0, [r4, #0]
    2c4e:	0029      	movs	r1, r5
    2c50:	0030      	movs	r0, r6
    2c52:	f000 fb2d 	bl	32b0 <_sbrk_r>
    2c56:	1c43      	adds	r3, r0, #1
    2c58:	d12c      	bne.n	2cb4 <_malloc_r+0x9c>
    2c5a:	230c      	movs	r3, #12
    2c5c:	0030      	movs	r0, r6
    2c5e:	6033      	str	r3, [r6, #0]
    2c60:	f000 fb56 	bl	3310 <__malloc_unlock>
    2c64:	e003      	b.n	2c6e <_malloc_r+0x56>
    2c66:	2d00      	cmp	r5, #0
    2c68:	dadf      	bge.n	2c2a <_malloc_r+0x12>
    2c6a:	230c      	movs	r3, #12
    2c6c:	6033      	str	r3, [r6, #0]
    2c6e:	2000      	movs	r0, #0
    2c70:	bd70      	pop	{r4, r5, r6, pc}
    2c72:	680b      	ldr	r3, [r1, #0]
    2c74:	1b5b      	subs	r3, r3, r5
    2c76:	d41a      	bmi.n	2cae <_malloc_r+0x96>
    2c78:	2b0b      	cmp	r3, #11
    2c7a:	d903      	bls.n	2c84 <_malloc_r+0x6c>
    2c7c:	600b      	str	r3, [r1, #0]
    2c7e:	18cc      	adds	r4, r1, r3
    2c80:	6025      	str	r5, [r4, #0]
    2c82:	e003      	b.n	2c8c <_malloc_r+0x74>
    2c84:	428c      	cmp	r4, r1
    2c86:	d10e      	bne.n	2ca6 <_malloc_r+0x8e>
    2c88:	6863      	ldr	r3, [r4, #4]
    2c8a:	6013      	str	r3, [r2, #0]
    2c8c:	0030      	movs	r0, r6
    2c8e:	f000 fb3f 	bl	3310 <__malloc_unlock>
    2c92:	0020      	movs	r0, r4
    2c94:	2207      	movs	r2, #7
    2c96:	300b      	adds	r0, #11
    2c98:	1d23      	adds	r3, r4, #4
    2c9a:	4390      	bics	r0, r2
    2c9c:	1ac3      	subs	r3, r0, r3
    2c9e:	d0e7      	beq.n	2c70 <_malloc_r+0x58>
    2ca0:	425a      	negs	r2, r3
    2ca2:	50e2      	str	r2, [r4, r3]
    2ca4:	e7e4      	b.n	2c70 <_malloc_r+0x58>
    2ca6:	684b      	ldr	r3, [r1, #4]
    2ca8:	6063      	str	r3, [r4, #4]
    2caa:	000c      	movs	r4, r1
    2cac:	e7ee      	b.n	2c8c <_malloc_r+0x74>
    2cae:	000c      	movs	r4, r1
    2cb0:	6849      	ldr	r1, [r1, #4]
    2cb2:	e7c2      	b.n	2c3a <_malloc_r+0x22>
    2cb4:	2303      	movs	r3, #3
    2cb6:	1cc4      	adds	r4, r0, #3
    2cb8:	439c      	bics	r4, r3
    2cba:	42a0      	cmp	r0, r4
    2cbc:	d0e0      	beq.n	2c80 <_malloc_r+0x68>
    2cbe:	1a21      	subs	r1, r4, r0
    2cc0:	0030      	movs	r0, r6
    2cc2:	f000 faf5 	bl	32b0 <_sbrk_r>
    2cc6:	1c43      	adds	r3, r0, #1
    2cc8:	d1da      	bne.n	2c80 <_malloc_r+0x68>
    2cca:	e7c6      	b.n	2c5a <_malloc_r+0x42>
    2ccc:	200006ac 	.word	0x200006ac
    2cd0:	200006b0 	.word	0x200006b0

00002cd4 <__ssputs_r>:
    2cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd6:	688e      	ldr	r6, [r1, #8]
    2cd8:	b085      	sub	sp, #20
    2cda:	0007      	movs	r7, r0
    2cdc:	000c      	movs	r4, r1
    2cde:	9203      	str	r2, [sp, #12]
    2ce0:	9301      	str	r3, [sp, #4]
    2ce2:	429e      	cmp	r6, r3
    2ce4:	d839      	bhi.n	2d5a <__ssputs_r+0x86>
    2ce6:	2390      	movs	r3, #144	; 0x90
    2ce8:	898a      	ldrh	r2, [r1, #12]
    2cea:	00db      	lsls	r3, r3, #3
    2cec:	421a      	tst	r2, r3
    2cee:	d034      	beq.n	2d5a <__ssputs_r+0x86>
    2cf0:	2503      	movs	r5, #3
    2cf2:	6909      	ldr	r1, [r1, #16]
    2cf4:	6823      	ldr	r3, [r4, #0]
    2cf6:	1a5b      	subs	r3, r3, r1
    2cf8:	9302      	str	r3, [sp, #8]
    2cfa:	6963      	ldr	r3, [r4, #20]
    2cfc:	9802      	ldr	r0, [sp, #8]
    2cfe:	435d      	muls	r5, r3
    2d00:	0feb      	lsrs	r3, r5, #31
    2d02:	195d      	adds	r5, r3, r5
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	106d      	asrs	r5, r5, #1
    2d08:	3301      	adds	r3, #1
    2d0a:	181b      	adds	r3, r3, r0
    2d0c:	42ab      	cmp	r3, r5
    2d0e:	d900      	bls.n	2d12 <__ssputs_r+0x3e>
    2d10:	001d      	movs	r5, r3
    2d12:	0553      	lsls	r3, r2, #21
    2d14:	d532      	bpl.n	2d7c <__ssputs_r+0xa8>
    2d16:	0029      	movs	r1, r5
    2d18:	0038      	movs	r0, r7
    2d1a:	f7ff ff7d 	bl	2c18 <_malloc_r>
    2d1e:	1e06      	subs	r6, r0, #0
    2d20:	d109      	bne.n	2d36 <__ssputs_r+0x62>
    2d22:	230c      	movs	r3, #12
    2d24:	603b      	str	r3, [r7, #0]
    2d26:	2340      	movs	r3, #64	; 0x40
    2d28:	2001      	movs	r0, #1
    2d2a:	89a2      	ldrh	r2, [r4, #12]
    2d2c:	4240      	negs	r0, r0
    2d2e:	4313      	orrs	r3, r2
    2d30:	81a3      	strh	r3, [r4, #12]
    2d32:	b005      	add	sp, #20
    2d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d36:	9a02      	ldr	r2, [sp, #8]
    2d38:	6921      	ldr	r1, [r4, #16]
    2d3a:	f7ff ff31 	bl	2ba0 <memcpy>
    2d3e:	89a3      	ldrh	r3, [r4, #12]
    2d40:	4a14      	ldr	r2, [pc, #80]	; (2d94 <__ssputs_r+0xc0>)
    2d42:	401a      	ands	r2, r3
    2d44:	2380      	movs	r3, #128	; 0x80
    2d46:	4313      	orrs	r3, r2
    2d48:	81a3      	strh	r3, [r4, #12]
    2d4a:	9b02      	ldr	r3, [sp, #8]
    2d4c:	6126      	str	r6, [r4, #16]
    2d4e:	18f6      	adds	r6, r6, r3
    2d50:	6026      	str	r6, [r4, #0]
    2d52:	6165      	str	r5, [r4, #20]
    2d54:	9e01      	ldr	r6, [sp, #4]
    2d56:	1aed      	subs	r5, r5, r3
    2d58:	60a5      	str	r5, [r4, #8]
    2d5a:	9b01      	ldr	r3, [sp, #4]
    2d5c:	42b3      	cmp	r3, r6
    2d5e:	d200      	bcs.n	2d62 <__ssputs_r+0x8e>
    2d60:	001e      	movs	r6, r3
    2d62:	0032      	movs	r2, r6
    2d64:	9903      	ldr	r1, [sp, #12]
    2d66:	6820      	ldr	r0, [r4, #0]
    2d68:	f000 fabf 	bl	32ea <memmove>
    2d6c:	68a3      	ldr	r3, [r4, #8]
    2d6e:	2000      	movs	r0, #0
    2d70:	1b9b      	subs	r3, r3, r6
    2d72:	60a3      	str	r3, [r4, #8]
    2d74:	6823      	ldr	r3, [r4, #0]
    2d76:	199e      	adds	r6, r3, r6
    2d78:	6026      	str	r6, [r4, #0]
    2d7a:	e7da      	b.n	2d32 <__ssputs_r+0x5e>
    2d7c:	002a      	movs	r2, r5
    2d7e:	0038      	movs	r0, r7
    2d80:	f000 fb12 	bl	33a8 <_realloc_r>
    2d84:	1e06      	subs	r6, r0, #0
    2d86:	d1e0      	bne.n	2d4a <__ssputs_r+0x76>
    2d88:	6921      	ldr	r1, [r4, #16]
    2d8a:	0038      	movs	r0, r7
    2d8c:	f000 fac2 	bl	3314 <_free_r>
    2d90:	e7c7      	b.n	2d22 <__ssputs_r+0x4e>
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	fffffb7f 	.word	0xfffffb7f

00002d98 <_svfiprintf_r>:
    2d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9a:	b09f      	sub	sp, #124	; 0x7c
    2d9c:	9002      	str	r0, [sp, #8]
    2d9e:	9305      	str	r3, [sp, #20]
    2da0:	898b      	ldrh	r3, [r1, #12]
    2da2:	000f      	movs	r7, r1
    2da4:	0016      	movs	r6, r2
    2da6:	061b      	lsls	r3, r3, #24
    2da8:	d511      	bpl.n	2dce <_svfiprintf_r+0x36>
    2daa:	690b      	ldr	r3, [r1, #16]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d10e      	bne.n	2dce <_svfiprintf_r+0x36>
    2db0:	2140      	movs	r1, #64	; 0x40
    2db2:	f7ff ff31 	bl	2c18 <_malloc_r>
    2db6:	6038      	str	r0, [r7, #0]
    2db8:	6138      	str	r0, [r7, #16]
    2dba:	2800      	cmp	r0, #0
    2dbc:	d105      	bne.n	2dca <_svfiprintf_r+0x32>
    2dbe:	230c      	movs	r3, #12
    2dc0:	9a02      	ldr	r2, [sp, #8]
    2dc2:	3801      	subs	r0, #1
    2dc4:	6013      	str	r3, [r2, #0]
    2dc6:	b01f      	add	sp, #124	; 0x7c
    2dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dca:	2340      	movs	r3, #64	; 0x40
    2dcc:	617b      	str	r3, [r7, #20]
    2dce:	2300      	movs	r3, #0
    2dd0:	ad06      	add	r5, sp, #24
    2dd2:	616b      	str	r3, [r5, #20]
    2dd4:	3320      	adds	r3, #32
    2dd6:	766b      	strb	r3, [r5, #25]
    2dd8:	3310      	adds	r3, #16
    2dda:	76ab      	strb	r3, [r5, #26]
    2ddc:	0034      	movs	r4, r6
    2dde:	7823      	ldrb	r3, [r4, #0]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d147      	bne.n	2e74 <_svfiprintf_r+0xdc>
    2de4:	1ba3      	subs	r3, r4, r6
    2de6:	9304      	str	r3, [sp, #16]
    2de8:	d00d      	beq.n	2e06 <_svfiprintf_r+0x6e>
    2dea:	1ba3      	subs	r3, r4, r6
    2dec:	0032      	movs	r2, r6
    2dee:	0039      	movs	r1, r7
    2df0:	9802      	ldr	r0, [sp, #8]
    2df2:	f7ff ff6f 	bl	2cd4 <__ssputs_r>
    2df6:	1c43      	adds	r3, r0, #1
    2df8:	d100      	bne.n	2dfc <_svfiprintf_r+0x64>
    2dfa:	e0b5      	b.n	2f68 <_svfiprintf_r+0x1d0>
    2dfc:	696a      	ldr	r2, [r5, #20]
    2dfe:	9b04      	ldr	r3, [sp, #16]
    2e00:	4694      	mov	ip, r2
    2e02:	4463      	add	r3, ip
    2e04:	616b      	str	r3, [r5, #20]
    2e06:	7823      	ldrb	r3, [r4, #0]
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d100      	bne.n	2e0e <_svfiprintf_r+0x76>
    2e0c:	e0ac      	b.n	2f68 <_svfiprintf_r+0x1d0>
    2e0e:	2201      	movs	r2, #1
    2e10:	2300      	movs	r3, #0
    2e12:	4252      	negs	r2, r2
    2e14:	606a      	str	r2, [r5, #4]
    2e16:	a902      	add	r1, sp, #8
    2e18:	3254      	adds	r2, #84	; 0x54
    2e1a:	1852      	adds	r2, r2, r1
    2e1c:	3401      	adds	r4, #1
    2e1e:	602b      	str	r3, [r5, #0]
    2e20:	60eb      	str	r3, [r5, #12]
    2e22:	60ab      	str	r3, [r5, #8]
    2e24:	7013      	strb	r3, [r2, #0]
    2e26:	65ab      	str	r3, [r5, #88]	; 0x58
    2e28:	4e58      	ldr	r6, [pc, #352]	; (2f8c <_svfiprintf_r+0x1f4>)
    2e2a:	2205      	movs	r2, #5
    2e2c:	7821      	ldrb	r1, [r4, #0]
    2e2e:	0030      	movs	r0, r6
    2e30:	f000 fa50 	bl	32d4 <memchr>
    2e34:	1c62      	adds	r2, r4, #1
    2e36:	2800      	cmp	r0, #0
    2e38:	d120      	bne.n	2e7c <_svfiprintf_r+0xe4>
    2e3a:	6829      	ldr	r1, [r5, #0]
    2e3c:	06cb      	lsls	r3, r1, #27
    2e3e:	d504      	bpl.n	2e4a <_svfiprintf_r+0xb2>
    2e40:	2353      	movs	r3, #83	; 0x53
    2e42:	ae02      	add	r6, sp, #8
    2e44:	3020      	adds	r0, #32
    2e46:	199b      	adds	r3, r3, r6
    2e48:	7018      	strb	r0, [r3, #0]
    2e4a:	070b      	lsls	r3, r1, #28
    2e4c:	d504      	bpl.n	2e58 <_svfiprintf_r+0xc0>
    2e4e:	2353      	movs	r3, #83	; 0x53
    2e50:	202b      	movs	r0, #43	; 0x2b
    2e52:	ae02      	add	r6, sp, #8
    2e54:	199b      	adds	r3, r3, r6
    2e56:	7018      	strb	r0, [r3, #0]
    2e58:	7823      	ldrb	r3, [r4, #0]
    2e5a:	2b2a      	cmp	r3, #42	; 0x2a
    2e5c:	d016      	beq.n	2e8c <_svfiprintf_r+0xf4>
    2e5e:	2000      	movs	r0, #0
    2e60:	210a      	movs	r1, #10
    2e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2e64:	7822      	ldrb	r2, [r4, #0]
    2e66:	3a30      	subs	r2, #48	; 0x30
    2e68:	2a09      	cmp	r2, #9
    2e6a:	d955      	bls.n	2f18 <_svfiprintf_r+0x180>
    2e6c:	2800      	cmp	r0, #0
    2e6e:	d015      	beq.n	2e9c <_svfiprintf_r+0x104>
    2e70:	9309      	str	r3, [sp, #36]	; 0x24
    2e72:	e013      	b.n	2e9c <_svfiprintf_r+0x104>
    2e74:	2b25      	cmp	r3, #37	; 0x25
    2e76:	d0b5      	beq.n	2de4 <_svfiprintf_r+0x4c>
    2e78:	3401      	adds	r4, #1
    2e7a:	e7b0      	b.n	2dde <_svfiprintf_r+0x46>
    2e7c:	2301      	movs	r3, #1
    2e7e:	1b80      	subs	r0, r0, r6
    2e80:	4083      	lsls	r3, r0
    2e82:	6829      	ldr	r1, [r5, #0]
    2e84:	0014      	movs	r4, r2
    2e86:	430b      	orrs	r3, r1
    2e88:	602b      	str	r3, [r5, #0]
    2e8a:	e7cd      	b.n	2e28 <_svfiprintf_r+0x90>
    2e8c:	9b05      	ldr	r3, [sp, #20]
    2e8e:	1d18      	adds	r0, r3, #4
    2e90:	681b      	ldr	r3, [r3, #0]
    2e92:	9005      	str	r0, [sp, #20]
    2e94:	2b00      	cmp	r3, #0
    2e96:	db39      	blt.n	2f0c <_svfiprintf_r+0x174>
    2e98:	9309      	str	r3, [sp, #36]	; 0x24
    2e9a:	0014      	movs	r4, r2
    2e9c:	7823      	ldrb	r3, [r4, #0]
    2e9e:	2b2e      	cmp	r3, #46	; 0x2e
    2ea0:	d10b      	bne.n	2eba <_svfiprintf_r+0x122>
    2ea2:	7863      	ldrb	r3, [r4, #1]
    2ea4:	1c62      	adds	r2, r4, #1
    2ea6:	2b2a      	cmp	r3, #42	; 0x2a
    2ea8:	d13e      	bne.n	2f28 <_svfiprintf_r+0x190>
    2eaa:	9b05      	ldr	r3, [sp, #20]
    2eac:	3402      	adds	r4, #2
    2eae:	1d1a      	adds	r2, r3, #4
    2eb0:	681b      	ldr	r3, [r3, #0]
    2eb2:	9205      	str	r2, [sp, #20]
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	db34      	blt.n	2f22 <_svfiprintf_r+0x18a>
    2eb8:	9307      	str	r3, [sp, #28]
    2eba:	4e35      	ldr	r6, [pc, #212]	; (2f90 <_svfiprintf_r+0x1f8>)
    2ebc:	7821      	ldrb	r1, [r4, #0]
    2ebe:	2203      	movs	r2, #3
    2ec0:	0030      	movs	r0, r6
    2ec2:	f000 fa07 	bl	32d4 <memchr>
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d006      	beq.n	2ed8 <_svfiprintf_r+0x140>
    2eca:	2340      	movs	r3, #64	; 0x40
    2ecc:	1b80      	subs	r0, r0, r6
    2ece:	4083      	lsls	r3, r0
    2ed0:	682a      	ldr	r2, [r5, #0]
    2ed2:	3401      	adds	r4, #1
    2ed4:	4313      	orrs	r3, r2
    2ed6:	602b      	str	r3, [r5, #0]
    2ed8:	7821      	ldrb	r1, [r4, #0]
    2eda:	2206      	movs	r2, #6
    2edc:	482d      	ldr	r0, [pc, #180]	; (2f94 <_svfiprintf_r+0x1fc>)
    2ede:	1c66      	adds	r6, r4, #1
    2ee0:	7629      	strb	r1, [r5, #24]
    2ee2:	f000 f9f7 	bl	32d4 <memchr>
    2ee6:	2800      	cmp	r0, #0
    2ee8:	d046      	beq.n	2f78 <_svfiprintf_r+0x1e0>
    2eea:	4b2b      	ldr	r3, [pc, #172]	; (2f98 <_svfiprintf_r+0x200>)
    2eec:	2b00      	cmp	r3, #0
    2eee:	d12f      	bne.n	2f50 <_svfiprintf_r+0x1b8>
    2ef0:	6829      	ldr	r1, [r5, #0]
    2ef2:	9b05      	ldr	r3, [sp, #20]
    2ef4:	2207      	movs	r2, #7
    2ef6:	05c9      	lsls	r1, r1, #23
    2ef8:	d528      	bpl.n	2f4c <_svfiprintf_r+0x1b4>
    2efa:	189b      	adds	r3, r3, r2
    2efc:	4393      	bics	r3, r2
    2efe:	3308      	adds	r3, #8
    2f00:	9305      	str	r3, [sp, #20]
    2f02:	696b      	ldr	r3, [r5, #20]
    2f04:	9a03      	ldr	r2, [sp, #12]
    2f06:	189b      	adds	r3, r3, r2
    2f08:	616b      	str	r3, [r5, #20]
    2f0a:	e767      	b.n	2ddc <_svfiprintf_r+0x44>
    2f0c:	425b      	negs	r3, r3
    2f0e:	60eb      	str	r3, [r5, #12]
    2f10:	2302      	movs	r3, #2
    2f12:	430b      	orrs	r3, r1
    2f14:	602b      	str	r3, [r5, #0]
    2f16:	e7c0      	b.n	2e9a <_svfiprintf_r+0x102>
    2f18:	434b      	muls	r3, r1
    2f1a:	3401      	adds	r4, #1
    2f1c:	189b      	adds	r3, r3, r2
    2f1e:	2001      	movs	r0, #1
    2f20:	e7a0      	b.n	2e64 <_svfiprintf_r+0xcc>
    2f22:	2301      	movs	r3, #1
    2f24:	425b      	negs	r3, r3
    2f26:	e7c7      	b.n	2eb8 <_svfiprintf_r+0x120>
    2f28:	2300      	movs	r3, #0
    2f2a:	0014      	movs	r4, r2
    2f2c:	200a      	movs	r0, #10
    2f2e:	001a      	movs	r2, r3
    2f30:	606b      	str	r3, [r5, #4]
    2f32:	7821      	ldrb	r1, [r4, #0]
    2f34:	3930      	subs	r1, #48	; 0x30
    2f36:	2909      	cmp	r1, #9
    2f38:	d903      	bls.n	2f42 <_svfiprintf_r+0x1aa>
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d0bd      	beq.n	2eba <_svfiprintf_r+0x122>
    2f3e:	9207      	str	r2, [sp, #28]
    2f40:	e7bb      	b.n	2eba <_svfiprintf_r+0x122>
    2f42:	4342      	muls	r2, r0
    2f44:	3401      	adds	r4, #1
    2f46:	1852      	adds	r2, r2, r1
    2f48:	2301      	movs	r3, #1
    2f4a:	e7f2      	b.n	2f32 <_svfiprintf_r+0x19a>
    2f4c:	3307      	adds	r3, #7
    2f4e:	e7d5      	b.n	2efc <_svfiprintf_r+0x164>
    2f50:	ab05      	add	r3, sp, #20
    2f52:	9300      	str	r3, [sp, #0]
    2f54:	003a      	movs	r2, r7
    2f56:	4b11      	ldr	r3, [pc, #68]	; (2f9c <_svfiprintf_r+0x204>)
    2f58:	0029      	movs	r1, r5
    2f5a:	9802      	ldr	r0, [sp, #8]
    2f5c:	e000      	b.n	2f60 <_svfiprintf_r+0x1c8>
    2f5e:	bf00      	nop
    2f60:	9003      	str	r0, [sp, #12]
    2f62:	9b03      	ldr	r3, [sp, #12]
    2f64:	3301      	adds	r3, #1
    2f66:	d1cc      	bne.n	2f02 <_svfiprintf_r+0x16a>
    2f68:	89bb      	ldrh	r3, [r7, #12]
    2f6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2f6c:	065b      	lsls	r3, r3, #25
    2f6e:	d400      	bmi.n	2f72 <_svfiprintf_r+0x1da>
    2f70:	e729      	b.n	2dc6 <_svfiprintf_r+0x2e>
    2f72:	2001      	movs	r0, #1
    2f74:	4240      	negs	r0, r0
    2f76:	e726      	b.n	2dc6 <_svfiprintf_r+0x2e>
    2f78:	ab05      	add	r3, sp, #20
    2f7a:	9300      	str	r3, [sp, #0]
    2f7c:	003a      	movs	r2, r7
    2f7e:	4b07      	ldr	r3, [pc, #28]	; (2f9c <_svfiprintf_r+0x204>)
    2f80:	0029      	movs	r1, r5
    2f82:	9802      	ldr	r0, [sp, #8]
    2f84:	f000 f87a 	bl	307c <_printf_i>
    2f88:	e7ea      	b.n	2f60 <_svfiprintf_r+0x1c8>
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	0000354c 	.word	0x0000354c
    2f90:	00003552 	.word	0x00003552
    2f94:	00003556 	.word	0x00003556
    2f98:	00000000 	.word	0x00000000
    2f9c:	00002cd5 	.word	0x00002cd5

00002fa0 <_printf_common>:
    2fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2fa2:	0015      	movs	r5, r2
    2fa4:	9301      	str	r3, [sp, #4]
    2fa6:	688a      	ldr	r2, [r1, #8]
    2fa8:	690b      	ldr	r3, [r1, #16]
    2faa:	9000      	str	r0, [sp, #0]
    2fac:	000c      	movs	r4, r1
    2fae:	4293      	cmp	r3, r2
    2fb0:	da00      	bge.n	2fb4 <_printf_common+0x14>
    2fb2:	0013      	movs	r3, r2
    2fb4:	0022      	movs	r2, r4
    2fb6:	602b      	str	r3, [r5, #0]
    2fb8:	3243      	adds	r2, #67	; 0x43
    2fba:	7812      	ldrb	r2, [r2, #0]
    2fbc:	2a00      	cmp	r2, #0
    2fbe:	d001      	beq.n	2fc4 <_printf_common+0x24>
    2fc0:	3301      	adds	r3, #1
    2fc2:	602b      	str	r3, [r5, #0]
    2fc4:	6823      	ldr	r3, [r4, #0]
    2fc6:	069b      	lsls	r3, r3, #26
    2fc8:	d502      	bpl.n	2fd0 <_printf_common+0x30>
    2fca:	682b      	ldr	r3, [r5, #0]
    2fcc:	3302      	adds	r3, #2
    2fce:	602b      	str	r3, [r5, #0]
    2fd0:	2706      	movs	r7, #6
    2fd2:	6823      	ldr	r3, [r4, #0]
    2fd4:	401f      	ands	r7, r3
    2fd6:	d027      	beq.n	3028 <_printf_common+0x88>
    2fd8:	0023      	movs	r3, r4
    2fda:	3343      	adds	r3, #67	; 0x43
    2fdc:	781b      	ldrb	r3, [r3, #0]
    2fde:	1e5a      	subs	r2, r3, #1
    2fe0:	4193      	sbcs	r3, r2
    2fe2:	6822      	ldr	r2, [r4, #0]
    2fe4:	0692      	lsls	r2, r2, #26
    2fe6:	d430      	bmi.n	304a <_printf_common+0xaa>
    2fe8:	0022      	movs	r2, r4
    2fea:	9901      	ldr	r1, [sp, #4]
    2fec:	3243      	adds	r2, #67	; 0x43
    2fee:	9800      	ldr	r0, [sp, #0]
    2ff0:	9e08      	ldr	r6, [sp, #32]
    2ff2:	47b0      	blx	r6
    2ff4:	1c43      	adds	r3, r0, #1
    2ff6:	d025      	beq.n	3044 <_printf_common+0xa4>
    2ff8:	2306      	movs	r3, #6
    2ffa:	6820      	ldr	r0, [r4, #0]
    2ffc:	682a      	ldr	r2, [r5, #0]
    2ffe:	68e1      	ldr	r1, [r4, #12]
    3000:	4003      	ands	r3, r0
    3002:	2500      	movs	r5, #0
    3004:	2b04      	cmp	r3, #4
    3006:	d103      	bne.n	3010 <_printf_common+0x70>
    3008:	1a8d      	subs	r5, r1, r2
    300a:	43eb      	mvns	r3, r5
    300c:	17db      	asrs	r3, r3, #31
    300e:	401d      	ands	r5, r3
    3010:	68a3      	ldr	r3, [r4, #8]
    3012:	6922      	ldr	r2, [r4, #16]
    3014:	4293      	cmp	r3, r2
    3016:	dd01      	ble.n	301c <_printf_common+0x7c>
    3018:	1a9b      	subs	r3, r3, r2
    301a:	18ed      	adds	r5, r5, r3
    301c:	2700      	movs	r7, #0
    301e:	42bd      	cmp	r5, r7
    3020:	d120      	bne.n	3064 <_printf_common+0xc4>
    3022:	2000      	movs	r0, #0
    3024:	e010      	b.n	3048 <_printf_common+0xa8>
    3026:	3701      	adds	r7, #1
    3028:	68e3      	ldr	r3, [r4, #12]
    302a:	682a      	ldr	r2, [r5, #0]
    302c:	1a9b      	subs	r3, r3, r2
    302e:	429f      	cmp	r7, r3
    3030:	dad2      	bge.n	2fd8 <_printf_common+0x38>
    3032:	0022      	movs	r2, r4
    3034:	2301      	movs	r3, #1
    3036:	3219      	adds	r2, #25
    3038:	9901      	ldr	r1, [sp, #4]
    303a:	9800      	ldr	r0, [sp, #0]
    303c:	9e08      	ldr	r6, [sp, #32]
    303e:	47b0      	blx	r6
    3040:	1c43      	adds	r3, r0, #1
    3042:	d1f0      	bne.n	3026 <_printf_common+0x86>
    3044:	2001      	movs	r0, #1
    3046:	4240      	negs	r0, r0
    3048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    304a:	2030      	movs	r0, #48	; 0x30
    304c:	18e1      	adds	r1, r4, r3
    304e:	3143      	adds	r1, #67	; 0x43
    3050:	7008      	strb	r0, [r1, #0]
    3052:	0021      	movs	r1, r4
    3054:	1c5a      	adds	r2, r3, #1
    3056:	3145      	adds	r1, #69	; 0x45
    3058:	7809      	ldrb	r1, [r1, #0]
    305a:	18a2      	adds	r2, r4, r2
    305c:	3243      	adds	r2, #67	; 0x43
    305e:	3302      	adds	r3, #2
    3060:	7011      	strb	r1, [r2, #0]
    3062:	e7c1      	b.n	2fe8 <_printf_common+0x48>
    3064:	0022      	movs	r2, r4
    3066:	2301      	movs	r3, #1
    3068:	321a      	adds	r2, #26
    306a:	9901      	ldr	r1, [sp, #4]
    306c:	9800      	ldr	r0, [sp, #0]
    306e:	9e08      	ldr	r6, [sp, #32]
    3070:	47b0      	blx	r6
    3072:	1c43      	adds	r3, r0, #1
    3074:	d0e6      	beq.n	3044 <_printf_common+0xa4>
    3076:	3701      	adds	r7, #1
    3078:	e7d1      	b.n	301e <_printf_common+0x7e>
	...

0000307c <_printf_i>:
    307c:	b5f0      	push	{r4, r5, r6, r7, lr}
    307e:	b08b      	sub	sp, #44	; 0x2c
    3080:	9206      	str	r2, [sp, #24]
    3082:	000a      	movs	r2, r1
    3084:	3243      	adds	r2, #67	; 0x43
    3086:	9307      	str	r3, [sp, #28]
    3088:	9005      	str	r0, [sp, #20]
    308a:	9204      	str	r2, [sp, #16]
    308c:	7e0a      	ldrb	r2, [r1, #24]
    308e:	000c      	movs	r4, r1
    3090:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3092:	2a6e      	cmp	r2, #110	; 0x6e
    3094:	d100      	bne.n	3098 <_printf_i+0x1c>
    3096:	e08f      	b.n	31b8 <_printf_i+0x13c>
    3098:	d817      	bhi.n	30ca <_printf_i+0x4e>
    309a:	2a63      	cmp	r2, #99	; 0x63
    309c:	d02c      	beq.n	30f8 <_printf_i+0x7c>
    309e:	d808      	bhi.n	30b2 <_printf_i+0x36>
    30a0:	2a00      	cmp	r2, #0
    30a2:	d100      	bne.n	30a6 <_printf_i+0x2a>
    30a4:	e099      	b.n	31da <_printf_i+0x15e>
    30a6:	2a58      	cmp	r2, #88	; 0x58
    30a8:	d054      	beq.n	3154 <_printf_i+0xd8>
    30aa:	0026      	movs	r6, r4
    30ac:	3642      	adds	r6, #66	; 0x42
    30ae:	7032      	strb	r2, [r6, #0]
    30b0:	e029      	b.n	3106 <_printf_i+0x8a>
    30b2:	2a64      	cmp	r2, #100	; 0x64
    30b4:	d001      	beq.n	30ba <_printf_i+0x3e>
    30b6:	2a69      	cmp	r2, #105	; 0x69
    30b8:	d1f7      	bne.n	30aa <_printf_i+0x2e>
    30ba:	6821      	ldr	r1, [r4, #0]
    30bc:	681a      	ldr	r2, [r3, #0]
    30be:	0608      	lsls	r0, r1, #24
    30c0:	d523      	bpl.n	310a <_printf_i+0x8e>
    30c2:	1d11      	adds	r1, r2, #4
    30c4:	6019      	str	r1, [r3, #0]
    30c6:	6815      	ldr	r5, [r2, #0]
    30c8:	e025      	b.n	3116 <_printf_i+0x9a>
    30ca:	2a73      	cmp	r2, #115	; 0x73
    30cc:	d100      	bne.n	30d0 <_printf_i+0x54>
    30ce:	e088      	b.n	31e2 <_printf_i+0x166>
    30d0:	d808      	bhi.n	30e4 <_printf_i+0x68>
    30d2:	2a6f      	cmp	r2, #111	; 0x6f
    30d4:	d029      	beq.n	312a <_printf_i+0xae>
    30d6:	2a70      	cmp	r2, #112	; 0x70
    30d8:	d1e7      	bne.n	30aa <_printf_i+0x2e>
    30da:	2220      	movs	r2, #32
    30dc:	6809      	ldr	r1, [r1, #0]
    30de:	430a      	orrs	r2, r1
    30e0:	6022      	str	r2, [r4, #0]
    30e2:	e003      	b.n	30ec <_printf_i+0x70>
    30e4:	2a75      	cmp	r2, #117	; 0x75
    30e6:	d020      	beq.n	312a <_printf_i+0xae>
    30e8:	2a78      	cmp	r2, #120	; 0x78
    30ea:	d1de      	bne.n	30aa <_printf_i+0x2e>
    30ec:	0022      	movs	r2, r4
    30ee:	2178      	movs	r1, #120	; 0x78
    30f0:	3245      	adds	r2, #69	; 0x45
    30f2:	7011      	strb	r1, [r2, #0]
    30f4:	4a6c      	ldr	r2, [pc, #432]	; (32a8 <_printf_i+0x22c>)
    30f6:	e030      	b.n	315a <_printf_i+0xde>
    30f8:	000e      	movs	r6, r1
    30fa:	681a      	ldr	r2, [r3, #0]
    30fc:	3642      	adds	r6, #66	; 0x42
    30fe:	1d11      	adds	r1, r2, #4
    3100:	6019      	str	r1, [r3, #0]
    3102:	6813      	ldr	r3, [r2, #0]
    3104:	7033      	strb	r3, [r6, #0]
    3106:	2301      	movs	r3, #1
    3108:	e079      	b.n	31fe <_printf_i+0x182>
    310a:	0649      	lsls	r1, r1, #25
    310c:	d5d9      	bpl.n	30c2 <_printf_i+0x46>
    310e:	1d11      	adds	r1, r2, #4
    3110:	6019      	str	r1, [r3, #0]
    3112:	2300      	movs	r3, #0
    3114:	5ed5      	ldrsh	r5, [r2, r3]
    3116:	2d00      	cmp	r5, #0
    3118:	da03      	bge.n	3122 <_printf_i+0xa6>
    311a:	232d      	movs	r3, #45	; 0x2d
    311c:	9a04      	ldr	r2, [sp, #16]
    311e:	426d      	negs	r5, r5
    3120:	7013      	strb	r3, [r2, #0]
    3122:	4b62      	ldr	r3, [pc, #392]	; (32ac <_printf_i+0x230>)
    3124:	270a      	movs	r7, #10
    3126:	9303      	str	r3, [sp, #12]
    3128:	e02f      	b.n	318a <_printf_i+0x10e>
    312a:	6820      	ldr	r0, [r4, #0]
    312c:	6819      	ldr	r1, [r3, #0]
    312e:	0605      	lsls	r5, r0, #24
    3130:	d503      	bpl.n	313a <_printf_i+0xbe>
    3132:	1d08      	adds	r0, r1, #4
    3134:	6018      	str	r0, [r3, #0]
    3136:	680d      	ldr	r5, [r1, #0]
    3138:	e005      	b.n	3146 <_printf_i+0xca>
    313a:	0640      	lsls	r0, r0, #25
    313c:	d5f9      	bpl.n	3132 <_printf_i+0xb6>
    313e:	680d      	ldr	r5, [r1, #0]
    3140:	1d08      	adds	r0, r1, #4
    3142:	6018      	str	r0, [r3, #0]
    3144:	b2ad      	uxth	r5, r5
    3146:	4b59      	ldr	r3, [pc, #356]	; (32ac <_printf_i+0x230>)
    3148:	2708      	movs	r7, #8
    314a:	9303      	str	r3, [sp, #12]
    314c:	2a6f      	cmp	r2, #111	; 0x6f
    314e:	d018      	beq.n	3182 <_printf_i+0x106>
    3150:	270a      	movs	r7, #10
    3152:	e016      	b.n	3182 <_printf_i+0x106>
    3154:	3145      	adds	r1, #69	; 0x45
    3156:	700a      	strb	r2, [r1, #0]
    3158:	4a54      	ldr	r2, [pc, #336]	; (32ac <_printf_i+0x230>)
    315a:	9203      	str	r2, [sp, #12]
    315c:	681a      	ldr	r2, [r3, #0]
    315e:	6821      	ldr	r1, [r4, #0]
    3160:	1d10      	adds	r0, r2, #4
    3162:	6018      	str	r0, [r3, #0]
    3164:	6815      	ldr	r5, [r2, #0]
    3166:	0608      	lsls	r0, r1, #24
    3168:	d522      	bpl.n	31b0 <_printf_i+0x134>
    316a:	07cb      	lsls	r3, r1, #31
    316c:	d502      	bpl.n	3174 <_printf_i+0xf8>
    316e:	2320      	movs	r3, #32
    3170:	4319      	orrs	r1, r3
    3172:	6021      	str	r1, [r4, #0]
    3174:	2710      	movs	r7, #16
    3176:	2d00      	cmp	r5, #0
    3178:	d103      	bne.n	3182 <_printf_i+0x106>
    317a:	2320      	movs	r3, #32
    317c:	6822      	ldr	r2, [r4, #0]
    317e:	439a      	bics	r2, r3
    3180:	6022      	str	r2, [r4, #0]
    3182:	0023      	movs	r3, r4
    3184:	2200      	movs	r2, #0
    3186:	3343      	adds	r3, #67	; 0x43
    3188:	701a      	strb	r2, [r3, #0]
    318a:	6863      	ldr	r3, [r4, #4]
    318c:	60a3      	str	r3, [r4, #8]
    318e:	2b00      	cmp	r3, #0
    3190:	db5c      	blt.n	324c <_printf_i+0x1d0>
    3192:	2204      	movs	r2, #4
    3194:	6821      	ldr	r1, [r4, #0]
    3196:	4391      	bics	r1, r2
    3198:	6021      	str	r1, [r4, #0]
    319a:	2d00      	cmp	r5, #0
    319c:	d158      	bne.n	3250 <_printf_i+0x1d4>
    319e:	9e04      	ldr	r6, [sp, #16]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d064      	beq.n	326e <_printf_i+0x1f2>
    31a4:	0026      	movs	r6, r4
    31a6:	9b03      	ldr	r3, [sp, #12]
    31a8:	3642      	adds	r6, #66	; 0x42
    31aa:	781b      	ldrb	r3, [r3, #0]
    31ac:	7033      	strb	r3, [r6, #0]
    31ae:	e05e      	b.n	326e <_printf_i+0x1f2>
    31b0:	0648      	lsls	r0, r1, #25
    31b2:	d5da      	bpl.n	316a <_printf_i+0xee>
    31b4:	b2ad      	uxth	r5, r5
    31b6:	e7d8      	b.n	316a <_printf_i+0xee>
    31b8:	6809      	ldr	r1, [r1, #0]
    31ba:	681a      	ldr	r2, [r3, #0]
    31bc:	0608      	lsls	r0, r1, #24
    31be:	d505      	bpl.n	31cc <_printf_i+0x150>
    31c0:	1d11      	adds	r1, r2, #4
    31c2:	6019      	str	r1, [r3, #0]
    31c4:	6813      	ldr	r3, [r2, #0]
    31c6:	6962      	ldr	r2, [r4, #20]
    31c8:	601a      	str	r2, [r3, #0]
    31ca:	e006      	b.n	31da <_printf_i+0x15e>
    31cc:	0649      	lsls	r1, r1, #25
    31ce:	d5f7      	bpl.n	31c0 <_printf_i+0x144>
    31d0:	1d11      	adds	r1, r2, #4
    31d2:	6019      	str	r1, [r3, #0]
    31d4:	6813      	ldr	r3, [r2, #0]
    31d6:	8aa2      	ldrh	r2, [r4, #20]
    31d8:	801a      	strh	r2, [r3, #0]
    31da:	2300      	movs	r3, #0
    31dc:	9e04      	ldr	r6, [sp, #16]
    31de:	6123      	str	r3, [r4, #16]
    31e0:	e054      	b.n	328c <_printf_i+0x210>
    31e2:	681a      	ldr	r2, [r3, #0]
    31e4:	1d11      	adds	r1, r2, #4
    31e6:	6019      	str	r1, [r3, #0]
    31e8:	6816      	ldr	r6, [r2, #0]
    31ea:	2100      	movs	r1, #0
    31ec:	6862      	ldr	r2, [r4, #4]
    31ee:	0030      	movs	r0, r6
    31f0:	f000 f870 	bl	32d4 <memchr>
    31f4:	2800      	cmp	r0, #0
    31f6:	d001      	beq.n	31fc <_printf_i+0x180>
    31f8:	1b80      	subs	r0, r0, r6
    31fa:	6060      	str	r0, [r4, #4]
    31fc:	6863      	ldr	r3, [r4, #4]
    31fe:	6123      	str	r3, [r4, #16]
    3200:	2300      	movs	r3, #0
    3202:	9a04      	ldr	r2, [sp, #16]
    3204:	7013      	strb	r3, [r2, #0]
    3206:	e041      	b.n	328c <_printf_i+0x210>
    3208:	6923      	ldr	r3, [r4, #16]
    320a:	0032      	movs	r2, r6
    320c:	9906      	ldr	r1, [sp, #24]
    320e:	9805      	ldr	r0, [sp, #20]
    3210:	9d07      	ldr	r5, [sp, #28]
    3212:	47a8      	blx	r5
    3214:	1c43      	adds	r3, r0, #1
    3216:	d043      	beq.n	32a0 <_printf_i+0x224>
    3218:	6823      	ldr	r3, [r4, #0]
    321a:	2500      	movs	r5, #0
    321c:	079b      	lsls	r3, r3, #30
    321e:	d40f      	bmi.n	3240 <_printf_i+0x1c4>
    3220:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3222:	68e0      	ldr	r0, [r4, #12]
    3224:	4298      	cmp	r0, r3
    3226:	da3d      	bge.n	32a4 <_printf_i+0x228>
    3228:	0018      	movs	r0, r3
    322a:	e03b      	b.n	32a4 <_printf_i+0x228>
    322c:	0022      	movs	r2, r4
    322e:	2301      	movs	r3, #1
    3230:	3219      	adds	r2, #25
    3232:	9906      	ldr	r1, [sp, #24]
    3234:	9805      	ldr	r0, [sp, #20]
    3236:	9e07      	ldr	r6, [sp, #28]
    3238:	47b0      	blx	r6
    323a:	1c43      	adds	r3, r0, #1
    323c:	d030      	beq.n	32a0 <_printf_i+0x224>
    323e:	3501      	adds	r5, #1
    3240:	68e3      	ldr	r3, [r4, #12]
    3242:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3244:	1a9b      	subs	r3, r3, r2
    3246:	429d      	cmp	r5, r3
    3248:	dbf0      	blt.n	322c <_printf_i+0x1b0>
    324a:	e7e9      	b.n	3220 <_printf_i+0x1a4>
    324c:	2d00      	cmp	r5, #0
    324e:	d0a9      	beq.n	31a4 <_printf_i+0x128>
    3250:	9e04      	ldr	r6, [sp, #16]
    3252:	0028      	movs	r0, r5
    3254:	0039      	movs	r1, r7
    3256:	f7ff fc79 	bl	2b4c <__aeabi_uidivmod>
    325a:	9b03      	ldr	r3, [sp, #12]
    325c:	3e01      	subs	r6, #1
    325e:	5c5b      	ldrb	r3, [r3, r1]
    3260:	0028      	movs	r0, r5
    3262:	7033      	strb	r3, [r6, #0]
    3264:	0039      	movs	r1, r7
    3266:	f7ff fbeb 	bl	2a40 <__udivsi3>
    326a:	1e05      	subs	r5, r0, #0
    326c:	d1f1      	bne.n	3252 <_printf_i+0x1d6>
    326e:	2f08      	cmp	r7, #8
    3270:	d109      	bne.n	3286 <_printf_i+0x20a>
    3272:	6823      	ldr	r3, [r4, #0]
    3274:	07db      	lsls	r3, r3, #31
    3276:	d506      	bpl.n	3286 <_printf_i+0x20a>
    3278:	6863      	ldr	r3, [r4, #4]
    327a:	6922      	ldr	r2, [r4, #16]
    327c:	4293      	cmp	r3, r2
    327e:	dc02      	bgt.n	3286 <_printf_i+0x20a>
    3280:	2330      	movs	r3, #48	; 0x30
    3282:	3e01      	subs	r6, #1
    3284:	7033      	strb	r3, [r6, #0]
    3286:	9b04      	ldr	r3, [sp, #16]
    3288:	1b9b      	subs	r3, r3, r6
    328a:	6123      	str	r3, [r4, #16]
    328c:	9b07      	ldr	r3, [sp, #28]
    328e:	aa09      	add	r2, sp, #36	; 0x24
    3290:	9300      	str	r3, [sp, #0]
    3292:	0021      	movs	r1, r4
    3294:	9b06      	ldr	r3, [sp, #24]
    3296:	9805      	ldr	r0, [sp, #20]
    3298:	f7ff fe82 	bl	2fa0 <_printf_common>
    329c:	1c43      	adds	r3, r0, #1
    329e:	d1b3      	bne.n	3208 <_printf_i+0x18c>
    32a0:	2001      	movs	r0, #1
    32a2:	4240      	negs	r0, r0
    32a4:	b00b      	add	sp, #44	; 0x2c
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a8:	0000356e 	.word	0x0000356e
    32ac:	0000355d 	.word	0x0000355d

000032b0 <_sbrk_r>:
    32b0:	2300      	movs	r3, #0
    32b2:	b570      	push	{r4, r5, r6, lr}
    32b4:	4c06      	ldr	r4, [pc, #24]	; (32d0 <_sbrk_r+0x20>)
    32b6:	0005      	movs	r5, r0
    32b8:	0008      	movs	r0, r1
    32ba:	6023      	str	r3, [r4, #0]
    32bc:	f7fd fbbe 	bl	a3c <_sbrk>
    32c0:	1c43      	adds	r3, r0, #1
    32c2:	d103      	bne.n	32cc <_sbrk_r+0x1c>
    32c4:	6823      	ldr	r3, [r4, #0]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d000      	beq.n	32cc <_sbrk_r+0x1c>
    32ca:	602b      	str	r3, [r5, #0]
    32cc:	bd70      	pop	{r4, r5, r6, pc}
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	200006d4 	.word	0x200006d4

000032d4 <memchr>:
    32d4:	b2c9      	uxtb	r1, r1
    32d6:	1882      	adds	r2, r0, r2
    32d8:	4290      	cmp	r0, r2
    32da:	d101      	bne.n	32e0 <memchr+0xc>
    32dc:	2000      	movs	r0, #0
    32de:	4770      	bx	lr
    32e0:	7803      	ldrb	r3, [r0, #0]
    32e2:	428b      	cmp	r3, r1
    32e4:	d0fb      	beq.n	32de <memchr+0xa>
    32e6:	3001      	adds	r0, #1
    32e8:	e7f6      	b.n	32d8 <memchr+0x4>

000032ea <memmove>:
    32ea:	b510      	push	{r4, lr}
    32ec:	4288      	cmp	r0, r1
    32ee:	d902      	bls.n	32f6 <memmove+0xc>
    32f0:	188b      	adds	r3, r1, r2
    32f2:	4298      	cmp	r0, r3
    32f4:	d308      	bcc.n	3308 <memmove+0x1e>
    32f6:	2300      	movs	r3, #0
    32f8:	429a      	cmp	r2, r3
    32fa:	d007      	beq.n	330c <memmove+0x22>
    32fc:	5ccc      	ldrb	r4, [r1, r3]
    32fe:	54c4      	strb	r4, [r0, r3]
    3300:	3301      	adds	r3, #1
    3302:	e7f9      	b.n	32f8 <memmove+0xe>
    3304:	5c8b      	ldrb	r3, [r1, r2]
    3306:	5483      	strb	r3, [r0, r2]
    3308:	3a01      	subs	r2, #1
    330a:	d2fb      	bcs.n	3304 <memmove+0x1a>
    330c:	bd10      	pop	{r4, pc}

0000330e <__malloc_lock>:
    330e:	4770      	bx	lr

00003310 <__malloc_unlock>:
    3310:	4770      	bx	lr
	...

00003314 <_free_r>:
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	0005      	movs	r5, r0
    3318:	2900      	cmp	r1, #0
    331a:	d010      	beq.n	333e <_free_r+0x2a>
    331c:	1f0c      	subs	r4, r1, #4
    331e:	6823      	ldr	r3, [r4, #0]
    3320:	2b00      	cmp	r3, #0
    3322:	da00      	bge.n	3326 <_free_r+0x12>
    3324:	18e4      	adds	r4, r4, r3
    3326:	0028      	movs	r0, r5
    3328:	f7ff fff1 	bl	330e <__malloc_lock>
    332c:	4a1d      	ldr	r2, [pc, #116]	; (33a4 <_free_r+0x90>)
    332e:	6813      	ldr	r3, [r2, #0]
    3330:	2b00      	cmp	r3, #0
    3332:	d105      	bne.n	3340 <_free_r+0x2c>
    3334:	6063      	str	r3, [r4, #4]
    3336:	6014      	str	r4, [r2, #0]
    3338:	0028      	movs	r0, r5
    333a:	f7ff ffe9 	bl	3310 <__malloc_unlock>
    333e:	bd70      	pop	{r4, r5, r6, pc}
    3340:	42a3      	cmp	r3, r4
    3342:	d909      	bls.n	3358 <_free_r+0x44>
    3344:	6821      	ldr	r1, [r4, #0]
    3346:	1860      	adds	r0, r4, r1
    3348:	4283      	cmp	r3, r0
    334a:	d1f3      	bne.n	3334 <_free_r+0x20>
    334c:	6818      	ldr	r0, [r3, #0]
    334e:	685b      	ldr	r3, [r3, #4]
    3350:	1841      	adds	r1, r0, r1
    3352:	6021      	str	r1, [r4, #0]
    3354:	e7ee      	b.n	3334 <_free_r+0x20>
    3356:	0013      	movs	r3, r2
    3358:	685a      	ldr	r2, [r3, #4]
    335a:	2a00      	cmp	r2, #0
    335c:	d001      	beq.n	3362 <_free_r+0x4e>
    335e:	42a2      	cmp	r2, r4
    3360:	d9f9      	bls.n	3356 <_free_r+0x42>
    3362:	6819      	ldr	r1, [r3, #0]
    3364:	1858      	adds	r0, r3, r1
    3366:	42a0      	cmp	r0, r4
    3368:	d10b      	bne.n	3382 <_free_r+0x6e>
    336a:	6820      	ldr	r0, [r4, #0]
    336c:	1809      	adds	r1, r1, r0
    336e:	1858      	adds	r0, r3, r1
    3370:	6019      	str	r1, [r3, #0]
    3372:	4282      	cmp	r2, r0
    3374:	d1e0      	bne.n	3338 <_free_r+0x24>
    3376:	6810      	ldr	r0, [r2, #0]
    3378:	6852      	ldr	r2, [r2, #4]
    337a:	1841      	adds	r1, r0, r1
    337c:	6019      	str	r1, [r3, #0]
    337e:	605a      	str	r2, [r3, #4]
    3380:	e7da      	b.n	3338 <_free_r+0x24>
    3382:	42a0      	cmp	r0, r4
    3384:	d902      	bls.n	338c <_free_r+0x78>
    3386:	230c      	movs	r3, #12
    3388:	602b      	str	r3, [r5, #0]
    338a:	e7d5      	b.n	3338 <_free_r+0x24>
    338c:	6821      	ldr	r1, [r4, #0]
    338e:	1860      	adds	r0, r4, r1
    3390:	4282      	cmp	r2, r0
    3392:	d103      	bne.n	339c <_free_r+0x88>
    3394:	6810      	ldr	r0, [r2, #0]
    3396:	6852      	ldr	r2, [r2, #4]
    3398:	1841      	adds	r1, r0, r1
    339a:	6021      	str	r1, [r4, #0]
    339c:	6062      	str	r2, [r4, #4]
    339e:	605c      	str	r4, [r3, #4]
    33a0:	e7ca      	b.n	3338 <_free_r+0x24>
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	200006ac 	.word	0x200006ac

000033a8 <_realloc_r>:
    33a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33aa:	0007      	movs	r7, r0
    33ac:	000d      	movs	r5, r1
    33ae:	0016      	movs	r6, r2
    33b0:	2900      	cmp	r1, #0
    33b2:	d105      	bne.n	33c0 <_realloc_r+0x18>
    33b4:	0011      	movs	r1, r2
    33b6:	f7ff fc2f 	bl	2c18 <_malloc_r>
    33ba:	0004      	movs	r4, r0
    33bc:	0020      	movs	r0, r4
    33be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33c0:	2a00      	cmp	r2, #0
    33c2:	d103      	bne.n	33cc <_realloc_r+0x24>
    33c4:	f7ff ffa6 	bl	3314 <_free_r>
    33c8:	0034      	movs	r4, r6
    33ca:	e7f7      	b.n	33bc <_realloc_r+0x14>
    33cc:	f000 f812 	bl	33f4 <_malloc_usable_size_r>
    33d0:	002c      	movs	r4, r5
    33d2:	4286      	cmp	r6, r0
    33d4:	d9f2      	bls.n	33bc <_realloc_r+0x14>
    33d6:	0031      	movs	r1, r6
    33d8:	0038      	movs	r0, r7
    33da:	f7ff fc1d 	bl	2c18 <_malloc_r>
    33de:	1e04      	subs	r4, r0, #0
    33e0:	d0ec      	beq.n	33bc <_realloc_r+0x14>
    33e2:	0029      	movs	r1, r5
    33e4:	0032      	movs	r2, r6
    33e6:	f7ff fbdb 	bl	2ba0 <memcpy>
    33ea:	0029      	movs	r1, r5
    33ec:	0038      	movs	r0, r7
    33ee:	f7ff ff91 	bl	3314 <_free_r>
    33f2:	e7e3      	b.n	33bc <_realloc_r+0x14>

000033f4 <_malloc_usable_size_r>:
    33f4:	1f0b      	subs	r3, r1, #4
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	1f18      	subs	r0, r3, #4
    33fa:	2b00      	cmp	r3, #0
    33fc:	da01      	bge.n	3402 <_malloc_usable_size_r+0xe>
    33fe:	580b      	ldr	r3, [r1, r0]
    3400:	18c0      	adds	r0, r0, r3
    3402:	4770      	bx	lr
    3404:	682f2e2e 	.word	0x682f2e2e
    3408:	732f6c61 	.word	0x732f6c61
    340c:	682f6372 	.word	0x682f6372
    3410:	695f6c61 	.word	0x695f6c61
    3414:	6d5f6332 	.word	0x6d5f6332
    3418:	6e79735f 	.word	0x6e79735f
    341c:	00632e63 	.word	0x00632e63
    3420:	682f2e2e 	.word	0x682f2e2e
    3424:	732f6c61 	.word	0x732f6c61
    3428:	682f6372 	.word	0x682f6372
    342c:	695f6c61 	.word	0x695f6c61
    3430:	00632e6f 	.word	0x00632e6f
    3434:	682f2e2e 	.word	0x682f2e2e
    3438:	752f6c61 	.word	0x752f6c61
    343c:	736c6974 	.word	0x736c6974
    3440:	6372732f 	.word	0x6372732f
    3444:	6974752f 	.word	0x6974752f
    3448:	6c5f736c 	.word	0x6c5f736c
    344c:	2e747369 	.word	0x2e747369
    3450:	00000063 	.word	0x00000063

00003454 <_i2cms>:
    3454:	00000000 00200014 00000100 00000022     ...... ....."...
    3464:	00d70000 007a1200                       ......z.

0000346c <sercomspi_regs>:
	...
    347c:	2f2e2e00 2f6c7068 63726573 682f6d6f     .../hpl/sercom/h
    348c:	735f6c70 6f637265 00632e6d              pl_sercom.c.

00003498 <_usb_ep_cfgs>:
    3498:	200005a0 00000000 00000040 20000560     ... ....@...`.. 
    34a8:	00000000 00000040 20000520 00000000     ....@... .. ....
    34b8:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    34c8:	73752f65 2e636462 87410063 000a3f3f     e/usbdc.c.A.??..
    34d8:	40014703 44454c80 203a4e4f 0a642500     .G.@.LEDON: .%d.
    34e8:	00000000                                ....

000034ec <__sf_fake_stderr>:
	...

0000350c <__sf_fake_stdin>:
	...

0000352c <__sf_fake_stdout>:
	...
    354c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    355c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    356c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    357c:	00006665                                ef..

00003580 <_init>:
    3580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3586:	bc08      	pop	{r3}
    3588:	469e      	mov	lr, r3
    358a:	4770      	bx	lr

0000358c <__init_array_start>:
    358c:	000000b5 	.word	0x000000b5

00003590 <_fini>:
    3590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3592:	46c0      	nop			; (mov r8, r8)
    3594:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3596:	bc08      	pop	{r3}
    3598:	469e      	mov	lr, r3
    359a:	4770      	bx	lr

0000359c <__fini_array_start>:
    359c:	0000008d 	.word	0x0000008d
